# Code for website parse
import pandas as pd
import numpy as np
from joblib import dump, load

nb_model = load("nb_model.joblib")
logreg_model = load("logreg_model.joblib")

langs = ["java", "python", "ocaml", "c", "c++"]


def predict_lang(contents):

    arr = np.array([])
    arr = np.append(arr, contents.count("#"))
    arr = np.append(arr, contents.count(";"))
    arr = np.append(arr, contents.count(","))
    arr = np.append(arr, contents.count(".") - contents.count("System.out.print"))
    arr = np.append(arr, contents.count("/"))
    arr = np.append(arr, contents.count("(") - contents.count("()"))
    arr = np.append(arr, contents.count(")") - contents.count("()"))
    arr = np.append(arr, contents.count("=="))
    arr = np.append(
        arr,
        contents.count("=")
        - 2 * contents.count("==")
        - contents.count("<=")
        - contents.count(">=")
        - contents.count("!="),
    )
    arr = np.append(arr, contents.count("+"))
    arr = np.append(arr, contents.count("-"))
    arr = np.append(arr, contents.count("*"))
    arr = np.append(arr, contents.count("&") - 2 * contents.count("&&"))
    arr = np.append(arr, contents.count("|") - 2 * contents.count("||"))
    arr = np.append(arr, contents.count("}"))
    arr = np.append(arr, contents.count("{"))
    arr = np.append(arr, contents.count("]"))
    arr = np.append(arr, contents.count("["))
    arr = np.append(arr, contents.count("!") - contents.count("!="))
    arr = np.append(arr, contents.count("<") - contents.count("<="))
    arr = np.append(arr, contents.count(">") - contents.count(">="))
    arr = np.append(arr, contents.count("<="))
    arr = np.append(arr, contents.count(">="))
    arr = np.append(arr, contents.count("!="))
    arr = np.append(arr, contents.count("||"))
    arr = np.append(arr, contents.count("&&"))
    arr = np.append(arr, contents.count("()"))
    arr = np.append(arr, contents.count('"'))
    arr = np.append(arr, contents.count("'"))
    arr = np.append(arr, contents.count("?"))
    arr = np.append(arr, contents.count("^"))
    arr = np.append(arr, contents.count("%"))
    arr = np.append(arr, contents.count("boolean"))
    arr = np.append(arr, contents.count("double"))
    arr = np.append(arr, contents.count("if") - contents.count("elif"))
    arr = np.append(arr, contents.count("return"))
    arr = np.append(arr, contents.count("while"))
    arr = np.append(arr, contents.count("break"))
    arr = np.append(arr, contents.count("else"))
    arr = np.append(
        arr,
        contents.count("int") - contents.count("interface") - contents.count("print"),
    )
    arr = np.append(arr, contents.count("static"))
    arr = np.append(arr, contents.count("char"))
    arr = np.append(arr, contents.count("false"))
    arr = np.append(arr, contents.count("new"))
    arr = np.append(arr, contents.count("true"))
    arr = np.append(arr, contents.count("class"))
    arr = np.append(arr, contents.count("for"))
    arr = np.append(arr, contents.count("public"))
    arr = np.append(arr, contents.count("void"))
    arr = np.append(arr, contents.count("abstract"))
    arr = np.append(arr, contents.count("byvalue"))
    arr = np.append(arr, contents.count("case"))
    arr = np.append(arr, contents.count("cast") - contents.count("dynamic_cast"))
    arr = np.append(arr, contents.count("catch"))
    arr = np.append(arr, contents.count("const"))
    arr = np.append(arr, contents.count("continue"))
    arr = np.append(arr, contents.count("extends"))
    arr = np.append(arr, contents.count("do"))
    arr = np.append(arr, contents.count("default"))
    arr = np.append(arr, contents.count("finalize"))
    arr = np.append(arr, contents.count("final") - contents.count("finalize"))
    arr = np.append(arr, contents.count("import"))
    arr = np.append(arr, contents.count("inner"))
    arr = np.append(arr, contents.count("instanceof"))
    arr = np.append(arr, contents.count("interface"))
    arr = np.append(arr, contents.count("long"))
    arr = np.append(arr, contents.count("native"))
    arr = np.append(arr, contents.count("null"))
    arr = np.append(arr, contents.count("operator"))
    arr = np.append(arr, contents.count("outer"))
    arr = np.append(arr, contents.count("package"))
    arr = np.append(arr, contents.count("private"))
    arr = np.append(arr, contents.count("protected"))
    arr = np.append(arr, contents.count("rest") - contents.count("restrict"))
    arr = np.append(arr, contents.count("short"))
    arr = np.append(arr, contents.count("super"))
    arr = np.append(arr, contents.count("switch"))
    arr = np.append(arr, contents.count("synchronized"))
    arr = np.append(arr, contents.count("this"))
    arr = np.append(arr, contents.count("throw") - contents.count("throws"))
    arr = np.append(arr, contents.count("throws"))
    arr = np.append(arr, contents.count("transient"))
    arr = np.append(arr, contents.count("try"))
    arr = np.append(arr, contents.count("var"))
    arr = np.append(arr, contents.count("volatile"))
    arr = np.append(arr, contents.count("auto"))
    arr = np.append(arr, contents.count("enum"))
    arr = np.append(arr, contents.count("extern"))
    arr = np.append(arr, contents.count("float"))
    arr = np.append(arr, contents.count("goto"))
    arr = np.append(arr, contents.count("inline"))
    arr = np.append(arr, contents.count("register"))
    arr = np.append(arr, contents.count("restrict"))
    arr = np.append(arr, contents.count("unsigned"))
    arr = np.append(arr, contents.count("signed") - contents.count("unsigned"))
    arr = np.append(arr, contents.count("sizeof"))
    arr = np.append(arr, contents.count("struct"))
    arr = np.append(arr, contents.count("typedef"))
    arr = np.append(arr, contents.count("union"))
    arr = np.append(arr, contents.count("dynamic_cast"))
    arr = np.append(arr, contents.count("explicit"))
    arr = np.append(arr, contents.count("friend"))
    arr = np.append(arr, contents.count("namespace"))
    arr = np.append(arr, contents.count("typeid"))
    arr = np.append(arr, contents.count("typename"))
    arr = np.append(arr, contents.count("and"))
    arr = np.append(arr, contents.count("as"))
    arr = np.append(arr, contents.count("assert"))
    arr = np.append(arr, contents.count("def"))
    arr = np.append(arr, contents.count("elif"))
    arr = np.append(arr, contents.count("del"))
    arr = np.append(arr, contents.count("from"))
    arr = np.append(arr, contents.count("global"))
    arr = np.append(arr, contents.count("in"))
    arr = np.append(arr, contents.count("is"))
    arr = np.append(arr, contents.count("lambda"))
    arr = np.append(arr, contents.count("None"))
    arr = np.append(arr, contents.count("not"))
    arr = np.append(
        arr,
        contents.count("or")
        - contents.count("for")
        - contents.count("import")
        - contents.count("operator")
        - contents.count("short")
        - contents.count("functor"),
    )
    arr = np.append(arr, contents.count("pass"))
    arr = np.append(arr, contents.count("raise"))
    arr = np.append(arr, contents.count("yield"))
    arr = np.append(arr, contents.count("asr"))
    arr = np.append(arr, contents.count("begin"))
    arr = np.append(
        arr,
        contents.count("fun") - contents.count("function") - contents.count("functor"),
    )
    arr = np.append(arr, contents.count("function"))
    arr = np.append(arr, contents.count("functor"))
    arr = np.append(arr, contents.count("inherit"))
    arr = np.append(arr, contents.count("initializer"))
    arr = np.append(arr, contents.count("land"))
    arr = np.append(arr, contents.count("match"))
    arr = np.append(arr, contents.count("let"))
    arr = np.append(arr, contents.count("module"))
    arr = np.append(arr, contents.count("mutable"))
    arr = np.append(arr, contents.count("rec") - contents.count("nonrec"))
    arr = np.append(arr, contents.count("nonrec"))
    arr = np.append(
        arr,
        contents.count("of") - contents.count("sizeof") - contents.count("instanceof"),
    )
    arr = np.append(arr, contents.count("sig") - contents.count("signed"))
    arr = np.append(arr, contents.count("then"))
    arr = np.append(arr, contents.count("virtual"))
    arr = np.append(
        arr,
        contents.count("print")
        - contents.count("printf")
        - contents.count("print_endline")
        - contents.count("System.out.print"),
    )
    arr = np.append(arr, contents.count("cout"))
    arr = np.append(arr, contents.count("cin"))
    arr = np.append(arr, contents.count("printf"))
    arr = np.append(arr, contents.count("scanf"))
    arr = np.append(arr, contents.count("input"))
    arr = np.append(arr, contents.count("print_endline"))
    arr = np.append(
        arr, contents.count("System.out.println") - contents.count("System.out.print")
    )
    arr = np.append(arr, contents.count("System.out.print"))
    arr2d = np.array([arr])
    return {
        "nb_model": langs[nb_model.predict(arr2d)[0]],
        "logreg_model": langs[logreg_model.predict(arr2d)[0]],
    }
