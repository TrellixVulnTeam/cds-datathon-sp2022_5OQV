contents,language
"(******************************************************************************)
(*      Copyright (c) 2008, 2009, Sebastien MONDET                            *)
(*                                                                            *)
(*      Permission is hereby granted, free of charge, to any person           *)
(*      obtaining a copy of this software and associated documentation        *)
(*      files (the ""Software""), to deal in the Software without               *)
(*      restriction, including without limitation the rights to use,          *)
(*      copy, modify, merge, publish, distribute, sublicense, and/or sell     *)
(*      copies of the Software, and to permit persons to whom the             *)
(*      Software is furnished to do so, subject to the following              *)
(*      conditions:                                                           *)
(*                                                                            *)
(*      The above copyright notice and this permission notice shall be        *)
(*      included in all copies or substantial portions of the Software.       *)
(*                                                                            *)
(*      THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND,       *)
(*      EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES       *)
(*      OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND              *)
(*      NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT           *)
(*      HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,          *)
(*      WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING          *)
(*      FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR         *)
(*      OTHER DEALINGS IN THE SOFTWARE.                                       *)
(******************************************************************************)

(** The (X)HTML output format, implements {!type:Signatures.printer}
    functions. *)

(**/**)

type t = {
  stack: Commands.Stack.t;
  mutable write: string -> unit;
  write_mem: (string -> unit) Stack.t;
  mutable current_line: int;
  mutable started_text: bool;
  mutable inside_header:bool;
  mutable current_table: Commands.Table.table option;
  mutable current_section: (int * string * Buffer.t) option;
  error: Error.error -> unit;
  mutable loc: Error.location;
  class_hook: string option;
  url_hook: string -> string;
  img_hook: string -> string;
  separate_header: (string * string * string) ref option;
  make_section_links: [ `never | `when_labeled | `always ];
}

module CS = Commands.Stack

let (~%) = Printf.sprintf

module AddClass = struct
  let name add style =
    match add with
    | None -> """"
    | Some s -> ~% "" %s%s"" s style
  
  let attribute add style =
    match add with
    | None -> """"
    | Some s -> ~% "" class=\""%s%s\"""" s style

end

let create
    ~writer ?class_hook ?separate_header
    ?(make_section_links=`when_labeled)
    ?(img_hook=fun s -> s) ?(url_hook=fun s -> s) () =
  let module S = Signatures in
  let write = writer.S.w_write in
  {
    stack = CS.empty ();
    write = write;
    write_mem = Stack.create ();
    current_line = 1;
    started_text = false;
    inside_header = false;
    current_table = None;
    current_section = None;
    error = writer.S.w_error;
    loc = {Error.l_line = -1; l_char = -1; l_file = ""NO FILE"";};
    class_hook = class_hook;
    url_hook = url_hook;
    img_hook = img_hook;
    separate_header = separate_header;
    make_section_links = make_section_links;
  }
    

let strstat s = (~% ""[%d:%d]"" s.Error.l_line s.Error.l_char)
let debugstr t s msg = 
  if false then
    (~% ""<!--DEBUG:[%s] Loc:[%d;%d] CurLine:%d-->""
       msg s.Error.l_line s.Error.l_char t.current_line)
  else
    """"

let sanitize_comments line =
  let patterns = [('<', ""LT""); ('>', ""GT""); ('&', ""AMP""); ('-', ""DASH"")] in
  Escape.replace_chars ~src:line ~patterns
    (* let src = Escape.replace_string ~src:line ~find:""-->"" ~replace_with:""XXX"" in *)
    (* Escape.replace_string ~src ~find:""<!--"" ~replace_with:""XXXX"" *)

let sanitize_pcdata line =
  let patterns = [('<', ""&lt;""); ('>', ""&gt;""); ('&', ""&amp;"")] in
  Escape.replace_chars ~src:line ~patterns

let sanitize_xml_attribute src =
  let patterns =
    [('<', ""&lt;""); ('>', ""&gt;""); ('&', ""&amp;""); ('""', ""&quot;"")] in
  Escape.replace_chars ~src ~patterns


let quotation_open_close t a =
  let default = (""&ldquo;"", ""&rdquo;"") in
  try
    match List.hd a with
    | ""'""  -> (""&lsquo;"", ""&rsquo;"")
    | ""en"" -> (""&ldquo;"", ""&rdquo;"")
    | ""fr"" -> (""&laquo;&nbsp;"", ""&nbsp;&raquo;"")
    | ""de"" -> (""&bdquo;"", ""&rdquo;"")
    | ""es"" -> (""&laquo;"", ""&raquo;"")
    | s    -> 
        t.error (Error.mk t.loc `warning (`unknown_quotation_style s));
        default
  with
  | e -> default

let list_start t =
  function `itemize -> ~% ""\n<ul%s>\n"" (AddClass.attribute t.class_hook ""ul"")
  | `numbered -> ~%  ""\n<ol%s>\n"" (AddClass.attribute t.class_hook ""ol"")
let list_item t = function
  | `itemize -> ~% ""</li>\n<li%s>"" (AddClass.attribute t.class_hook ""li"")
  | `numbered -> ~% ""</li>\n<li%s>""  (AddClass.attribute t.class_hook ""li"")
let list_firstitem t = 
  function `itemize -> ~% ""<li%s>"" (AddClass.attribute t.class_hook ""li"")
  | `numbered -> ~% ""<li%s>"" (AddClass.attribute t.class_hook ""li"")
let list_stop t = 
  function `itemize -> ""</li>\n</ul>\n"" | `numbered -> ""</li>\n</ol>\n""

let section_start t n l =
  let buf = Buffer.create 42 in
  match t.current_section with
  | Some _ ->
    failwith ""Nested Sections not allowed""
  | None ->
    t.current_section <- Some (n, l, buf);
    Stack.push t.write t.write_mem;
    t.write ""</div>\n"";
    t.write <- Buffer.add_string buf;
    ()

let section_stop t n l =
  begin match t.current_section with
  | None -> failwith ""fatal error: section_stop with no section_start""
  | Some (n, l, buf) ->
    let lsan =
      match t.make_section_links, sanitize_xml_attribute l with
      | `never, _ -> """"
      | `when_labeled, """" -> """" 
      | `when_labeled, s -> ~% "" id=\""%s\"""" s
      | `always, """" -> ~% "" id=\""%s\"""" (Escape.clean_string (Buffer.contents buf))
      | `always, s  -> ~% "" id=\""%s\"""" s
    in
    t.write <- Stack.pop t.write_mem;
    t.current_section <- None;
    let tag = ~% ""h%d"" (n + 1) in
    ~% ""<%s%s%s>%s</%s>\n<div class=\""p%s\"">""
      tag lsan (AddClass.attribute t.class_hook tag)
      (Buffer.contents buf)
      tag (AddClass.name t.class_hook ""p"")
  end

let link_start t args =
  let link, new_write = Commands.Link.start ~url_hook:t.url_hook args in
  Stack.push t.write t.write_mem;
  t.write <- new_write;
  link

let link_stop t l =
  t.write <- Stack.pop t.write_mem;
  let kind, target, text = Commands.Link.stop l in
  let target_str = 
    (match target with Some s -> s | None -> ""#"") in
  t.write
    (~% ""<a href=\""%s%s\""%s>%s</a>"" 
       (match kind with `local -> ""#"" | `generic -> """")
       (sanitize_xml_attribute target_str)
       (AddClass.attribute t.class_hook ""a"")
       (match text with Some s -> s | None -> sanitize_pcdata target_str));
  ()

let image_start t args =
  (* http://www.w3.org/Style/Examples/007/figures *)
  let error_msg m = t.error (Error.mk t.loc `error m) in
  let src, opts, lbl =
    Commands.Names.image_params ~img_hook:t.img_hook error_msg args in
  let opts_str =
    match opts with
    | `wpx px -> (~% ""width=\""%dpx\""""  px)
    | `wpercent w -> (~% ""width=\""%d%%\"""" w)
    | `none -> """" 
  in
  let sansrc =
    match sanitize_xml_attribute src with
      """" -> ""http://IMAGEWITHNOSOURCE"" | s -> s in
  let sanlbl =
    match sanitize_xml_attribute lbl with 
    | """" -> """" | s -> ~% ""id=\""%s\"" "" s in
  t.write
    (~% ""\n<div class=\""figure%s\"" %s>\n  <a href=\""%s\"">\
        \n    <img src=\""%s\"" %s %s alt=\""%s\""%s/>\n  </a><br/>\n""
       (AddClass.name t.class_hook ""figure"")
        sanlbl sansrc sansrc opts_str sanlbl sansrc
        (AddClass.attribute t.class_hook ""img""));
  `image (src, opts, lbl)

let image_stop = ""</div>""

let header_start t =
  t.inside_header <- true; 
  begin match t.separate_header with
  | None ->
      t.write (~% ""%s\n<div class=\""header%s\"">\n""
                 (if t.started_text then ""</div>"" else """")
                 (AddClass.name t.class_hook ""header""))
  | Some r ->
      Stack.push t.write t.write_mem;
      t.write <- (fun str -> 
                    match CS.head t.stack with
                    | Some `title    -> let t,a,s = !r in r := (t ^ str, a, s);
                    | Some `authors  -> let t,a,s = !r in r := (t, a ^ str, s);
                    | Some `subtitle -> let t,a,s = !r in r := (t, a, s ^ str);
                    | _ -> ());
  end

let header_stop t =
  t.inside_header <- false;
  begin match t.separate_header with
  | None ->
      t.started_text <- true; (* we put the <p> *)
      t.write (~% ""</div> <!-- END HEADER -->\n<div class=\""p%s\"">\n""
                 (AddClass.name t.class_hook ""p""))
  | Some r ->
      t.write <- Stack.pop t.write_mem;
  end

let title_start t =
  t.write (~% ""\n  <h1%s>"" (AddClass.attribute t.class_hook ""h1""))
let title_stop t = t.write ""</h1>\n""
let authors_start t =
  t.write (~% ""  <div class=\""authors%s\"">""
             (AddClass.name t.class_hook ""authors""))
let authors_stop t = t.write ""</div>\n""
let subtitle_start t =
  t.write (~% ""  <div class=\""subtitle%s\"">""
             (AddClass.name t.class_hook ""subtitle""))
let subtitle_stop t = t.write ""</div>\n""

let table_start t args =
  (* http://www.topxml.com/xhtml/articles/xhtml_tables/ *)
  let table, to_stack, new_write = Commands.Table.start args in
  t.current_table <- Some table;
  Stack.push t.write t.write_mem;
  t.write <- new_write;
  to_stack

let print_table t table =
  let module CT = Commands.Table in
  let write = t.write in
  let lbl_str =
    match table.CT.label with
    | None -> """"
    | Some s -> (~% ""id=\""%s\"""" (sanitize_xml_attribute s))
  in
  write
    (~% ""<div class=\""tablefigure%s\"">\n\
         <table class=\""tablefigure%s\""  border=\""1\"" %s >\n""
       (AddClass.name t.class_hook ""tablefigure"")
         (AddClass.name t.class_hook ""table"")
         lbl_str);
  let caption_str = (Buffer.contents table.CT.caption) in
  if not (Escape.is_white_space caption_str) then (
    write (~% ""<caption  class=\""tablefigure%s\"" %s>%s</caption>\n<tr>""
             (AddClass.name t.class_hook ""p"")
             lbl_str caption_str);
  );

  let riddle = CT.Util.make_riddle table in

  let rec write_cells cells cur_row cur_col =
    match cells with
    | [] -> (* fill the gap + warning *)
        ()
    | c :: tl ->
        let typ_of_cell = if c.CT.is_head then ""h"" else ""d"" in
        let alignement =
          match c.CT.align with
          | `right ->
              ~% ""class=\""rightalign%s\"" style=\""text-align:right;\""""
                (AddClass.name t.class_hook ""cellrightalign"")
          | `center ->
              ~% ""class=\""centeralign%s\"" style=\""text-align:center;\""""
                (AddClass.name t.class_hook ""cellcenteralign"")
          | `left ->
              ~% ""class=\""leftalign%s\"" style=\""text-align:left;\""""
                (AddClass.name t.class_hook ""cellleftalign"")
        in
        write (~% ""<t%s  rowspan=\""%d\"" colspan=\""%d\"" %s >%s</t%s>""
                 typ_of_cell c.CT.rows_used c.CT.cols_used alignement
                 (Buffer.contents c.CT.cell_text)
                 typ_of_cell);
        CT.Util.fill_riddle riddle
          cur_row cur_col c.CT.rows_used c.CT.cols_used;
        let next_row, next_col = 
          CT.Util.next_coordinates riddle table cur_row cur_col in
        if cur_row <> next_row then (
          write ""</tr>\n"";
          if tl <> [] then
            write (~% ""<tr%s>"" (AddClass.attribute t.class_hook ""tr""));
        );
        write_cells tl next_row next_col
  in
  write_cells (List.rev table.CT.cells) 0 0;
  write ""</table></div>\n""


let table_stop t =
  begin match t.current_table with
  | None -> failwith ""Why am I here ??? no table to end.""
  | Some tab ->
      (* p (~% ""End of table: %s\n"" (Buffer.contents tab.caption)); *)
      t.write <- Stack.pop t.write_mem;
      t.current_table <- None;
      print_table t tab;
  end

let cell_start t args =
  begin match t.current_table with
  | None ->
      t.error (Error.mk t.loc `error `cell_out_of_table);
      `cell (false, 1, `center)
  | Some tab ->
      Commands.Table.cell_start ~loc:t.loc ~error:t.error tab args
  end

let cell_stop t env =
  match t.current_table with
  | None -> (* Already warned *) ()
  | Some tab -> Commands.Table.cell_stop ~loc:t.loc ~error:t.error tab

let note_start t =
  t.write
    (~% ""<small class=\""notebegin%s\"">(</small><small class=\""note%s\"">""
       (AddClass.name t.class_hook ""notebegin"")
       (AddClass.name t.class_hook ""note""));
  `note

let note_stop t =
  ~% ""</small><small class=\""noteend%s\"">)</small>""
    (AddClass.name t.class_hook ""noteend"")

let may_start_text t =
  if not t.started_text && not t.inside_header then (
    t.started_text <- true;
    t.write (~% ""<div class=\""p%s\"">"" (AddClass.name t.class_hook ""p""));
  )

let start_environment ?(is_begin=false) t location name args =
  t.loc <- location;
  let module C = Commands.Names in
  let cmd name args =
    match name with
    | s when C.is_header s -> (header_start t); `header
    | s when C.is_title s ->  (title_start t); `title
    | s when C.is_subtitle s -> (subtitle_start t); `subtitle
    | s when C.is_authors s -> (authors_start t); `authors
    | _ ->
        may_start_text t;
        begin match name with
        | s when C.is_quotation s        ->
            let op, clo = quotation_open_close t args in
            t.write op;
            `quotation (op, clo)
        | s when C.is_italic s ->
            t.write (~% ""<i%s>"" (AddClass.attribute t.class_hook ""i""));
            `italic
        | s when C.is_bold s ->
            t.write (~% ""<b%s>"" (AddClass.attribute t.class_hook ""b""));
            `bold
        | s when C.is_mono_space s ->
            t.write (~% ""<tt%s>"" (AddClass.attribute t.class_hook ""tt""));
            `mono_space
        | s when C.is_superscript s ->
            t.write (~% ""<sup%s>"" (AddClass.attribute t.class_hook ""sup""));
            `superscript
        | s when C.is_subscript s ->
            t.write (~% ""<sub%s>"" (AddClass.attribute t.class_hook ""sub""));
            `subscript
        | s when (C.is_end s)           -> `cmd_end
        | s when C.is_list s             ->
            let style, other_args, waiting =
              let error_msg m = t.error (Error.mk t.loc `error m) in
              match args with
              | [] -> (`itemize, [], ref true)
              | h :: t -> (C.list_style error_msg h, t, ref true) in
            t.write (list_start t style);
            `list (style, other_args, waiting)
        | s when C.is_item s -> `item
        | s when C.is_section s -> 
            let level, label = C.section_params args in
            section_start t level label;
            `section (level, label)
        | s when C.is_link s -> (link_start t args)
        | s when C.is_image s -> image_start t args
        | s when C.is_table s -> table_start t args
        | s when C.is_cell s -> cell_start t args
        | s when C.is_note s -> note_start t
        | s when C.is_quote s ->
            t.write (~% ""<blockquote%s>"" (AddClass.attribute t.class_hook ""quote""));
            t.write (~% ""<div class=\""p%s\"">"" (AddClass.name t.class_hook ""p""));
            `quote
        | s ->
            t.error (Error.mk t.loc `error (`unknown_command  s));
            `unknown (s, args)
        end
  in
  let the_cmd =
    if C.is_begin name then (
      match args with
      | [] ->
          t.error (Error.mk t.loc `error `begin_without_arg);
          (`cmd_begin ("""", []))
      | h :: t -> (`cmd_begin (h, t))
    ) else (
      cmd name args
    )
  in
  if is_begin then (
    CS.push t.stack (`cmd_inside the_cmd);
  ) else (
    CS.push t.stack the_cmd;
  )

let start_command t location name args =
  t.loc <- location;
  (* p (~% ""Command: \""%s\""(%s)\n"" name (String.concat "", "" args)); *)
  match Commands.non_env_cmd_of_name name args with
  | `unknown (name, args) -> start_environment t location name args
  | cmd -> CS.push t.stack cmd

let stop_command t location =
  t.loc <- location;
  let rec out_of_env env =
    match env with
    | `cmd_end ->
        begin match CS.pop t.stack with
        | Some (`cmd_inside benv) ->
            (* p (~% ""{end} %s\n"" (Commands.env_to_string benv)); *)
            out_of_env benv
        | Some c ->
            t.error (Error.mk t.loc `error `non_matching_end);
            CS.push t.stack c;
        | None ->
            t.error (Error.mk t.loc `error `non_matching_end);
        end
    | `cmd_begin (nam, args) ->
        (* p (~% ""cmd begin %s(%s)\n"" nam (String.concat "", "" args)); *)
        start_environment ~is_begin:true t location nam args;
    | `paragraph ->
        t.write (~% ""</div>\n<div class=\""p%s\"">""
                   (AddClass.name t.class_hook ""p""))
    | `new_line -> 
        t.write (~% ""<br%s/>\n"" (AddClass.attribute t.class_hook ""br""))
    | `non_break_space -> t.write ""&nbsp;""
    | `horizontal_ellipsis -> t.write ""&hellip;""
    | `en_dash -> t.write ""&ndash;""
    | `em_dash -> t.write ""&mdash;""
    | `open_brace -> t.write ""{""
    | `close_brace -> t.write ""}""
    | `sharp -> t.write ""#""
    | (`utf8_char i) -> t.write (~% ""&#%d;"" i)
    | (`quotation (op, clo)) -> t.write clo
    | `italic       ->  t.write ""</i>""  
    | `bold         ->  t.write ""</b>""  
    | `mono_space   ->  t.write ""</tt>"" 
    | `superscript  ->  t.write ""</sup>""
    | `subscript    ->  t.write ""</sub>""
    | `list (style, _, r) -> t.write (list_stop t style)
    | `item ->
        begin match CS.head t.stack with
        | Some (`list (style, _, r))
        | Some (`cmd_inside (`list (style, _, r))) ->
            if !r then (
              t.write (list_firstitem t style);
              r := false;
            ) else (
              t.write (list_item t style);
            );
        | Some c ->
            t.error (Error.mk t.loc `error `item_out_of_list);
            CS.push t.stack c;
        | None ->
            t.error (Error.mk t.loc `error `item_out_of_list);
        end
    | `section (level, label) ->
      let section = (section_stop t level label) in
      t.write section;
    | `link l -> link_stop t l;
    | `image _ -> t.write image_stop;
    | `header ->  (header_stop t);
    | `title -> title_stop t;
    | `subtitle -> subtitle_stop t;
    | `authors -> authors_stop t;
    | `table _ -> table_stop t
    | `cell _ as c -> cell_stop t c
    | `note -> t.write (note_stop t)
    | `quote ->  t.write ""</div></blockquote>""
    | `cmd_inside c ->
        t.error (Error.mk t.loc `error `closing_brace_matching_begin);
    | `unknown c -> () (* Already ""t.error-ed"" in start_environment *)
    | c -> (* shouldn't be there !! *)
        t.error (Error.mk t.loc `fatal_error 
                   (`transformer_lost (Commands.env_to_string c)));
  in
  match CS.pop t.stack with
  | Some env -> out_of_env env
  | None ->
      t.error (Error.mk t.loc `error `nothing_to_end_with_brace)


let handle_comment_line t location line =
  t.loc <- location;
  t.write (~% ""%s<!--%s-->\n"" (debugstr t location ""Comment"")
             (sanitize_comments line));
  t.current_line <- t.current_line + 1;
  ()

let handle_text t location line =
  t.loc <- location;
  if not (Escape.is_white_space line) then (
    may_start_text t;
  );
  
  if (t.started_text && (not t.inside_header)) ||
    (t.inside_header && (CS.head t.stack <> Some `header)) then (

      let debug = debugstr t location ""Text"" in
      let pcdata = sanitize_pcdata line in
      if location.Error.l_line > t.current_line then (
        t.write (~% ""%s%s"" debug pcdata);
        t.current_line <- location.Error.l_line;
      ) else (
        t.write (~% ""%s%s"" debug pcdata);
      )
    ) else (
      if
        CS.head t.stack = Some `header
        && (not (Escape.is_white_space line))
      then (
        t.write (~% ""<!-- IGNORED TEXT: %s -->"" (sanitize_comments line));
      );

    )


let terminate t location =
  t.loc <- location;
  if (CS.to_list t.stack) <> [] then (
    let l = List.map Commands.env_to_string (CS.to_list t.stack) in
    t.error (Error.mk t.loc `error (`terminating_with_open_environments l));
  );  
  t.write (if t.started_text then ""</div>\n"" else """");
  () 


let start_raw_mode t location kind_str args =
  t.current_line <- location.Error.l_line;
  let kind = Commands.Raw.raw_cmd_of_str kind_str in
  begin match kind with
  | `code ->
      CS.push t.stack (`code args);
      begin match args with
      | _ :: q :: _ ->
        t.write (~% ""\n<!--verbatimbegin:%s -->\n"" (sanitize_comments q))
      | _ -> ()
      end;
      t.write (~% ""<pre%s>""  (AddClass.attribute t.class_hook ""pre""));
  | `bypass | `text | `ignore as env_kind ->
      CS.push t.stack env_kind;
  end

let handle_raw_text t location text =
  t.current_line <- location.Error.l_line;
  begin match CS.head t.stack with
  | Some (`code _) | Some `text ->
      let pcdata = sanitize_pcdata text in
      t.write (~% ""%s"" pcdata);
  | Some `bypass ->
      t.write text;
  | Some `ignore -> ()
  | _ ->
      failwith ""handle_raw_text: Shouldn't be there, Parser's fault ?"";
  end
  
let stop_raw_mode t location =
  t.current_line <- location.Error.l_line;
  begin match CS.pop t.stack with
  | Some (`code args) ->
      t.write ""</pre>"";
      begin match args with
      | _ :: q :: _ ->
        t.write (~% ""\n<!--verbatimend:%s -->\n"" (sanitize_comments q))
      | _ -> ()
      end;
  | Some `bypass | Some `text | Some `ignore -> ()
  | _ ->
      (* warning ? error ? anyway, *)
      failwith ""Shouldn't be there, Parser's fault ?"";
  end

(**/**)

(** Build a [printer] to feed {!val:Parser.do_transformation}, the
optional arguments have the same meaning than for
{!val:Transform.brtx_to_html}. *)
let build ?(print_comments=false)
    ?make_section_links
    ?separate_header ?img_hook ?url_hook ?class_hook ~writer () =
  let t =
    create ~writer ?make_section_links
      ?class_hook ?separate_header ?img_hook ?url_hook () in
  { Signatures.
      print_comment =
      if print_comments then 
        (handle_comment_line t)
      else 
        (fun a b -> ());
    print_text =    handle_text t;
    enter_cmd =     start_command t;
    leave_cmd =     stop_command t;
    terminate =     terminate t;
    is_raw = Commands.Raw.is_raw_cmd;
    default_raw_end = Commands.Raw.default_raw_end;
    enter_raw =     start_raw_mode t;
    print_raw =     handle_raw_text t;
    leave_raw =     stop_raw_mode t;
    error = writer.Signatures.w_error; }

(** Build an HTML header. *)
let header ?(title="""") ?(comment="""") ?stylesheet_link () =
  let css_str =
    match stylesheet_link with
    | None -> """"
    | Some f ->
        ~% ""<link rel=\""stylesheet\""  type=\""text/css\"" href=\""%s\"" />\n""
          (sanitize_xml_attribute f)
  in
  ~% ""<!DOCTYPE html
    PUBLIC \""-//W3C//DTD XHTML 1.0 Strict//EN\""
    \""http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"">
    <html xmlns=\""http://www.w3.org/1999/xhtml\"" xml:lang=\""en\"" lang=\""en\"">
    <!-- %s -->
    <head>
    <meta http-equiv=\""Content-Type\"" content=\""text/html; charset=utf-8\"" />
    %s<title>%s</title>
    </head>
    <body>"" (sanitize_comments comment) css_str (sanitize_pcdata title)

(** Close an HTML document. *)
let footer () = ""</body>\n</html>\n""

",ocaml
"(**************************************************************************)
(*                                                                        *)
(*                      TypeRex                                           *)
(*                                                                        *)
(*   Copyright OCamlPro 2011-2017. All rights reserved.                   *)
(*   This file is distributed under the terms of the LGPL v2.1 with       *)
(*   the special exception on linking described in the file LICENSE.      *)
(*      (GNU Lesser General Public Licence version 2.1)                   *)
(*                                                                        *)
(*     Contact: <typerex@ocamlpro.com> (http://www.ocamlpro.com/)         *)
(*                                                                        *)
(*  THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND,       *)
(*  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES       *)
(*  OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND              *)
(*  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS   *)
(*  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN    *)
(*  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN     *)
(*  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE      *)
(*  SOFTWARE.                                                             *)
(**************************************************************************)

type color =
  | Red
  | Pink
  | Purple
  | DeepPurple
  | Indigo
  | Blue
  | LightBlue
  | Cyan
  | Teal
  | Green
  | LightGreen
  | Lime
  | Yellow
  | Amber
  | Orange
  | DeepOrange
  | Brown
  | Grey
  | BlueGrey
  | Black
  | White
  | Transparent

type shade =
  | Lighten of int
  | Darken of int
  | Accent of int
  | None

type t = { color : color ; shade : shade }

let color_to_string = function
  | Red -> ""red""
  | Pink -> ""pink""
  | Purple -> ""purple""
  | DeepPurple -> ""deep-purple""
  | Indigo -> ""indigo""
  | Blue -> ""blue""
  | LightBlue -> ""light-blue""
  | Cyan -> ""cyan""
  | Teal -> ""teal""
  | Green -> ""green""
  | LightGreen -> ""light-green""
  | Lime -> ""lime""
  | Yellow -> ""yellow""
  | Amber -> ""amber""
  | Orange -> ""orange""
  | DeepOrange -> ""deep-orange""
  | Brown -> ""brown""
  | Grey -> ""grey""
  | BlueGrey -> ""blue-grey""
  | Black -> ""black""
  | White -> ""white""
  | Transparent -> ""transparent""

let shade_to_string = function
  | Lighten i -> Printf.sprintf ""lighten-%d"" i
  | Darken i -> Printf.sprintf ""darken-%d"" i
  | Accent i -> Printf.sprintf ""accent-%d"" i
  | None ->  """"

let background_color div color =
  let col = color_to_string color.color in
  Js_utils.Manip.addClass div col ;
  match color.shade with
  | None -> ()
  | shade ->
      Js_utils.Manip.addClass div (shade_to_string shade)

let text_color div color =
  let col = color_to_string color.color ^ ""-text""in
  Js_utils.Manip.addClass div col ;
  match color.shade with
  | None -> ()
  | shade ->
      let shade = ""text-"" ^ shade_to_string shade in
      Js_utils.Manip.addClass div shade
",ocaml
"module Pre = struct
  (* 和集合 *)
  let union (xs: 'a list) (ys: 'a list):'a list =
    List.filter begin fun x ->
      not (List.mem x ys)
    end xs @ ys

  (* 積集合 *)
  let intersect (xs: 'a list) (ys: 'a list): 'a list =
    List.filter begin fun x ->
      List.mem x ys
    end xs

  (* リストをセットにする。要素が１つずつにまとめる *)
  let nub (xs : 'a list): 'a list =
    List.fold_left begin fun ys y ->
      if List.mem y ys
      then ys
      else y :: ys
    end [] xs

  let show_list show sep xs =
    begin
      let rec loop xs =
        begin match xs with
          | [] -> """"
          | [x] -> show x
          | x::xs -> show x ^ sep ^ loop xs
        end
    in
      Printf.sprintf ""[%s]"" (loop xs)
    end
  let show_int_list xs =
    show_list string_of_int ""; "" xs
end

module Id = struct
  type id = string

  (* 数値に対するidを取得する *)
  let enumId (n:int) : id =
    ""v"" ^ string_of_int n
end

(* 3 Kinds *)
module Kind = struct
  type kind =
    | Star
    | Kfun of kind * kind

  let rec show (k:kind):string =
    begin match k with
      | Star -> ""*""
      | Kfun(Kfun _ as k1,k2) -> Printf.sprintf ""(%s) -> %s"" (show k1) (show k2) 
      | Kfun(k1,k2) -> Printf.sprintf ""%s -> %s"" (show k1) (show k2) 
    end
end

(* 4 Types *)
module Type = struct
  open Kind
  (* 型変数 *)
  type tyvar = Tyvar of Id.id * kind
  (* 型コンストラクタ *)
  type tycon = Tycon of Id.id * kind
  (* 型 *)
  type type_ =
    | TVar of tyvar
    | TCon of tycon
    | TAp of type_ * type_
    | TGen of int

  let tUnit :type_ = TCon(Tycon(""()"", Star))
  let tChar :type_ = TCon(Tycon(""Char"", Star))
  let tInt :type_ = TCon(Tycon(""Int"", Star))
  let tInteger :type_ = TCon(Tycon(""Integer"", Star))
  let tFloat :type_ = TCon(Tycon(""Float"", Star))
  let tDouble :type_ = TCon(Tycon(""Double"", Star))

  let tList :type_ = TCon(Tycon(""[]"", Kfun(Star, Star)))
  let tArrow :type_ = TCon(Tycon(""(->)"", Kfun(Star, Kfun(Star, Star))))
  let tTuple2 :type_ = TCon(Tycon(""(,)"", Kfun(Star, Kfun(Star, Star))))

  let fn (a:type_) (b:type_) :type_ = TAp(TAp(tArrow, a), b)

  let list t :type_ = TAp(tList, t)

  let tString :type_ = list tChar

  let pair a b :type_ = TAp(TAp(tTuple2, a), b)

  let tyvarKind (Tyvar(_, k)) :kind = k
  let tyconKind (Tycon(_, k)) :kind = k
  let rec typeKind t:kind =
    match t with
    | TCon tc -> tyconKind tc
    | TVar u -> tyvarKind u
    | TAp(t, _) ->
      begin match typeKind t with
        | Kfun(_, k) -> k
        | _ -> failwith ""inconsistent type""
      end
    | TGen _ -> failwith ""generic type variables have no kind""

  let rec show (t:type_): string =
    begin match t with
      | TVar(Tyvar(id,kind)) -> Printf.sprintf ""TVar(Tyvar(%s,%s))"" id (Kind.show kind)
      | TCon(Tycon(id,kind)) -> Printf.sprintf ""TCon(Tycon(%s,%s))"" id (Kind.show kind)
      | TAp(t1,t2)           -> Printf.sprintf ""TAp(%s,%s)"" (show t1) (show t2)
      | TGen(i)              -> Printf.sprintf ""TGen(%d)"" i
    end
end

(* 5 Substitutions *)
module Subst = struct
  open Type

  type subst = (tyvar * type_) list

  let nullSubst : subst = []

  let (+->) u t : subst = [(u, t)]

  (* 型変数を展開する *)
  let rec typeApply (s : subst) (t:type_):type_ = 
    begin match t with
      | TVar u as t ->
        begin try
          List.assoc u s
        with
          Not_found -> t
        end
      | TAp(l, r) -> TAp(typeApply s l, typeApply s r)
      | t -> t
    end

  let rec typeTv (t:type_):tyvar list =
    begin match t with
      | TVar u -> [u]
      | TAp(l, r) -> Pre.union (typeTv l) (typeTv r)
      | _ -> []
    end

  let listApply (apply : subst -> 'a -> 'b) (s : subst) (xs:'a list):'b list =
    List.map (apply s) xs

  let listTv (tv:'a -> tyvar list) (xs:'a list) : tyvar list =
    Pre.nub (List.concat (List.map tv xs))

  let (@@) (s1:subst) (s2 : subst) : subst =
    List.map begin fun (u, t) ->
      (u, typeApply s1 t)
    end s2 @ s1

  let merge s1 s2 : subst =
    let agree =
      let agreeOnVar v =
        typeApply s1 (TVar v) = typeApply s2 (TVar v)
      in
      List.for_all agreeOnVar (Pre.intersect (List.map fst s1) (List.map fst s2))
    in
    if agree
    then s1 @ s2
    else failwith ""substitutions do not agree""

  let show (subst:subst):string =
    Pre.show_list begin fun (Tyvar(id,kind),type_) ->
      Printf.sprintf ""Tyvar(%s,%s),%s"" id (Kind.show kind) (Type.show type_)
    end ""; "" subst

  let rec show_tyvar(tv:tyvar): string = 
    begin match tv with
      | Tyvar(id,kind) -> Printf.sprintf ""Tyvar(%s,%s)"" id (Kind.show kind)
    end

  let show_tyvar_list xs :string =
    Pre.show_list begin fun (Tyvar(id,kind)) ->
      Printf.sprintf ""Tyvar(%s,%s)"" id (Kind.show kind)
    end ""; "" xs
end

(* 6 Unification and Matching *)
module Unify = struct
  open List
  open Kind
  open Type
  open Subst
  
  let rec mgu (t1:type_) (t2:type_):subst =
    match t1, t2 with
    | TAp(l, r), TAp(l', r') ->
      let s1 = mgu l l' in
      let s2 = mgu (typeApply s1 r) (typeApply s1 r') in
      s2 @@ s1
    | TVar u, t | t, TVar u -> varBind u t
    | TCon tc1, TCon tc2 when tc1 = tc2 -> nullSubst
    | _ -> failwith ""types do not unify""

  and varBind (u:tyvar) (t:type_):subst =
    match t with
    | _ when t = TVar u                -> nullSubst
    | _ when mem u (typeTv t)          -> failwith ""occurs check fails""
    | _ when tyvarKind u <> typeKind t -> failwith ""kinds do not match""
    | _                                -> u +-> t

  let rec match_ (t1:type_) (t2:type_):subst =
    match t1, t2 with
    | TAp(l, r), TAp(l', r') ->
      let sl = match_ l l' in
      let sr = match_ r r' in
      merge sl sr
    | TVar u, t when tyvarKind u = typeKind t -> u +-> t
    | TCon tc1, TCon tc2 when tc1 = tc2 -> nullSubst
    | _ -> failwith ""types do not match""
end

(* 7 Type Classes, Predicates and Qualified Types *)
module Pred = struct
  open List
  open Kind
  open Type
  open Subst


  (* 7.1 Basic definitions *)
  type pred = IsIn of Id.id * type_

  let p (IsIn(s, t)) =
    s  ^ "" "" ^ (Type.show t)

  let _ =
    let ty = TVar(Tyvar(""a"", Star)) in
    let pred = IsIn(""Num"", ty) in
    Printf.printf ""pred %s\n"" (p pred)

  let ps pred =
    Pre.show_list p "", "" pred

  let _ =
    let ty = TVar(Tyvar(""a"", Star)) in
    let preds = [IsIn(""Num"", ty);IsIn(""B"", ty)] in
    Printf.printf ""preds %s\n"" (ps preds)

  type 't qual = Qual of pred list * 't

  let p_qual q =
    begin match q with
      | Qual(preds,ty) -> ps preds ^ "" => "" ^ Type.show ty
    end

  let _ =

    (* (Num a) => a -> Int *)

    let ty = TVar(Tyvar(""a"", Star)) in
    let pred = IsIn(""Num"", ty) in
    Printf.printf ""pred %s\n"" (p pred);
    (* Qual *)
    let q = Qual([pred], fn ty tInt) in
    Printf.printf ""qual = %s\n"" (p_qual q)

  let predApply (s:subst) (pred:pred):pred =
    match pred with
    | IsIn(i, t) -> IsIn(i, Subst.typeApply s t)

  let _ =
    let s = [Tyvar(""a"", Star), tInt] in
    let pred = IsIn(""Num"", TVar(Tyvar(""a"", Star))) in
    let pred2 = predApply s pred in
    Printf.printf ""pred2 = %s\n"" (p pred2)

  let predTv (pred:pred):tyvar list =
    match pred with
    | IsIn(_, t) -> Subst.typeTv t

  let _ =
    let pred = IsIn(""Num"", TVar(Tyvar(""a"", Star))) in
    let tvs = predTv pred in
    Printf.printf ""tvs = %s\n"" (Subst.show_tyvar_list tvs)

  let predsApply (s:subst) (xs:pred list):pred list =
    Subst.listApply predApply s xs

  let _ =
    let s = [Tyvar(""a"", Star), tInt] in
    let preds = [IsIn(""Num"", TVar(Tyvar(""a"", Star)))] in
    let preds2 = predsApply s preds in
    Printf.printf ""preds2 = %s\n"" (ps preds2)

  let predsTv (xs:'a list) : tyvar list =
    Subst.listTv predTv xs

  let _ =
    let preds = [IsIn(""Num"", TVar(Tyvar(""a"", Star)))] in
    let tvs = predsTv preds in
    Printf.printf ""tvs = %s\n"" (Subst.show_tyvar_list tvs)

  let qualTypeApply (s:subst) (qual:type_ qual):type_ qual =
    match qual with
    | Qual(ps, t) -> Qual(predsApply s ps, Subst.typeApply s t)

  let _ =
    let ty = TVar(Tyvar(""a"", Star)) in
    let pred = IsIn(""Num"", ty) in
    let q = Qual([pred], fn ty tInt) in
    Printf.printf ""qual = %s\n"" (p_qual q);
    let qual2 = qualTypeApply ((Tyvar(""a"", Star)) +-> tInt) q in
    Printf.printf ""qual2 = %s\n"" (p_qual qual2)

  let qualTypeTv qual =
    match qual with
    | Qual(ps, t) ->
      Pre.union (predsTv ps) (Subst.typeTv t)

  let _ =
    let ty = TVar(Tyvar(""a"", Star)) in
    let pred = IsIn(""Num"", ty) in
    let q = Qual([pred], fn ty tInt) in
    let tvs = qualTypeTv q in
    Printf.printf ""tvs = %s\n"" (Subst.show_tyvar_list tvs)

  let lift (m:type_->type_->'a) (p:pred) (p':pred):'a =
    match (p, p') with
    | IsIn(i, t), IsIn(i', t') ->
      if i = i' then m t t'
      else failwith ""classes differ""

  let mguPred = lift Unify.mgu

  let _ =
    let pred1 = IsIn(""Num"", TVar(Tyvar(""a"", Star))) in
    let pred2 = IsIn(""Num"", TVar(Tyvar(""a"", Star))) in
    let s = mguPred pred1 pred2 in
    Printf.printf ""mguPred = %s\n"" (Subst.show s)

  let matchPred = lift Unify.match_

  let _ =
    let pred1 = IsIn(""Num"", TVar(Tyvar(""a"", Star))) in
    let pred2 = IsIn(""Num"", TVar(Tyvar(""a"", Star))) in
    let s = matchPred pred1 pred2 in
    Printf.printf ""matchPred = %s\n"" (Subst.show s)

  type inst = pred qual

  let p_inst i =
    begin match i with
    | Qual(preds,pred) -> Printf.sprintf ""Qual(%s,%s)"" (ps preds) (p pred)
    end

  let _ =
    let inst = Qual([IsIn(""Ord"",tUnit);IsIn(""Ord"",tChar)],IsIn(""Ord"",tChar)) in
    Printf.printf ""inst=%s\n"" (p_inst inst)

  type class_ = Id.id list * inst list

  let (==>) ps p = Qual(ps, p)

  let _ =
    let (cls:class_) = (
      [""Eq""], (* クラス名 *)
      [
      (* インスタンスの列挙 型の実装の列挙 *)
        [] ==> IsIn(""Ord"", tUnit);
        [] ==> IsIn(""Ord"", tChar);
        (* int *)
        [] ==> IsIn(""Ord"", tInt);
        (* Ord a, Ord b => pair a b *)
        [
          IsIn(""Ord"",TVar(Tyvar(""a"", Star)));
          IsIn(""Ord"",TVar(Tyvar(""b"", Star)))
        ] ==>
        IsIn(""Ord"", (pair (TVar(Tyvar(""a"",Star))) (TVar(Tyvar(""b"",Star)))))
        
      ]
    ) in ()

  (* 7.2 Class Environments *)

  type classEnv = {
    classes : (Id.id -> class_);
    defaults : type_ list;
  }

  let initialEnv :classEnv = {
    classes = (fun i -> raise Not_found);
    defaults = [tInteger; tDouble]
  }

  let modify (ce:classEnv) i c =
    { ce with classes = fun j -> if i = j then c else ce.classes j; }

  let _ =
    let b = modify initialEnv ""ABC"" ([""A""],[[] ==> IsIn(""Ord"",tUnit)]) in
    ()

  let super (ce:classEnv) i = fst (ce.classes i)

  let _ =
    let b = modify initialEnv ""ABC"" ([""A""],[[] ==> IsIn(""Ord"",tUnit)]) in
    let s = super b ""ABC"" in
    ()

  let insts (ce:classEnv) i = snd (ce.classes i)

  let _ =
    let b = modify initialEnv ""ABC"" ([""A""],[[] ==> IsIn(""Ord"",tUnit)]) in
    let s = insts b ""ABC"" in
    ()

  let defined (ce:classEnv) i =
    try
      ignore (ce.classes i);
      true
    with Not_found -> false

  let _ =
    let b = modify initialEnv ""ABC"" ([""A""],[[] ==> IsIn(""Ord"",tUnit)]) in
    let s = defined b ""ABC"" in
    ()

  type envTransformer = classEnv -> classEnv

  let addClass i is : envTransformer =
    fun (ce:classEnv) ->
      if defined ce i then failwith ""class already defined""
      else if exists (fun i -> not (defined ce i)) is then
        failwith ""superclass not defined""
      else modify ce i (is, [])

  let _ =
    let c1 :envTransformer = addClass ""Eq"" [] in
    let c1s = c1 initialEnv in
    ()

  let (<:>) (f : envTransformer) (g : envTransformer) : envTransformer =
    fun (ce:classEnv) -> g (f ce)

  let _ =
    let c1 :envTransformer = addClass ""Eq"" [] in
    let c2 :envTransformer = addClass ""Eq2"" [] in
    let c3 :envTransformer = c1 <:> c2 in
    let c4 :envTransformer = addClass ""Eq"" [] <:> addClass ""Eq2"" [] in
    ()

  let addCoreClasses :envTransformer =
    addClass ""Eq"" [] (* Eqは == /=で同値判定できる *)
    <:> addClass ""Ord"" [""Eq""] (* Ord は比較出来るクラスで、Eqを継承し < > <= >= *)
    <:> addClass ""Show"" [] (* Show 文字列化できる *)
    <:> addClass ""Read"" [] 
    <:> addClass ""Bounded"" []
    <:> addClass ""Enum"" []
    <:> addClass ""Functor"" []
    <:> addClass ""Monad"" []

  let addNumClasses :envTransformer =
    addClass ""Num"" [""Eq""; ""Show""] (* Numは数字で、同値判定出来て、表示出来る *)
    <:> addClass ""Real"" [""Num""; ""Ord""] (* Realは数字で比較も出来る *)
    <:> addClass ""Fractional"" [""Num""] (* 大小関係はない *)
    <:> addClass ""Integral"" [""Real""; ""Enum""] (* 列挙可能 *)
    <:> addClass ""RealFrac"" [""Real""; ""Fractional""] (*大小関係ありのFractional*)
    <:> addClass ""Floating"" [""Fractional""] (* 大小関係はない *)
    <:> addClass ""RealFloat"" [""RealFrac""; ""Floating""] (* 大小関係がある *)

  let addPreludeClasses :envTransformer =
    addCoreClasses <:> addNumClasses

  let overlap (p:pred) (q:pred) : bool =
    try
      ignore (mguPred p q);
      true
    with _ -> false

  let _ =
    let pred1 = IsIn(""Ord"", tUnit) in
    let pred2 = IsIn(""Ord"", tChar) in
    Printf.printf ""overlap pred1 pred2 %b\n"" (overlap pred1 pred2);
    Printf.printf ""overlap pred1 pred1 %b\n"" (overlap pred1 pred1)

  let addInst ps (IsIn(i, _) as p) : envTransformer =
    fun (ce:classEnv) ->
      if not (defined ce i) then failwith ""no class for instance"";
      let its = insts ce i in
      let qs = map (fun (Qual(_, q)) -> q) its in
      if exists (overlap p) qs then failwith ""overlapping instance"";      
      let c = super ce i, Qual(ps, p) :: its in
      modify ce i c

  let exampleInsts : envTransformer =
    addPreludeClasses
    <:> addInst [] (IsIn(""Ord"", tUnit))
    <:> addInst [] (IsIn(""Ord"", tChar))
    <:> addInst [] (IsIn(""Ord"", tInt))
    <:> addInst [IsIn(""Ord"", TVar(Tyvar(""a"", Star)));
                 IsIn(""Ord"", TVar(Tyvar(""b"", Star)))]
                (IsIn(""Ord"", pair (TVar(Tyvar(""a"", Star)))
                                  (TVar(Tyvar(""b"", Star)))))

  (* 7.3 Entailment *)

  let rec bySuper (ce:classEnv) (IsIn(i, t) as p) =
    p :: concat (map (fun i' -> bySuper ce (IsIn(i', t))) (super ce i))

  let _ =
    let preds = bySuper (exampleInsts initialEnv) (IsIn(""Num"", TVar(Tyvar(""a"", Star)))) in
    Printf.printf ""ps = %s\n"" (ps preds)

  let byInst (ce:classEnv) (IsIn(i, t) as p) =
    let tryInst (Qual(ps, h)) =
      try
       let u = matchPred h p in
       Some (map (predApply u) ps)
      with _ -> None in
    let rec msum = function
      | [] -> None
      | None :: xs -> msum xs
      | x :: _ -> x in
    msum (map tryInst (insts ce i))

  let _ =
    let preds = byInst (exampleInsts initialEnv) (IsIn(""Num"", TVar(Tyvar(""a"", Star)))) in
    match preds with
    | Some(preds) -> Printf.printf ""ps = some(%s)\n"" (ps preds)
    | None -> Printf.printf ""ps = none\n""

  let rec entail (ce:classEnv) ps p =
    exists (mem p) (map (bySuper ce) ps) ||
    match byInst ce p with
    | None -> false
    | Some qs -> for_all (entail ce ps) qs

  let _ =
    let p = IsIn(""Num"", TVar(Tyvar(""a"", Star))) in
    let ps = [p] in
    let result = entail (exampleInsts initialEnv) ps p in
    Printf.printf ""result = %b\n"" result

  (* 7.4 Context Reduction *)

  let inHnf (p:pred):bool =
    match p with
    | IsIn(_, t) ->
      let rec hnf = function
        | TVar _ -> true
        | TCon _ -> false
        | TAp(t, _) -> hnf t
        | TGen _ -> failwith ""context reduction on generic variable""
      in
      hnf t

  let _ =
    let r = inHnf (IsIn(""Num"",TVar(Tyvar(""a"", Star)))) in
    Printf.printf ""inHnf %b\n"" r; (* true *)
    let r = inHnf (IsIn(""Num"",tInt)) in
    Printf.printf ""inHnf %b\n"" r (* false *)

  let rec toHnfs (ce:classEnv) ps = concat (map (toHnf ce) ps)
  and toHnf (ce:classEnv) p =
    if inHnf p then [p]
    else
      match byInst ce p with
      | None -> failwith ""context reduction""
      | Some ps -> toHnfs ce ps

  let _ =
    let preds = [IsIn(""Num"",TVar(Tyvar(""a"", Star)))] in
    let preds = toHnfs initialEnv preds in
    Printf.printf ""toHnf %s\n"" (ps preds)

  let _ =
    let pred = IsIn(""Num"",TVar(Tyvar(""a"", Star))) in
    let preds = toHnf initialEnv pred in
    Printf.printf ""toHnf %s\n"" (ps preds)

  let simplify (ce:classEnv) ps =
    let rec loop rs = function
      | [] -> rs
      | p :: ps ->
        if entail ce (rs @ ps) p then loop rs ps
        else loop (p :: rs) ps in
    loop [] ps

  let _ =
    let pred = IsIn(""Num"", TVar(Tyvar(""a"", Star))) in
    let preds = [pred] in
    let preds = simplify (exampleInsts initialEnv) preds in
    Printf.printf ""simplify = %s\n"" (ps preds)

  let reduce (ce:classEnv) ps =
    simplify ce (toHnfs ce ps)

  let _ =
    let pred = IsIn(""Num"", TVar(Tyvar(""a"", Star))) in
    let preds = [pred] in
    let preds = reduce (exampleInsts initialEnv) preds in
    Printf.printf ""reduce = %s\n"" (ps preds)

  let scEntail (ce:classEnv) ps p =
    exists (mem p) (map (bySuper ce) ps)

  let _ =
    let pred = IsIn(""Num"", TVar(Tyvar(""a"", Star))) in
    let preds = [pred] in
    let result = scEntail (exampleInsts initialEnv) preds pred in
    Printf.printf ""scEntail = %b\n"" result
end

open Kind
open Type
open Subst
open Pred
(* 7.1 Basic definitions *)
let _ =

  (* predTv *)

  (* predsTv *)

  (* qualTypeTv *)

  (* lift *)

  (* mguPred *)
  (* matchPred *)

  (* class_ = Id.id list * inst list *)

  ()
",ocaml
"open Quartic
open Base
open Js_of_ocaml

let draw_prime_graph cy parent (id_graph : Tree.id_graph) =
  let () = List.iter id_graph.nodes ~f:(fun id ->
    let rep_id = String.concat [(Int.to_string id); ""-rep""] |> Js.string in
    let node = object%js 
      val group = Js.string ""nodes""
      val data = object%js
        val label = Js.string """"
        val polarisation = true
        val id = rep_id
        val parent = parent
      end
    end
    in
    let added_node = cy##add (Js.Unsafe.coerce node) in
    let edge = object%js
      val data = object%js
        val source = rep_id
        val target = Int.to_string id |> Js.string
      end
    end
    in
    let added_edge = cy##add (Js.Unsafe.coerce edge) in
    let () = (Js.Unsafe.coerce added_edge)##addClass (Js.string ""compoundOut"") in
    (Js.Unsafe.coerce added_node)##addClass (Js.string ""inCompound""))
  in
  let () = List.iter id_graph.edges ~f:(fun (id1, id2) ->
    let edge = object%js
      val data = object%js
        val source = String.concat [(Int.to_string id1); ""-rep""] |> Js.string
        val target = String.concat [(Int.to_string id2); ""-rep""] |> Js.string
      end
    end
    in
    let added_edge = cy##add (Js.Unsafe.coerce edge) in
    (Js.Unsafe.coerce added_edge)##addClass (Js.string ""compoundIn""))
  in
  ()

let draw_before cy parent tl =
  let rep_id_list = List.map tl ~f:(fun t ->
    let id = Int.to_string t.Tree.id in
    let rep_id = String.concat [id; ""-rep""] |> Js.string in
    let node = object%js 
      val group = Js.string ""nodes""
      val data = object%js
        val label = Js.string """"
        val polarisation = true
        val id = rep_id
        val parent = parent
      end
    end
    in
    let added_node = cy##add (Js.Unsafe.coerce node) in
    let edge = object%js
      val data = object%js
        val source = rep_id
        val target = Js.string id
      end
    end
    in
    let added_edge = cy##add (Js.Unsafe.coerce edge) in
    let () = (Js.Unsafe.coerce added_edge)##addClass (Js.string ""compoundOut"") in
    let () = (Js.Unsafe.coerce added_node)##addClass (Js.string ""inCompound"") in
    rep_id)
  in

  let rec draw_inner il =
    match il with
    | [] -> ()
    | [_] -> ()
    | h1 :: h2 :: t ->
      let edge = object%js
        val data = object%js
          val source =  h2
          val target =  h1
        end
      end
      in
      let added_edge = cy##add (Js.Unsafe.coerce edge) in
      let () = (Js.Unsafe.coerce added_edge)##addClass (Js.string ""before"") in
      let () = if List.is_empty t then (cy##getElementById h2)##addClass (Js.string ""before-root"") in 
      draw_inner (h2 :: t)
  in
  draw_inner rep_id_list

let rec draw_tree cy (tree : Tree.tree) =
  let id = Int.to_string tree.id |> Js.string in
  let group = Js.string ""nodes"" in
  let label, polarisation, id_list, class_ =
    match tree.connective with
    | Atom atom -> Js.string atom.label, Js.bool atom.pol, None, ""atom""
    | Tensor tl ->
      let id_list = List.map tl ~f:(draw_tree cy) in
      Js.string ""⊗"", Js.bool true, Some id_list, ""tensor""
    | Par tl ->
      let id_list = List.map tl ~f:(draw_tree cy) in
      Js.string ""⅋"", Js.bool true, Some id_list, ""par""
    | Before tl ->
      let id_list = List.map tl ~f:(draw_tree cy) in
      Js.string """", Js.bool true, Some id_list, ""before""
    | Prime (_, tl) ->
      let id_list = List.map tl ~f:(draw_tree cy) in
      Js.string """", Js.bool true, Some id_list, ""prime""
  in
  let node = object%js
    val group = group
    val data = object%js
      val id = id
      val label = label
      val polarisation = polarisation
    end
  end
  in
  let added = cy##add (Js.Unsafe.coerce node) in
  let () = (Js.Unsafe.coerce added)##addClass (Js.string class_) in
  let () = 
    match id_list with
    | None -> ()
    | Some ids ->
      match tree.connective with
      | Prime (id_graph,_) -> draw_prime_graph (Js.Unsafe.coerce cy) id id_graph 
      | Before tl -> draw_before (Js.Unsafe.coerce cy) id tl
      | _ ->
        List.iter ids ~f:(fun target_id ->
          let edge = object%js 
            val data = object%js
              val source = id
              val target = target_id
            end
          end
          in
          let _ = cy##add (Js.Unsafe.coerce edge) in ())
  in    
  (Int.to_string tree.id) |> Js.string

let draw_graph ?directed cy (graph : Graph.graph) =
  Set.iter graph.nodes ~f:(fun v ->
    match v.connective with
    | Atom atom -> 
      let node = object%js
        val group = Js.string ""nodes""
        val data = object%js
          val id = Int.to_string v.id |> Js.string
          val label = Js.string atom.label
          val polarisation = Js.bool atom.pol
        end
      end
      in
      cy##add node 
    | _ -> ());
  let edge_list = Graph.edge_tuple_list ?directed:directed graph.edges in
  List.iter edge_list ~f:(fun (src, trgt) ->
    let edge = object%js
      val group = Js.string ""edges""
      val data = object%js
        val source = Int.to_string src.id |> Js.string
        val target = Int.to_string trgt.id |> Js.string
      end
    end
    in
    (Js.Unsafe.coerce cy)##add edge)",ocaml
"open Utils

external addClass : Dom.domTokenList -> string -> unit = ""add"" [@@bs.send]
external addEventListener : Dom.element -> string -> (unit -> unit) -> unit = ""addEventListener"" [@@bs.send]
external appendChild : Dom.element -> Dom.element -> unit = ""appendChild"" [@@bs.send]
external createElement : string -> Dom.element = ""createElement"" [@@bs.val][@@bs.scope ""document""]
external getClassList : Dom.element -> Dom.domTokenList = ""classList"" [@@bs.get]
external getFirstChild : Dom.element -> Dom.element Js.null = ""firstChild"" [@@bs.get]
external getStyles : Dom.element -> Dom.cssStyleDeclaration = ""style"" [@@bs.get]
external getValue : Dom.element -> string = ""value"" [@@bs.get]
external normalize : string -> string -> string = ""normalize"" [@@bs.send]
external querySelector : string -> Dom.element option = ""querySelector"" [@@bs.val][@@bs.scope ""document""][@@bs.return nullable]
external removeChild : Dom.element -> Dom.element -> unit = ""removeChild"" [@@bs.send]
external setStyle : Dom.cssStyleDeclaration -> string -> string -> unit = """" [@@bs.set_index]
external setTextContent : Dom.element -> string -> unit = ""textContent"" [@@bs.set]
external setTitle : Dom.element -> string -> unit = ""title"" [@@bs.set]
external toLowerCase : string -> string = ""toLowerCase"" [@@bs.send]

type layout = Horz | Vert
let string_of_layout = function
  | Horz -> ""horz""
  | Vert -> ""vert""

type color = string
type flex = bool
type size = float
type width = float
type help = string

type component
  = BorderBox of color * width * component
  | Box of layout * flex * component list
  | HelpText of color * size * string * help
  | Space of float
  | Text of color * size * string



let rec draw : component -> Dom.element = function
  | BorderBox(color, width, c) ->
      let ele = createElement ""div"" in
      let sty = getStyles ele in
      setStyle sty ""border-color"" color;
      setStyle sty ""border-style"" ""solid"";
      setStyle sty ""border-width"" (Js.Float.toString width ^ ""px"");
      appendChild ele (draw c);
      ele
  | Box(layout, flex, cs) ->
      let ele = createElement ""div"" in
      if flex then
        addClass (getClassList ele) ""flex"";
      addClass (getClassList ele) ""box"";
      addClass (getClassList ele) (string_of_layout layout);
      List.iter (appendChild ele % draw) cs;
      ele
  | HelpText(color, size, text, altText) ->
      let ele = createElement ""span"" in
      addClass (getClassList ele) ""help"";
      let sty = getStyles ele in
      setStyle sty ""color"" color;
      setStyle sty ""font-size"" (Js.Float.toString size ^ ""em"");
      setTextContent ele text;
      setTitle ele altText;
      ele
  | Space(size) ->
      let ele = createElement ""span"" in
      setStyle (getStyles ele) ""font-size"" (Js.Float.toString size ^ ""em"");
      setTextContent ele ""\xa0"";
      ele
  | Text(color, size, text) ->
      let ele = createElement ""span"" in
      let sty = getStyles ele in
      setStyle sty ""color"" color;
      setStyle sty ""font-size"" (Js.Float.toString size ^ ""em"");
      setTextContent ele text;
      ele

let rec removeAllChildren (ele: Dom.element) : unit =
  match Js.nullToOption (getFirstChild ele) with
  | Some child -> removeChild ele child; removeAllChildren ele
  | None -> ()

let update (c: component) (ui: Dom.element) =
  let c' = draw c in
  removeAllChildren ui;
  appendChild ui c'



let error (s: string) : component = Text(""#ff0000"", 2.0, s)

let ui_func : (Theme.t -> string -> component) ref =
  ref (fun _ _ -> error ""No ui_func set!"")

let set_func (f: Theme.t -> string -> component) : unit =
  ui_func := f

let theme : Theme.t ref = ref Theme.default

let set_theme (t: Theme.t) : unit =
  theme := t

let () =
  match querySelector ""#ui"" with
  | Some ui ->
    begin
      match querySelector ""#text"" with
      | Some ele -> addEventListener ele ""change"" (fun () ->
          let c = try
            (!ui_func) (!theme) (normalize (toLowerCase (getValue ele)) ""NFC"")
          with
            | Failure(s) -> error s
            | Js.Exn.Error e ->
              let msg = match Js.Exn.message e with
              | Some message -> error message
              | None -> error ""An unknown error occurred""
              in begin
                match Js.Exn.stack e with
                | Some stack -> Box(Vert, true, [msg; error stack])
                | None -> msg
              end
            | exc -> error (Printexc.to_string exc)
          in update c ui)
      | None -> failwith ""No #text element!""
    end
  | None -> failwith ""No #ui element!""
",ocaml
"(* Options and arguments parsing *)

open Arg

(* Todo : find a proper place to put the file *)
let _index_file_path = ref ((Sys.getcwd ())^""/opam-doc.idx"")
let _default_index_name = ref ""index.html""
let _filter_pervasives = ref false
let _clear_index = ref false
let _always_proceed = ref false
let _package_descr = ref """"
let _current_package = ref ""test""
let _base_uri = ref ""/""
let _summary = ref None

let index_file_path () = !_index_file_path
let default_index_name () = !_default_index_name
let filter_pervasives () = !_filter_pervasives
let clear_index () = !_clear_index
let always_proceed () = !_always_proceed
let package_descr () = !_package_descr
let current_package () = !_current_package
let base_uri () = !_base_uri
let summary () = !_summary

let set_current_package p = _current_package := p
let set_summary s = _summary := Some s

let options  = 
  [ (""--package"", Set_string _current_package, ""Specify the package"")
  ; (""-p"", Set_string _current_package, ""Specify the package"")
  ; (""--package-description"", Set_string _package_descr, ""Add a description to the package"")
  ; (""-descr"", Set_string _package_descr, ""Add a description to the package"")
  ; (""--base"", Set_string _base_uri, ""Specify the base url"")
  ; (""--summary"", String set_summary, ""Specify the summary page"")
  ; (""-index"", Set_string _index_file_path, ""Use a specific index file to use rather than the default one"")
  ; (""--filter-pervasives"", Set _filter_pervasives, ""Remove the 'Pervasives' label to Pervasives' references"")
  ; (""--clear-index"", Set _clear_index, ""Clear the global index before processing"")
  ; (""-y"", Set _always_proceed, ""Answer yes to all questions prompted"")
  ]

let usage = ""Usage: opam-doc [--package 'package_name'] <cm[dt] files>""


(* Html config *)

let doctype = ""<!DOCTYPE HTML>\n""
let character_encoding =
  <:html<<meta content=""text/html; charset=iso-8859-1"" http-equiv=""Content-Type"" />&>>

let default_stylesheet_css =
  let open Cow in
  <:css<

  .footer {
    color: #555555;
    border-top: 1px solid #eeeeee;
    font-size: 0.8rem;
    font-style: italic;
    padding-top: 0.4rem;
    margin-top: 1rem;
  }

  table.typetable { background: none; border: none; }
  table.typetable thead,
  table.typetable tfoot {
    background: none; font-weight: bold; }
  table.typetable thead tr th,
  table.typetable thead tr td,
  table.typetable tfoot tr th,
  table.typetable tfoot tr td {
    font-size: 1rem;
    color: #222222;
    text-align: left; }
  table.typetable tr th,
  table.typetable tr td {
    padding: 0px;
    font-size: 1rem;
    color: #222222; }
  table.typetable tr.even, table.typetable tr.alt, table.typetable tr:nth-of-type(even) {
    background: none; }
  table.typetable thead tr th,
  table.typetable tfoot tr th,
  table.typetable tbody tr td,
  table.typetable tr td,
  table.typetable tfoot tr td {
    display: table-cell;
  } 

  table.indextable { background: white; border: none; }
  table.indextable thead,
  table.indextable tfoot {
    background: white; font-weight: bold; }
  table.indextable thead tr th,
  table.indextable thead tr td,
  table.indextable tfoot tr th,
  table.indextable tfoot tr td {
    font-size: 1rem;
    color: #222222;
    text-align: left; }
  table.indextable tr th,
  table.indextable tr td {
    padding: 0.2625rem 0.225rem;
    font-size: 1rem;
    color: black; }
  table.indextable tr.even, table.indextable tr.alt, table.indextable tr:nth-of-type(even) {
    background: whitegrey; }
  table.indextable thead tr th,
  table.indextable tfoot tr th,
  table.indextable tbody tr td,
  table.indextable tr td,
  table.indextable tfoot tr td {
    display: table-cell;
  } 

  #opamdocroot .panel.callout { 
    padding: 0.5rem;
    background: #fdfdfd;
    border: none;
  }

  p { line-height: 1.1rem; margin-bottom: 0.8rem; }
  body { 
    font-family: 'Source Sans Pro', sans-serif;
    color: black;
  }
  #opamdocroot h1 {
    font-family: ""Source Sans Pro"", sans-serif;
    font-weight: bold;
    font-size: 1.6rem;
  }
  #opamdocroot h2 {
    font-family: ""Source Sans Pro"", sans-serif;
    font-weight: bold;
    font-size: 1.4rem;
  }
  #opamdocroot h3 {
    font-family: ""Source Sans Pro"", sans-serif;
    font-weight: bold;
    font-size: 1.2rem;
  }
  #opamdocroot h4 {
    font-family: ""Source Sans Pro"", sans-serif;
    font-weight: bold;
    font-size: 1.2em;
  }
  #opamdocroot h5 {
    font-family: ""Source Sans Pro"", sans-serif;
    font-weight: bold;
    font-size: 1.2rem;
  }
  #opamdocroot h6 {
    font-family: ""Source Sans Pro"", sans-serif;
    font-weight: bold;
    font-size: 1.2rem;
  }

  pre.odoccode {
    background: #eeeeee;
    border-top: 1px solid #cccccc;
    padding: 5px;
    margin-top: 10px;
  }
  .top-bar input { height: 2.1em; }
  .keyword { color: #f47421; font-weight: bold; }
  .keywordsign { color: #f47421; }
  .superscript { font-size: 4; }
  .subscript { font-size: 4; }
  .comment { color: #747474; font-style: italic; }
  .constructor { color: #15c17a; }
  .type { color: #c746cc; }
  .string { color: #09a7e2; }
  .warning { color: Red ; font-weight: bold; }
  .param_info { margin-top: 4px; margin-left: 3em; margin-right: 3em; }
  .code { color: #465F91 ; }
  .typetable { border-style: hidden; }
  .paramstable { border-style: hidden ; padding: 5pt 5pt; }
   td.typefieldcomment { font-size: smaller ;}
   div.sig_block {margin-left: 2em; }
   *:target { background: yellow; }

  pre { font-family: monospace; margin-bottom: 0.8rem; }
  #opamdocroot pre {
    white-space: pre-wrap;       /* css-3 */
    white-space: -moz-pre-wrap;  /* Mozilla, since 1999 */
    white-space: -pre-wrap;      /* Opera 4-6 */
    white-space: -o-pre-wrap;    /* Opera 7 */
    word-wrap: break-word;       /* Internet Explorer 5.5+ */
    font-weight: normal;
    color: #333333;
    font-family: monospace;
  }

  #opamdocroot code {
    font-weight: normal;
    color: #333333;
    font-family: monospace;
  }

  .deprecated {color: #888; font-style: italic; }

  ul.indexlist { margin-left: 0; padding-left: 0; }
  ul.indexlist li { list-style-type: none ; margin-left: 0; padding-left: 0; }

  .ocaml_expanded_include_0 { background-color: #FFF0F0; border-width: thin; border-style: solid; border-color: #E5E0E0;}
  .ocaml_expanded_include_1 { background-color: #F0F0FF; border-width: thin; border-style: solid; border-color: #E0E0E5;}
  .ocaml_expanded_include_2 { background-color: #F0FFF0; border-width: thin; border-style: solid; border-color: #E0E5E0;}
  .ocaml_expanded_include_3 { background-color: #FFF0FF; border-width: thin; border-style: solid; border-color: #E5E0E5;}
  .ocaml_expanded_include_4 { background-color: #FFFFF0; border-width: thin; border-style: solid; border-color: #E5E5E0;}
  .ocaml_expanded_include_5 { background-color: #F0FFFF; border-width: thin; border-style: solid; border-color: #E0E5E5;}
  .ocaml_expanded_include_6 { background-color: #F0F5F0; border-width: thin; border-style: solid; border-color: #E5E0E0;}
  pre.ocaml_include_handle { display: inline; }

  .ocaml_expander_plus {
     position: relative;
     float: left;
     width: 7px;
     height: 7px;
     background: silver;
     border-style: solid;
     border-width: 1px;
     margin: 3px;
  }
  .ocaml_expander_plus::before {
     content: '';
     position: absolute;
     left: 3px;
     top: 1px;
     width: 1px;
     height: 5px;
     background: black;
  }
  .ocaml_expander_plus::after {
     content: '';
     position: absolute;
     left: 1px;
     top: 3px;
     width: 5px;
     height: 1px;
     background: black;
  }
  .ocaml_expander_minus {
     position: relative;
     float: left;
     width: 7px;
     height: 7px;
     background: silver;
     border-style: solid;
     border-width: 1px;
     margin: 3px;
  }
  .ocaml_expander_minus:hover {
     background: grey;
  }
  .ocaml_expander_minus::after {
     content: '';
     position: absolute;
     left: 1px;
     top: 3px;
     width: 5px;
     height: 1px;
     background: black;
  }
  .ocaml_expander_disabled {
     position: relative;
     float: left;
     width: 7px;
     height: 7px;
     background: silver;
     border-style: solid;
     border-color: grey;
     border-width: 1px;
     margin: 3px;
  }
  .ocaml_expander_disabled::before {
     content: '';
     position: absolute;
     left: 3px;
     top: 1px;
     width: 1px;
     height: 5px;
     background: grey;
  }
  .ocaml_expander_disabled::after {
     content: '';
     position: absolute;
     left: 1px;
     top: 3px;
     width: 5px;
     height: 1px;
     background: grey;
  }
   >>
let default_stylesheet = Cow.Css.to_string default_stylesheet_css

(** Marks used to generate id attributes *)
type mark = Attribute | Type | Type_elt | Function | Exception | Value | Method | Title

let jquery_online_url = ""http://ajax.googleapis.com/ajax/libs/jquery/1.10.1/jquery.min.js""

let style_filename = ""style.css""

let style_url () = base_uri () ^ ""/"" ^ style_filename

let style_tag () =
  <:html<<link rel=""stylesheet"" href=""$str:style_url ()$"" type=""text/css"" />&>>

(* Config script *)

let config_tag () = 
  <:html<<script type=""text/javascript"">
var ocaml_package = '$str:current_package ()$'
var ocaml_base = '$str:base_uri ()$'
</script>&>>

(* Ajax loading *)

let script_filename = ""doc_loader.js""

let script_url () = base_uri () ^ ""/"" ^ script_filename

let script_tag () =
  <:html<<script type=""text/javascript"" src=""$str:jquery_online_url$""> </script>
<script type=""text/javascript"" src=""$str:script_url ()$""> </script>&>>

let default_script = 
""var opamdoc_contents = '#opamdocroot'

// utility - Fetch HTML from URL using ajax
function ajax(url, cont){
    console.log('AJAX request : ' + url);
    $.ajax({
        type: 'GET',
        url:url,
        async:true,
        dataType: 'html'
    }).done(function(data){
        cont($(data));
    }).fail(function(){
        console.log('AJAX request failed : ' + url);
    });
}

function isLIdent(ident) {
    var chr = ident.charAt(0);
    return (chr !== chr.toUpperCase()
            && chr === chr.toLowerCase())
}

var url_regexp = /^(.*)\/([^/]*)\/(?:#(.*))?$/

function Path(url){

    this.package = null;
    this.module = null;
    this.subnames = [];
    this.subkinds = [];

    var match = url_regexp.exec(url);

    var base = match[1];
    var package = match[2];
    var hash = match[3];

    if(base === ocaml_base) {

      this.package = package;

      if(typeof hash !== 'undefined' && hash !== '') {
          var modstring = hash;
          var names = [];
          var kinds = [];
          var done = false;
          var sep = '.'
          var i = 0;
          while(!done) {
              var dot_index = modstring.indexOf('.');
              var colon_index = modstring.indexOf(':');
              if(dot_index > 0 && (dot_index < colon_index || colon_index < 0)) {
                  names[i] = modstring.substring(0, dot_index);
                  if(sep === ':') {
                    kinds[i] = 'modtype';
                  } else if(isLIdent(names[i])) {
                    kinds[i] = 'class';
                  } else {
                    kinds[i] = 'module';
                  }
                  sep = '.';
                  modstring = modstring.substring(dot_index + 1);
              } else if(colon_index > -1) {
                  names[i] = modstring.substring(0, colon_index);
                  if(sep === ':') {
                    kinds[i] = 'modtype';
                  } else if(isLIdent(names[i])) {
                    kinds[i] = 'class';
                  } else {
                    kinds[i] = 'module';
                  }
                  sep = ':';
                  modstring = modstring.substring(colon_index + 1);
              } else {
                  names[i] = modstring;
                  if(sep === ':') {
                    kinds[i] = 'modtype';
                  } else if(isLIdent(names[i])) {
                    kinds[i] = 'class';
                  } else {
                    kinds[i] = 'module';
                  }
                  done = true;
              }
              i++;
          }
          this.module = names[0];
          if(names.length > 1) {
              this.subnames = names.splice(1);
              this.subkinds = kinds.splice(1);
          }
      }
  }
}

Path.prototype.name = function () {
    var name = null;
    if(this.package !== null) {
        name = this.package;
        if(this.module !== null) {
            name = this.module;
            if(this.subnames.length > 0){
                name += '.' + this.subnames.join('.');
            } 
        }
    }        
    return name;
}

Path.prototype.url = function () { 
    var url = null;
    if(this.package !== null) {
        url = ocaml_base + '/' + this.package;
        if(this.module !== null) {
            url += '/#' + this.module;
            for(var i = 0; i < this.subnames.length; i++) {
                if(this.subkinds[i] === 'modtype') {
                    url += ':' + this.subnames[i];
                } else {
                    url += '.' + this.subnames[i];
                }
            } 
        }
    }        
    return url;
}

function Copy(path) {
    this.package = path.package;
    this.module = path.module;
    this.subnames = path.subnames.slice(0);
    this.subkinds = path.subkinds.slice(0);
}

Copy.prototype = Path.prototype

Path.prototype.copy = function () { return new Copy(this) }

Path.prototype.extend = function (name, kind) { 
    this.subnames[this.subnames.length] = name;
    this.subkinds[this.subkinds.length] = kind;
}

Path.prototype.substitute = function (from, to) {
    if(this.package === from.package) {
        if(this.module === from.module) {
            if(this.subnames.length > from.subnames.length) {
                var equal = true;
                for(var i = 0; i < from.subnames.length; i++) {
                    if(from.subnames[i] !== this.subnames[i]) {
                        equal = false;
                    } else if(from.subkinds[i] !== this.subkinds[i]) {
                        equal = false;
                    }
                }
                if(equal) {
                    this.package = to.package;
                    this.module = to.module;
                    var subnames = to.subnames.slice(0);
                    var subkinds = to.subkinds.slice(0);
                    for(var i = from.subnames.length; i < this.subnames.length; i++) {
                        subnames[subnames.length] = this.subnames[i];
                        subkinds[subkinds.length] = this.subkinds[i];
                    }
                    this.subnames = subnames;
                    this.subkinds = subkinds;
                    return true;
                }
            }
        }
    }
    return false;
}

function Parent(path) {
    this.package = null;
    this.module = null;
    this.subnames = [];
    this.subkinds = [];

    if(path.package !== null) {
        if(path.module !== null) {
            this.package = path.package;
            if(path.subnames.length > 0) {
                this.module = path.module;
                this.subnames = path.subnames.slice(0, -1);
                this.subkinds = path.subkinds.slice(0, -1);
            }
        } 
    }
}

Parent.prototype = Path.prototype

Path.prototype.parent = function () { return new Parent(this) }

function PathVisitor(path) {
    this.path = path;
    this.subnames = path.subnames.slice(0);
    this.subkinds = path.subkinds.slice(0);
}

PathVisitor.prototype.current = function (){
    if(this.subnames.length > 0) {
        return {kind: this.subkinds[0], name: this.subnames[0]};
    } else {
        return null;
    }
}

PathVisitor.prototype.next = function (){
    if(this.subnames.length > 0) {
        this.subnames.shift();
        this.subkinds.shift();
    }
    return this;
}

PathVisitor.prototype.concat = function(pv){
    this.subnames = this.subnames.concat(pv.subnames);
    this.subkinds = this.subkinds.concat(pv.subkinds);
    this.path.subnames = this.path.subnames.concat(pv.subnames);
    this.path.subkinds = this.path.subkinds.concat(pv.subkinds);

    return this;
}


function Page(path, kind){
    this.path = path;
    this.kind = kind;
    this.alias = null;
    this.summary = null;
    this.body = null;
    this.constraints = null;
    this.typ = null;
}

Page.prototype.parent_link = function() {
    var parent = this.path.parent();
    var title = parent.name();
    var url = parent.url();
    if (title === null || url === null) {
        title = this.path.name();
        url = ocaml_base + '/';
        $('#bccurpkg').attr('class','current').html(this.path.name());
        $('#bccurpkgmod').attr('class','hide');
    } else {
        $('#bccurpkg').attr('class','').html(
          $('<a>', {title: title, href: url, text: title }));
        $('#bccurpkg').attr('class','');
        $('#bccurpkgmod').attr('class','current');
        $('#bccurpkgmod').html(this.path.name ());
    }
}

Page.prototype.title = function(){
    var name = this.path.name();
    if(this.kind === 'module') {
        fullName = 'Module ' + name;
    } else if(this.kind === 'modtype') {
        fullName = 'Module type ' + name;
    } else if(this.kind === 'class') {
        fullName = 'Class ' + name;
    } else {
        fullName = 'Package ' + name;
    }

    var alias = null;
    var sep = '';
    if(this.alias !== null) {
        if(this.path.modtype !== null) {
          sep = ' = ';
        } else {
          sep = ' : ';
        }
        alias = $('<a>', 
                  {href    : this.alias.url(),
                   text    : this.alias.name()});
    }
     
    return $('<h1>')
        .addClass('ocaml_title')
        .append(fullName + sep)
        .append(alias);
}

function display_page(page){
    page.parent_link();
    var title = page.title();
    var summary = page.summary;
    var head = $('<div>')
        .addClass('panel')
        .addClass('callout')
        .append(title)
        .append(summary);
    var rule = $('<hr/>').attr('width','100%');
    var body = $('<div>')
        .addClass('column')
        .addClass('small-12')
        .addClass('medium-11')
        .addClass('large-9')
        .addClass('ocaml_body')
        .append(page.body);

    var content = $('<div>')
        .addClass('ocaml_page')
        .append(head)
        .append(body);

    $(opamdoc_contents).html(content);
}

function show_type(typ) {
    if(typ !== null) {
        var types = $('pre > span.TYPE'+typ).filter(':visible');
        if (types.length == 0){
            types = $('pre > code > span.TYPE'+typ).filter(':visible');;
        }
        if (types.length > 0) {
            var pos = types.position().top - (window.innerHeight / 5);
            if(pos < 0) {
                pos = 0;
            }
            window.scrollTo(0, pos);
            types.css('background', 'yellow');
        }
    }
}

function load_page(page, pv, input, cont) {

    var current = pv.current();
    var data = $('> div.ocaml_content', input);

    if(current === null) {
        page.summary = $('> div.ocaml_summary', input);
        page.body = data;
        if(page.path !== pv.path) {
            page.alias = pv.path
        }
        cont(page);
    } else {

        var kind = current.kind;
        var name = current.name;

        var query = '> div.ocaml_' + kind + '[name=' + name + ']'
        var subdata = $(query, data)

        if(subdata.length === 0) {

            var try_type = (kind === 'class');

            var includes = $('> div.ocaml_include', data);

            for (var i = 0; i < includes.length; i++){

                var items = JSON.parse($(includes[i]).attr('items'));

                if (items.indexOf(name) !== -1){
                    try_type = false;

                    var pathAttr = $(includes[i]).attr('path');

                    if (typeof pathAttr === 'undefined'){
                        load_page(page, pv, includes[i], cont);
                    } else {
                        var include_path = new Path(pathAttr);
                        var include_pv = new PathVisitor(include_path);

                        var include_url = ocaml_base + '/' + include_path.package + '/' + include_path.module +'.html'
                        
                        ajax(include_url, function(data){
                            load_page(page, include_pv.concat(pv), data, cont);
                        });
                    }
                }
            }

            if(try_type) {
                var types = $('pre > span.TYPE'+name, data);
                if (types.length == 0){
                    types = $('pre > code > span.TYPE'+name, data);
                }
                if (types.length > 0){
                    page.summary = $('> div.ocaml_summary', input);
                    page.body = data;
                    page.typ = name;
                    if(page.path !== pv.path) {
                        page.alias = pv.path.parent();
                    }
                    page.path = page.path.parent();
                    cont(page);
                } else {
                    for (var i = 0; i < includes.length; i++){
                        var items = JSON.parse($(includes[i]).attr('types'));
                        if (items.indexOf(name) !== -1){
                            page.summary = $('> div.ocaml_summary', input);
                            page.body = data;
                            page.typ = name;
                            if(page.path !== pv.path) {
                                page.alias = pv.path.parent();
                            }
                            page.path = page.path.parent();
                            cont(page);
                        }
                    }
                }
            }

        } else {
            page.kind = kind;

            var pathAttr = subdata.attr('path');

            if (typeof pathAttr === 'undefined'){
                load_page(page, pv.next(), subdata, cont);
            } else {
               
                var alias_path = new Path(pathAttr);
                var alias_pv = new PathVisitor(alias_path);

                var alias_url = ocaml_base + '/' + alias_path.package + '/' + alias_path.module +'.html'

                ajax(alias_url, function(data){
                    load_page(page, alias_pv.concat(pv.next()), data, cont);
                });
            }
        }
    }
}

function load_path(path, cont) {
    if(path.module !== null) {
        var url = ocaml_base + '/' + path.package + '/' + path.module + '.html';
        ajax(url, function(data){
            var pg = new Page(path, 'module');
            var pv = new PathVisitor(path);
            
            load_page(pg, pv, data, cont);
        });
    } else {
        var url = ocaml_base + '/' + path.package + '/summary.html';
        ajax(url, function(data){
            var pg = new Page(path, 'package');
            pg.body = data;
            cont(pg);
        });
    }
}

function Group(parent, node) {
    if(typeof parent !== 'undefined' && typeof node !== 'undefined'){
        this.typ = null;
        if(parent !== null) {
            this.depth = parent.depth + 1;
            this.icount = parent.icount;
            this.auto_expand = parent.auto_expand;
            this.filters = parent.filters;
            this.current = parent.current;
            this.decorate = parent.decorate_children;
            this.decorate_children = parent.decorate_children;
        } else {
            this.depth = 0;
            this.icount = 6;
            this.auto_expand = true;
            this.filters = [];
            this.current = null;
            this.decorate = true;
            this.decorate_children = true;
        }
        this.expanded = this.auto_expand;
        this.loading = false;
        if(node !== null) {
            this.node = node;
            this.content = null;
            var pathAttr = this.node.attr('path');
            if(typeof pathAttr !== 'undefined') {
                this.path = new Path(pathAttr);
            } else {
                this.path = null;
            }
            this.handle = this.node.children();
        } else {
            this.node = null;
            this.content = null;
            this.path = null;
            this.handle = null;
        }
    }
}

Group.prototype.load_content = function(data){
    this.update_links(data);
    this.load_children(data);
    this.content = data;
}

Group.prototype.add_filter = function(from, to){
    this.filters = this.filters.slice(0);
    this.filters[this.filters.length] = { from: from, to: to };
}

Group.prototype.show_unexpanded = function(){ }

Group.prototype.show_expanded = function(){ }

Group.prototype.show_disabled = function(){ }

Group.prototype.expand = function(expand){
    if(typeof expand === 'undefined') {
        expand = ! this.expanded;
    }
    if(expand) {
        if(this.content === null) {
            if(! this.loading) {
                this.loading = true;
                var self = this;
                var load = function(page){
                    if(page.alias !== null) {
                        self.add_filter(page.alias, self.current);
                    } else {
                        self.add_filter(page.path, self.current);
                    }
                    self.load_content(page.body);
                    self.show_expanded(true);
                };
                load_path(this.path, load);
            }
        } else {
            this.show_expanded(true);
        }
    } else {
        this.show_unexpanded(true);
    }
}

Group.prototype.show = function(){
    if(this.content === null && this.path === null) {
        this.show_disabled();
    } else {
        if(this.auto_expand) {
            if(this.content === null) {
                this.loading = true;
                this.show_unexpanded(false);
                var self = this;
                var load = function(page){
                    if(page.alias !== null) {
                        self.add_filter(page.alias, self.current);
                    } else {
                        self.add_filter(page.path, self.current);
                    }
                    self.load_content(page.body);
                    self.show_expanded(false);
                    show_type(self.typ)
                };
                load_path(this.path, load);
            } else {
                this.show_expanded(false);
            }
        } else {
            this.show_unexpanded(false);
        }
    }
}

Group.prototype.update_links = function(data) {
    var links = $('a.ocaml_internal', data);
    var filters = this.filters;
    links.each(function(){
        var url = $(this).attr('href');
        var path = new Path(url);
        var changed = false;
        for(var i = 0; i < filters.length; i++) {
            if(path.substitute(filters[i].from, filters[i].to)) {
                changed = true;
                break;
            }
        }
        if(changed) {
            $(this).attr('href', path.url())
        }
    });
}

function IncludeGroup(parent, node, label, idx) {
    Group.call(this, parent, node);
    this.icount = (parent.icount + idx + 2) % 7;
    if(this.icount === parent.icount) {
        this.icount = (this.icount + 4) % 7;
    }
    if(this.depth > 4) {
        this.auto_expand = false;
    }
    this.typ = parent.typ;
    var typesAttr = JSON.parse(this.node.attr('types'));
    if (typesAttr.indexOf(this.typ) !== -1){
        this.auto_expand = true;
    }
    this.button = null;
    this.block = null;
    this.inner_block = null;
    this.summary = null;
    this.content_added = false;
    var indent = 250 - (10 * this.depth);
    var indent = 0; /* TODO anil */
    this.pindent = '+=' + indent.toString() + 'px';
    this.nindent = '-=' + indent.toString() + 'px';
    var exdent = 40 - (2 * this.depth);
    this.pexdent = '+=' + exdent.toString() + 'px';
    this.nexdent = '-=' + exdent.toString() + 'px';
}

IncludeGroup.prototype = new Group();

IncludeGroup.prototype.prepare = function(){
    if(this.decorate) {
        if(this.button === null) {
            this.button = $('<div>').addClass('ocaml_expander_plus');
            var self = this;
            this.button.click(function () { self.expand() });
        }
        if(this.block === null) {
            this.summary = this.handle.filter('div.ocaml_summary');
            this.handle = $('<div>')
                             .append(this.button)
                             .append(this.handle);
            this.inner_block = $('<div>')
                             .addClass('ocaml_expanded_include_' + this.icount)
                             .css('display', 'inline-block')
                             .css('padding-top', '3px')
                             .css('padding-right', '3px')
                             .css('padding-bottom', '3px')
                             .append(this.handle);
            this.block = $('<div>').append(this.inner_block);
            this.node.append(this.block);
        }
        if(!this.content_added && this.content !== null) {
            this.inner_block.append(this.content);
            this.content_added = true;
        }
    }
}

IncludeGroup.prototype.show_unexpanded = function(animate){
    this.prepare();
    if(this.button !== null) {
        this.button.removeClass('ocaml_expander_minus');
        this.button.addClass('ocaml_expander_plus');
    }
    if(animate) {
        if(this.content !== null) {
            this.content.hide({duration: 'fast', queue: false});
            if(this.decorate) {
                this.summary.show({duration: 'fast', queue: false});
                this.block.animate({marginLeft: '0', marginRight: '0'}, {duration: 'fast', queue: false});
                this.inner_block.animate({minWidth: '0'}, {duration: 'fast', queue: false});
                this.content.animate({marginLeft: '0', marginRight: '0'}, {duration: 'fast', queue: false});
                //this.handle.animate({fontSize : '13px'}, {duration: 'fast', queue: false});
            }
        }
    } else {
        if(this.content !== null) {
            this.content.hide();
            if(this.decorate) {
                this.summary.show();
                this.block.css('margin-left', '');
                this.block.css('margin-right', '');
                this.inner_block.css('min-width', '');
                this.content.css('margin-left', '');
                this.content.css('margin-right', '');
                //this.handle.css('font-size', '13px');
            }
        }
    }
    this.expanded = false;
}

IncludeGroup.prototype.show_expanded = function(animate){
    this.prepare();
    if(this.button !== null) {
        this.button.removeClass('ocaml_expander_plus');
        this.button.addClass('ocaml_expander_minus');
    }
    if(animate) {
        if(this.content !== null) {
            this.content.show({duration: 'fast', queue: false});
            this.summary.hide({duration: 'fast', queue: false});
            this.block.animate({marginLeft: this.nindent, marginRight: this.nexdent}, {duration: 'fast', queue: false});
            this.inner_block.animate({minWidth: '100%'}, {duration: 'fast', queue: false});
            this.content.animate({marginLeft: this.pindent, marginRight: this.pexdent}, {duration: 'fast', queue: false});
            //this.handle.animate({fontSize : '11px'}, {duration: 'fast', queue: false});
        }
    } else {
        if(this.content !== null) {
            this.content.show();
            this.summary.hide();
            this.block.css('margin-left', this.nindent);
            this.block.css('margin-right', this.nexdent);
            this.block.css('margin-top', '1rem');
            this.inner_block.css('min-width', '100%');
            this.content.css('margin-left', this.pindent);
            this.content.css('margin-right', this.pexdent);
            //this.handle.css('font-size', '11px');
        }
    }
    this.expanded = true;
}

IncludeGroup.prototype.show_disabled = function(){
    if(this.button !== null) {
        this.button.removeClass('ocaml_expander_plus');
        this.button.removeClass('ocaml_expander_minus');
        this.button.addClass('ocaml_expander_disabled');
        this.button.off('click');
    }
    if(this.content !== null) {
        this.content.hide();
    }
    this.expanded = false;
}

function SigGroup(parent, node, label, idx) {
    Group.call(this, parent, node);
    this.icount = (parent.icount - idx - 1) % 7;
    this.auto_expand = false;
    this.decorate_children = false;
    var nameAttr = this.node.attr('name');
    this.current = this.current.copy();
    this.current.extend(nameAttr, label);
    this.button = null;
    this.block = null;
    this.content_added = false;
}

SigGroup.prototype = new Group();

SigGroup.prototype.prepare = function(){
    if(this.decorate && this.button === null) {
        this.button = $('<div>').addClass('ocaml_expander_plus');
        var self = this;
        this.button.click(function () { self.expand() });
    }
    if(this.block === null) {
        this.block = $('<div>')
                         .addClass('expanding_sig')
                         .append(this.button)
                         .append(this.handle);
        this.node.append(this.block);
    }
    if(!this.content_added && this.content !== null) {
        this.content.css('margin-left', '2em');
        this.content.css('padding-left', '2em');
        this.content.css('border-left', '3px solid lightgrey');
        this.block.append(this.content);
        this.content_added = true;
    }
}

SigGroup.prototype.show_unexpanded = function(animate){
    this.prepare();
    if(this.button !== null) {
        this.button.removeClass('ocaml_expander_minus');
        this.button.addClass('ocaml_expander_plus');
    }
    if(animate) {
        if(this.content !== null) {
            this.content.hide('fast');
        }
    } else {
        if(this.content !== null) {
            this.content.hide();
        }
    }
    this.expanded = false;
}

SigGroup.prototype.show_expanded = function(animate){
    this.prepare();
    if(this.button !== null) {
        this.button.removeClass('ocaml_expander_plus');
        this.button.addClass('ocaml_expander_minus');
    }
    if(animate) {
        if(this.content !== null) {
            this.content.show('fast');
        }
    } else {
        if(this.content !== null) {
            this.content.show();
        }
    }
    this.expanded = true;
}

SigGroup.prototype.show_disabled = function(){
    this.prepare();
    if(this.button !== null) {
        this.button.removeClass('ocaml_expander_plus');
        this.button.removeClass('ocaml_expander_minus');
        this.button.addClass('ocaml_expander_disabled');
        this.button.off('click');
    }
    if(this.content !== null) {
        this.content.hide();
    }
    this.expanded = false;
}

Group.prototype.load_children = function(data, Kind, label){
    if(typeof Kind === 'undefined') {
        this.load_children(data, IncludeGroup, 'include');
        this.load_children(data, SigGroup, 'module');
        this.load_children(data, SigGroup, 'modtype');
        this.load_children(data, SigGroup, 'class');
    } else {
        var children = $('> div.ocaml_' + label, data);
        var self = this;
        children.each(function(idx) {
            var grp = new Kind(self, $(this), label, idx);
            var content = $('> div.ocaml_content', $(this));
            if(content.length > 0) {
                grp.load_content(content);
            }
            grp.show();
        });
    }
}

$(document).ready(function () {
    var url = ocaml_base + '/' + ocaml_package + '/' + location.hash;
    var p = new Path(url);
    var grp = new Group(null, null);
    load_path(p, function(page){
        grp.typ = page.typ;
        grp.current = page.path;
        if(page.alias !== null) {
          grp.add_filter(page.alias, page.path);
        }
        grp.load_content(page.body);
        display_page(page);
        show_type(page.typ);
    });
});

$(window).on('hashchange', function () {
    var url = ocaml_base + '/' + ocaml_package + '/' + location.hash;
    var p = new Path(url);
    var grp = new Group(null, null);
    load_path(p, function(page){
        grp.typ = page.typ;
        grp.current = page.path;
        if(page.alias !== null) {
          grp.add_filter(page.alias, page.path);
        }
        grp.load_content(page.body);
        display_page(page);
        scrollTo(0,0);
        show_type(page.typ);
    });
});
""
",ocaml
"module Pre = struct
  (* 和集合 *)
  let union (xs: 'a list) (ys: 'a list):'a list =
    List.filter begin fun x ->
      not (List.mem x ys)
    end xs @ ys

  (* 積集合 *)
  let intersect (xs: 'a list) (ys: 'a list): 'a list =
    List.filter begin fun x ->
      List.mem x ys
    end xs

  (* リストをセットにする。要素が１つずつにまとめる *)
  let nub (xs : 'a list): 'a list =
    List.fold_left begin fun ys y ->
      if List.mem y ys
      then ys
      else y :: ys
    end [] xs

  let show_list show sep xs =
    begin
      let rec loop xs =
        begin match xs with
          | [] -> """"
          | [x] -> show x
          | x::xs -> show x ^ sep ^ loop xs
        end
    in
      Printf.sprintf ""[%s]"" (loop xs)
    end
  let show_int_list xs =
    show_list string_of_int ""; "" xs
end

module Id = struct
  type id = string

  (* 数値に対するidを取得する *)
  let enumId (n:int) : id =
    ""v"" ^ string_of_int n
end

(* 3 Kinds *)
module Kind = struct
  type kind =
    | Star
    | Kfun of kind * kind

  let rec show (k:kind):string =
    begin match k with
      | Star -> ""*""
      | Kfun(Kfun _ as k1,k2) -> Printf.sprintf ""(%s) -> %s"" (show k1) (show k2) 
      | Kfun(k1,k2) -> Printf.sprintf ""%s -> %s"" (show k1) (show k2) 
    end

  let rec show_list (ks:kind list):string =
    Pre.show_list show "";"" ks

end

(* 4 Types *)
module Type = struct
  open Kind
  (* 型変数 *)
  type tyvar = Tyvar of Id.id * kind
  (* 型コンストラクタ *)
  type tycon = Tycon of Id.id * kind
  (* 型 *)
  type type_ =
    | TVar of tyvar
    | TCon of tycon
    | TAp of type_ * type_
    | TGen of int

  let tUnit :type_ = TCon(Tycon(""()"", Star))
  let tChar :type_ = TCon(Tycon(""Char"", Star))
  let tInt :type_ = TCon(Tycon(""Int"", Star))
  let tInteger :type_ = TCon(Tycon(""Integer"", Star))
  let tFloat :type_ = TCon(Tycon(""Float"", Star))
  let tDouble :type_ = TCon(Tycon(""Double"", Star))

  let tList :type_ = TCon(Tycon(""[]"", Kfun(Star, Star)))
  let tArrow :type_ = TCon(Tycon(""(->)"", Kfun(Star, Kfun(Star, Star))))
  let tTuple2 :type_ = TCon(Tycon(""(,)"", Kfun(Star, Kfun(Star, Star))))

  let fn (a:type_) (b:type_) :type_ = TAp(TAp(tArrow, a), b)

  let list t :type_ = TAp(tList, t)

  let tString :type_ = list tChar

  let pair a b :type_ = TAp(TAp(tTuple2, a), b)

  let tyvarKind (Tyvar(_, k)) :kind = k
  let tyconKind (Tycon(_, k)) :kind = k
  let rec typeKind t:kind =
    match t with
    | TCon tc -> tyconKind tc
    | TVar u -> tyvarKind u
    | TAp(t, _) ->
      begin match typeKind t with
        | Kfun(_, k) -> k
        | _ -> failwith ""inconsistent type""
      end
    | TGen _ -> failwith ""generic type variables have no kind""

  let rec show (t:type_): string =
    begin match t with
      | TVar(Tyvar(id,kind)) -> Printf.sprintf ""TVar(Tyvar(%s,%s))"" id (Kind.show kind)
      | TCon(Tycon(id,kind)) -> Printf.sprintf ""TCon(Tycon(%s,%s))"" id (Kind.show kind)
      | TAp(t1,t2)           -> Printf.sprintf ""TAp(%s,%s)"" (show t1) (show t2)
      | TGen(i)              -> Printf.sprintf ""TGen(%d)"" i
    end
end

(* 5 Substitutions *)
module Subst = struct
  open Type

  type subst = (tyvar * type_) list

  let nullSubst : subst = []

  let (+->) u t : subst = [(u, t)]

  (* 型変数を展開する *)
  let rec typeApply (s : subst) (t:type_):type_ = 
    begin match t with
      | TVar u as t ->
        begin try
          List.assoc u s
        with
          Not_found -> t
        end
      | TAp(l, r) -> TAp(typeApply s l, typeApply s r)
      | t -> t
    end

  let rec typeTv (t:type_):tyvar list =
    begin match t with
      | TVar u -> [u]
      | TAp(l, r) -> Pre.union (typeTv l) (typeTv r)
      | _ -> []
    end

  let listApply (apply : subst -> 'a -> 'b) (s : subst) (xs:'a list):'b list =
    List.map (apply s) xs

  let listTv (tv:'a -> tyvar list) (xs:'a list) : tyvar list =
    Pre.nub (List.concat (List.map tv xs))

  let (@@) (s1:subst) (s2 : subst) : subst =
    List.map begin fun (u, t) ->
      (u, typeApply s1 t)
    end s2 @ s1

  let merge s1 s2 : subst =
    let agree =
      let agreeOnVar v =
        typeApply s1 (TVar v) = typeApply s2 (TVar v)
      in
      List.for_all agreeOnVar (Pre.intersect (List.map fst s1) (List.map fst s2))
    in
    if agree
    then s1 @ s2
    else failwith ""substitutions do not agree""

  let show (subst:subst):string =
    Pre.show_list begin fun (Tyvar(id,kind),type_) ->
      Printf.sprintf ""Tyvar(%s,%s),%s"" id (Kind.show kind) (Type.show type_)
    end ""; "" subst

  let rec show_tyvar(tv:tyvar): string = 
    begin match tv with
      | Tyvar(id,kind) -> Printf.sprintf ""Tyvar(%s,%s)"" id (Kind.show kind)
    end

  let show_tyvar_list xs :string =
    Pre.show_list begin fun (Tyvar(id,kind)) ->
      Printf.sprintf ""Tyvar(%s,%s)"" id (Kind.show kind)
    end ""; "" xs
end

(* 6 Unification and Matching *)
module Unify = struct
  open List
  open Kind
  open Type
  open Subst
  
  let rec mgu (t1:type_) (t2:type_):subst =
    match t1, t2 with
    | TAp(l, r), TAp(l', r') ->
      let s1 = mgu l l' in
      let s2 = mgu (typeApply s1 r) (typeApply s1 r') in
      s2 @@ s1
    | TVar u, t | t, TVar u -> varBind u t
    | TCon tc1, TCon tc2 when tc1 = tc2 -> nullSubst
    | _ -> failwith ""types do not unify""

  and varBind (u:tyvar) (t:type_):subst =
    match t with
    | _ when t = TVar u                -> nullSubst
    | _ when mem u (typeTv t)          -> failwith ""occurs check fails""
    | _ when tyvarKind u <> typeKind t -> failwith ""kinds do not match""
    | _                                -> u +-> t

  let rec match_ (t1:type_) (t2:type_):subst =
    match t1, t2 with
    | TAp(l, r), TAp(l', r') ->
      let sl = match_ l l' in
      let sr = match_ r r' in
      merge sl sr
    | TVar u, t when tyvarKind u = typeKind t -> u +-> t
    | TCon tc1, TCon tc2 when tc1 = tc2 -> nullSubst
    | _ -> failwith ""types do not match""
end

(* 7 Type Classes, Predicates and Qualified Types *)
module Pred = struct
  open List
  open Kind
  open Type
  open Subst


  (* 7.1 Basic definitions *)
  type pred = IsIn of Id.id * type_

  let p (IsIn(s, t)) =
    s  ^ "" "" ^ (Type.show t)

  let ps pred =
    Pre.show_list p "", "" pred

  type 't qual = Qual of pred list * 't

  let p_qual q =
    begin match q with
      | Qual(preds,ty) -> ps preds ^ "" => "" ^ Type.show ty
    end

  let predApply (s:subst) (pred:pred):pred =
    match pred with
    | IsIn(i, t) -> IsIn(i, Subst.typeApply s t)

  let predTv (pred:pred):tyvar list =
    match pred with
    | IsIn(_, t) -> Subst.typeTv t

  let predsApply (s:subst) (xs:pred list):pred list =
    Subst.listApply predApply s xs

  let predsTv (xs:'a list) : tyvar list =
    Subst.listTv predTv xs

  let qualTypeApply (s:subst) (qual:type_ qual):type_ qual =
    match qual with
    | Qual(ps, t) -> Qual(predsApply s ps, Subst.typeApply s t)

  let qualTypeTv qual =
    match qual with
    | Qual(ps, t) ->
      Pre.union (predsTv ps) (Subst.typeTv t)

  let lift (m:type_->type_->'a) (p:pred) (p':pred):'a =
    match (p, p') with
    | IsIn(i, t), IsIn(i', t') ->
      if i = i' then m t t'
      else failwith ""classes differ""

  let mguPred = lift Unify.mgu

  let matchPred = lift Unify.match_

  type inst = pred qual

  let p_inst i =
    begin match i with
    | Qual(preds,pred) -> Printf.sprintf ""Qual(%s,%s)"" (ps preds) (p pred)
    end

  type class_ = Id.id list * inst list

  let (==>) ps p = Qual(ps, p)

  (* 7.2 Class Environments *)

  type classEnv = {
    classes : (Id.id -> class_);
    defaults : type_ list;
  }

  let initialEnv :classEnv = {
    classes = (fun i -> raise Not_found);
    defaults = [tInteger; tDouble]
  }

  let modify (ce:classEnv) i c =
    { ce with classes = fun j -> if i = j then c else ce.classes j; }

  let super (ce:classEnv) i = fst (ce.classes i)

  let insts (ce:classEnv) i = snd (ce.classes i)

  let defined (ce:classEnv) i =
    try
      ignore (ce.classes i);
      true
    with Not_found -> false

  type envTransformer = classEnv -> classEnv

  let addClass i is : envTransformer =
    fun (ce:classEnv) ->
      if defined ce i then failwith ""class already defined""
      else if exists (fun i -> not (defined ce i)) is then
        failwith ""superclass not defined""
      else modify ce i (is, [])

  let (<:>) (f : envTransformer) (g : envTransformer) : envTransformer =
    fun (ce:classEnv) -> g (f ce)

  let addCoreClasses :envTransformer =
        addClass ""Eq"" []
    <:> addClass ""Ord"" [""Eq""]
    <:> addClass ""Show"" []
    <:> addClass ""Read"" []
    <:> addClass ""Bounded"" []
    <:> addClass ""Enum"" []
    <:> addClass ""Functor"" []
    <:> addClass ""Monad"" []

  let addNumClasses :envTransformer =
        addClass ""Num"" [""Eq""; ""Show""]
    <:> addClass ""Real"" [""Num""; ""Ord""]
    <:> addClass ""Fractional"" [""Num""]
    <:> addClass ""Integral"" [""Real""; ""Enum""]
    <:> addClass ""RealFrac"" [""Real""; ""Fractional""]
    <:> addClass ""Floating"" [""Fractional""]
    <:> addClass ""RealFloat"" [""RealFrac""; ""Floating""]

  let addPreludeClasses :envTransformer =
    addCoreClasses <:> addNumClasses

  let overlap (p:pred) (q:pred) : bool =
    try
      ignore (mguPred p q);
      true
    with _ -> false

  let addInst ps (IsIn(i, _) as p) : envTransformer =
    fun (ce:classEnv) ->
      if not (defined ce i) then failwith ""no class for instance"";
      let its = insts ce i in
      let qs = map (fun (Qual(_, q)) -> q) its in
      if exists (overlap p) qs then failwith ""overlapping instance"";      
      let c = super ce i, Qual(ps, p) :: its in
      modify ce i c

  let exampleInsts : envTransformer =
        addPreludeClasses
    <:> addInst [] (IsIn(""Ord"", tUnit))
    <:> addInst [] (IsIn(""Ord"", tChar))
    <:> addInst [] (IsIn(""Ord"", tInt))
    <:> addInst [IsIn(""Ord"", TVar(Tyvar(""a"", Star)));
                 IsIn(""Ord"", TVar(Tyvar(""b"", Star)))]
                (IsIn(""Ord"", pair (TVar(Tyvar(""a"", Star)))
                                  (TVar(Tyvar(""b"", Star)))))

  (* 7.3 Entailment *)

  let rec bySuper (ce:classEnv) (IsIn(i, t) as p) =
    p :: concat (map (fun i' -> bySuper ce (IsIn(i', t))) (super ce i))

  let byInst (ce:classEnv) (IsIn(i, t) as p) =
    let tryInst (Qual(ps, h)) =
      try
       let u = matchPred h p in
       Some (map (predApply u) ps)
      with _ -> None in
    let rec msum = function
      | [] -> None
      | None :: xs -> msum xs
      | x :: _ -> x in
    msum (map tryInst (insts ce i))

  let rec entail (ce:classEnv) ps p =
    exists (mem p) (map (bySuper ce) ps) ||
    match byInst ce p with
    | None -> false
    | Some qs -> for_all (entail ce ps) qs

  (* 7.4 Context Reduction *)

  let inHnf (p:pred):bool =
    match p with
    | IsIn(_, t) ->
      let rec hnf = function
        | TVar _ -> true
        | TCon _ -> false
        | TAp(t, _) -> hnf t
        | TGen _ -> failwith ""context reduction on generic variable""
      in
      hnf t

  let rec toHnfs (ce:classEnv) ps = concat (map (toHnf ce) ps)
  and toHnf (ce:classEnv) p =
    if inHnf p then [p]
    else
      match byInst ce p with
      | None -> failwith ""context reduction""
      | Some ps -> toHnfs ce ps

  let simplify (ce:classEnv) ps =
    let rec loop rs = function
      | [] -> rs
      | p :: ps ->
        if entail ce (rs @ ps) p then loop rs ps
        else loop (p :: rs) ps in
    loop [] ps

  let reduce (ce:classEnv) ps =
    simplify ce (toHnfs ce ps)

  let scEntail (ce:classEnv) ps p =
    exists (mem p) (map (bySuper ce) ps)

end

(* 8 Type Schemes *)
module Scheme = struct

  open List
  open Kind
  open Type
  open Pred

  type scheme = Forall of kind list * type_ qual

  let show (Forall(ks, qt):scheme) =
    Printf.sprintf ""Forall(%s, %s)"" (Kind.show_list ks) (Pred.p_qual qt)

  let _ =
    let ty = TVar(Tyvar(""a"", Star)) in
    let pred = IsIn(""Num"", ty) in
    let sc = Forall([],Qual([pred],ty)) in
    Printf.printf ""scheme = %s\n"" (show sc)

  let schemeApply (s:Subst.subst) (Forall(ks, qt):scheme):scheme =
    Forall(ks, qualTypeApply s qt)

  let _ =
    let ty = TVar(Tyvar(""a"", Star)) in
    let pred = IsIn(""Num"", ty) in
    let sc = Forall([],Qual([pred],ty)) in
    let subst = [Tyvar(""a"", Star), tInt] in
    let sc = schemeApply subst sc in
    Printf.printf ""scheme = %s\n"" (show sc)

  let schemeTv (Forall(_, qt):scheme):tyvar list = qualTypeTv qt

  let _ =
    let ty = TVar(Tyvar(""a"", Star)) in
    let pred = IsIn(""Num"", ty) in
    let sc = Forall([],Qual([pred],ty)) in
    let tvs = schemeTv sc in
    Printf.printf ""tvs = %s\n"" (Subst.show_tyvar_list tvs)

  let quantify(vs:tyvar list) (qt:type_ qual):scheme =
    let vs' = filter (fun v -> mem v vs) (qualTypeTv qt) in
    let ks = map tyvarKind vs' in
    let newGen v =
      let count = ref 0 in
      let t = TGen !count in
      incr count;
      (v, t) in
    let s = map newGen vs' in
    Forall(ks, qualTypeApply s qt)

  let _ =
    let tyvar = Tyvar(""a"", Star) in
    let ty = TVar(Tyvar(""a"", Star)) in
    let pred = IsIn(""Num"", ty) in
    let qual = Qual([pred], fn ty tInt) in
    let sc = quantify [tyvar] qual in
    Printf.printf ""scheme = %s\n"" (show sc)


  let toScheme (t:type_) :scheme = Forall([], (Qual([], t)))

  let _ =
    let ty = TVar(Tyvar(""a"", Star)) in
    let sc = toScheme ty in
    Printf.printf ""scheme = %s\n"" (show sc)
end
",ocaml
"#include <stdio.h>
#include <stdlib.h>
#include ""ml.h""

int  iunique(int y[], int n, int **values)
     /*
       extract unique values from a vector y of n integers.
       
       Return value: the number of unique values on success, 0 otherwise.
     */
{
  int nvalues=1;
  int i,j;
  int addclass;
  int *indx;

  if(!(*values=ivector(1))){
    fprintf(stderr,""iunique: out of memory\n"");
    return 0;
  }
    
  (*values)[0]=y[0];
  for(i=1;i<n;i++){
    addclass=1;
    for(j=0;j<nvalues;j++)
      if((*values)[j]==y[i])
        addclass=0;
    if(addclass){
      if(!(*values=(int*)realloc(*values,(nvalues+1)*sizeof(int)))){
	fprintf(stderr,""iunique: out of memory\n"");
	return 0;
      }
      (*values)[nvalues++]=y[i];
    }
  }

  if(!(indx=ivector(nvalues))){
    fprintf(stderr,""iunique: out of memory\n"");
    return 0;
  }

  isort(*values,indx,nvalues,SORT_ASCENDING);

  if(free_ivector(indx)!=0){
    fprintf(stderr,""iunique: free_ivector error\n"");
    return 0;
  }

  return nvalues;
}


int  dunique(double y[], int n, double **values)
     /*
       extract unique values from a vector y of n doubles.
       
       Return value: the number of unique values on success, 0 otherwise.
     */
{
  int nvalues=1;
  int i,j;
  int addclass;
  int *indx;

  if(!(*values=dvector(1))){
    fprintf(stderr,""dunique: out of memory\n"");
    return 0;
  }
    
  (*values)[0]=y[0];
  for(i=1;i<n;i++){
    addclass=1;
    for(j=0;j<nvalues;j++)
      if((*values)[j]==y[i])
        addclass=0;
    if(addclass){
      if(!(*values=(double*)realloc(*values,(nvalues+1)*sizeof(double)))){
	fprintf(stderr,""dunique: out of memory\n"");
	return 0;
      }
      (*values)[nvalues++]=y[i];
    }
  }

  if(!(indx=ivector(nvalues))){
    fprintf(stderr,""iunique: out of memory\n"");
    return 0;
  }

  dsort(*values,indx,nvalues,SORT_ASCENDING);

  if(free_ivector(indx)!=0){
    fprintf(stderr,""iunique: free_ivector error\n"");
    return 0;
  }

  return nvalues;
}
",c++
"// Max External: startup.c
// T.Place - 9/4/2001, 1/8/2002
// A simple Max object to put all tap.tools' objects into the new object list & post some info

#include ""ext.h""				// Required for all Max external objects

void *this_class;			// Required. Global pointing to this class 

typedef struct startup		// Data structure for this object 
{
	Object	p_ob;		// Must always be the first field; used by Max 
} Startup;

		
// Prototypes for methods: need a method for each incoming message
void	*startup_new(long value);			// object creation method  
void	startup_free(Startup *startup);	// free method

/*********************************************************/
//Main() Function

void main(void)			//main receives a copy of the Max function macros table 
{	
	// set up our class: create a class definition 
	setup((t_messlist **)&this_class, (method)startup_new, (method)startup_free, (short)sizeof(Startup), 0L, A_DEFLONG, 0);

	addmess((method)inspector_open, ""info"", A_CANT, 0);		// bind method for opening the license window

	finder_addclass(""SuperCollider Lib"", ""sc.CombN"");
	finder_addclass(""SuperCollider Lib"", ""sc.LFPulse"");
	finder_addclass(""SuperCollider Lib"", ""sc.LFSaw"");
	finder_addclass(""SuperCollider Lib"", ""sc.midicps"");
	finder_addclass(""SuperCollider Lib"", ""sc.SinOsc"");
	finder_addclass(""SuperCollider Lib"", ""sc.WhiteNoise"");
	finder_addclass(""SuperCollider Lib"", ""sc.Xline"");
	
//	finder_addclass(""Tap.Tools"", ""tap.metro"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.prime"");
	finder_addclass(""Tap.Tools"", ""tap.random"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.sieve"");					// add object to new-object list

	finder_addclass(""Tap.Tools"", ""tap.1pole-lp~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.allpole~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.anticlick~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.auto_thru~"");			// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.avg~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.bink~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.crossfade~"");			// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.decibels~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.diff~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.elixir~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.fft-list~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.fft-normalize~"");			// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.lp-comb~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.lpc~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.noise~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.pan~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.polar~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.quantize~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.radians~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.rms~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.scale~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.sift~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.split~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.typecheck~"");			// add object to new-object list

	finder_addclass(""Tap.Tools"", ""tap.5comb~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.adapt~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.decay_calc"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.deviate~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.fft~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.filterbank~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.gate~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.ifft~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.Lchange"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.limiter~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.loadbang"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.normalizer~"");			// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.nr~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.shift~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.sustain~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.thru~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.verb~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.vocoder~"");				// add object to new-object list	
	finder_addclass(""Tap.Tools"", ""tap.vocoderlite~"");			// add object to new-object list	
	
	post(""Tap.Tools MSP"");						// Print to the Max Window...
	post(""    Objects for Max/MSP by Tim Place"");
	post(""    Version 0.95"");
	post(""    Copyright � 1999-2002 by Silicon Prairie Intermedia"");
	post(""    http://www.sp-intermedia.com"");
	post(""    Use \""Get Info\"" on any object to view its license"");
}


/*********************************************************/
//Object Creation Function

void *startup_new(long value)
{
	Startup *startup;
	startup = (Startup *)newobject(this_class);	// create the new instance and return a pointer to it 
	return(startup);						// must return a pointer to the new instance 
}


/*********************************************************/
//Bound to input Functions

// free method
void startup_free(Startup *startup)
{
	notify_free((t_object *)startup);
}",c++
"#! /usr/bin/env python

# Copyright 2012 Tom SF Haines

# Licensed under the Apache License, Version 2.0 (the ""License""); you may not use this file except in compliance with the License. You may obtain a copy of the License at

#   http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.



import df

from utils import doc_gen



# Setup...
doc = doc_gen.DocGen('df', 'Decision Forests', 'Extensive random forests implimentation')
doc.addFile('readme.txt', 'Overview')


# Classes...
doc.addClass(df.DF)
doc.addClass(df.ExemplarSet)
doc.addClass(df.MatrixES)
doc.addClass(df.MatrixGrow)
doc.addClass(df.Goal)
doc.addClass(df.Classification)
doc.addClass(df.DensityGaussian)
doc.addClass(df.Pruner)
doc.addClass(df.PruneCap)
doc.addClass(df.Test)
doc.addClass(df.AxisSplit)
doc.addClass(df.LinearSplit)
doc.addClass(df.DiscreteBucket)
doc.addClass(df.Generator)
doc.addClass(df.MergeGen)
doc.addClass(df.RandomGen)
doc.addClass(df.AxisMedianGen)
doc.addClass(df.LinearMedianGen)
doc.addClass(df.AxisRandomGen)
doc.addClass(df.LinearRandomGen)
doc.addClass(df.DiscreteRandomGen)
doc.addClass(df.AxisClassifyGen)
doc.addClass(df.LinearClassifyGen)
doc.addClass(df.DiscreteClassifyGen)
doc.addClass(df.SVMClassifyGen)
doc.addClass(df.Node)
",python
"from classes.OnlineClassroom.createPost import post


class addclasspostAdapter(post):
    def __init__(self,addclass):
        self.addclass=addclass
    def getposttext(self):
        return ""next class about "" +self.addclass.details+"" will be held on ""+ self.addclass.starttime+"" to "" +self.addclass.endtime
    def getpostfile(self):
        return """"
    def getauthor(self):
        return self.addclass.author
    def get_course_id(self):
        return self.addclass.course_id",python
"
def main(j, args, params, tags, tasklet):

    page = args.page
    params.extend(args)
    page.addHTMLHeader('''<link rel=""shortcut icon"" type=""image/png"" href=""/system/.files/img/favicon.png"">''')
    page.addCSS('/jslib/bootstrap/css/bootstrap-3-3-1.min.css')
    page.addCSS('/jslib/flatui/css/flat-ui.css')
    page.addCSS('/jslib/new-ui/new-ui.css')
    page.addCSS('/jslib/new-ui/oocss.css')

    page.addJS('/jslib/jquery/jquery-2.0.3.min.js')
    page.addJS('/jslib/jquery/jquery-migrate-1.2.1.js')
    page.addJS('/jslib/old/jquery.cookie.js')
    page.addJS('/jslib/bootstrap/js/bootstrap-3-3-2.min.js')

    page.addJS(jsContent='''
        $( function () {
        $('body').addClass('flatTheme');
        // fix firefox elements size on windows
        var operatingSystem = navigator.platform;
        if(operatingSystem.indexOf('Win') >= 0 && $.browser.mozilla == true){
            $('body').addClass('fixFirefoxSizing');
        }else{
            $('body').addClass('removeTransform');
        }

        $('link[href=""/jslib/old/bootstrap/css/bootstrap.css""]').remove();
        $('link[href=""/jslib/old/bootstrap/css/bootstrap-responsive.css""]').remove();
        $('link[href=""/jslib/old/breadcrumbs/breadcrumbs.css""]').remove();
        $('link[href=""/jslib/swagger/css/reset.css""]').remove();


        $('.nav-collapse.collapse').removeClass('nav-collapse').addClass('navbar-collapse');
        $('.btn.btn-navbar').replaceWith('<button type=""button"" class=""navbar-toggle collapsed"" data-toggle=""collapse"" data-target="".nav-collapse"" aria-expanded=""false"">' +
            '<span class=""sr-only"">Toggle navigation</span>' +
            '<span class=""icon-bar""></span>' +
            '<span class=""icon-bar""></span>' +
            '<span class=""icon-bar""></span>' +
          '</button>'
        );
        $('.brand').removeClass('brand').addClass('navbar-brand');
        $('.navbar-inner').addClass('navbar-form');
        $('.search-query').addClass('form-control');
        $('.newBreadcrumbArrow').removeClass('newBreadcrumbArrow separator').addClass('fui-arrow-right');

        $('.span1').removeClass('span1').addClass('col-md-1');
        $('.span2').removeClass('span2').addClass('col-md-2');
        $('.span3').removeClass('span3').addClass('col-md-3');
        $('.span4').removeClass('span4').addClass('col-md-4');
        $('.span5').removeClass('span5').addClass('col-md-5');
        $('.span6').removeClass('span6').addClass('col-md-6');
        $('.span7').removeClass('span7').addClass('col-md-7');
        $('.span8').removeClass('span8').addClass('col-md-8');
        $('.span9').removeClass('span9').addClass('col-md-9');
        $('.span10').removeClass('span10').addClass('col-md-10');
        $('.span11').removeClass('spa11').addClass('col-md-11');
        $('.span12').removeClass('span12').addClass('col-md-12');

        var toggles = document.querySelectorAll("".c-hamburger"");
        for (var i = toggles.length - 1; i >= 0; i--) {
            var toggle = toggles[i];
            toggleHandler(toggle);
        };
        function toggleHandler(toggle) {
            toggle.addEventListener( ""click"", function(e) {
              e.preventDefault();
              (this.classList.contains(""is-active"") === true) ? this.classList.remove(""is-active"") : this.classList.add(""is-active"");
              $('.page-content').find('.sidebar-nav').toggleClass('hide');
              $('.page-content').find('.content').toggleClass('less-wide');
              $('.page-content').find('.navigation').toggleClass('wide-sidebar');
            });
        }

    });
     ''')

    page.removeJS('/jslib/old/jquery-latest.js')
    page.removeJS('/jslib/old/bootstrap/js/bootstrap.js')
    page.removeJS('/jslib/old/jquery.cookie.js')

    page.addCSS('/system/.files/css/flatTheme.css')

    params.result = page

    return params


def match(j, args, params, tags, tasklet):
    return True
",python
"from plone.app.discussion.browser.comments import CommentForm
import logging

logger = logging.getLogger('Comment Form Patch')

def updateActions(self):
    super(CommentForm, self).updateActions()
    self.actions['cancel'].addClass(""standalone"")
    self.actions['cancel'].addClass(""hide"")
    self.actions['cancel'].addClass(""button"")
    self.actions['cancel'].addClass(""tiny"")
    self.actions['cancel'].addClass(""radius"")
    self.actions['comment'].addClass(""context"")
    self.actions['comment'].addClass(""button"")
    self.actions['comment'].addClass(""tiny"")
    self.actions['comment'].addClass(""radius"")

CommentForm.updateActions = updateActions
logger.info(""Patching plone.app.discussion.browser.comments.CommentForm.updateActions"")
",python
"# test

import os, sys, inspect
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
parentdir = os.path.dirname(currentdir)
sys.path.insert(0, parentdir) 
from bot import Bot

b = Bot()

b.addClass('tcj29', 'tc2013j@cony', '1234', test=True)

# b.addClass('tcj29','tc2013j@cony','4468', '','', test = True)  #Single Class

# b.addClass('tcj29','tc2013j@cony','9190','9191','', test = True)  #Disscusion no Lab



# b.addClass('tcj29','tc2013j@cony','16587','','16588', test = True)  #Lab no Dicussion
# b.addClass('tcj29','tc2013j@cony','16587','','16594', test = True)  #Lab no Dicussion

# b.addClass('tcj29','tc2013j@cony','5741','5743','', test = True)  #Lab no Dicussion

# b.addClass('tcj29','tc2013j@cony','6133', '6140','6180', test = True)  #Disscussion and Lab  FIRST PAGE
# b.addClass('tcj29','tc2013j@cony','6133', '6147','6190', test = True)  #Disscussion and Lab	 SECOND PAGE

# b.addClass('tcj29','tc2013j@cony','6133', '7927','6195', test = True)  #Disscussion and Lab  LAST PAGE

",python
"###
#   colum append
#
####

DataProc.appendColumns (['lmn_user_features_4_11_6_15_t',
				'lmn_u_class_4_11_6_15_indc'],
				'lmn_user_features_4_11_6_15_t_addclass')

DataProc.appendColumns (['lmn_brand_features_4_11_6_15_t',
				'lmn_b_class_4_11_6_15_indc'],
				'lmn_brand_features_4_11_6_15_t_addclass')

DataProc.appendColumns (['lmn_user_features_5_11_7_15_t',
				'lmn_u_class_5_11_7_15_indc'],
				'lmn_user_features_5_11_7_15_t_addclass')

DataProc.appendColumns (['lmn_brand_features_5_11_7_15_t',
				'lmn_b_class_5_11_7_15_indc'],
				'lmn_brand_features_5_11_7_15_t_addclass')










# connect 

sql(""""""
drop table if  exists lmn_train_area_validate_4_11_7_15_addclass  ;
create table lmn_train_area_validate_4_11_7_15_addclass as
select
	lmn_user_brand_features_4_11_6_15_addclass.user_id,
      lmn_user_brand_features_4_11_6_15_addclass.brand_id,
 	 click1	 ,
	click3	 ,
	click5	 ,
	click7	 ,
	click10	,
	click15	 ,
	click25	 ,

	buy1	 ,
	buy3	 ,
	buy5	 ,
	buy7	 ,
	buy10	,
	buy15	 ,
	buy25	 ,

	collect1	 ,
	collect3	 ,
	collect5	 ,
	collect7	 ,
	collect10	,
	collect15	 ,
	collect25	 ,

	basket1	 ,
	basket3	 ,
	basket5	 ,
	basket7	 ,
	basket10	,
	basket15	 ,
	basket25	,
      
       click_this_ratio	,
	 buy_this_ratio	,
	 collect_this_ratio	 ,
	 basket_this_ratio	,
	 action_this	,
	lmn_user_brand_features_4_11_6_15_addclass.cluster_index ub_class ,

 -- brand features
      --
  	n_clicked_ratio,
	n_bought_ratio,
	n_collected_ratio,	
	n_basketed_ratio,	
	actions_by ,

	clicked_dist_ratio,
	bought_dist_ratio,
	collected_dist_ratio,
	basketed_dist_ratio ,
       users_dist ,
	lmn_brand_features_4_11_6_15_addclass.cluster_index  b_class,

--user features 
	n_click_ratio,
	n_buy_ratio,
	n_collect_ratio ,
	n_basket_ratio,
	actions_sum ,

	click_dist_ratio,
	buy_dist_ratio,
	collect_dist_ratio,
	basket_dist_ratio,
      brand_dist  ,
      lmn_user_features_4_11_6_15_addclass.cluster_index  u_class ,	

	last_datetime ,		

      --label
      buy_brand	,
	case
	when buy_brand is not null then 1
	when buy_brand is null then 0
	end as buy_label

from
 lmn_user_brand_features_4_11_6_15_addclass

left outer join
lmn_user_features_4_11_6_15_addclass
on 	lmn_user_brand_features_4_11_6_15_addclass.user_id = lmn_user_features_4_11_6_15_addclass.user_id

left outer join
lmn_brand_features_4_11_6_15_addclass
on 	lmn_user_brand_features_4_11_6_15_addclass.brand_id = lmn_brand_features_4_11_6_15_addclass.brand_id		

left outer join(
   select
   user_id,
   brand_id  buy_brand
from(
	select user_id,brand_id 
	from t_alibaba_bigdata_user_brand_total_1
	where type = '1' and  visit_datetime>='06-16' and   visit_datetime <= '07-15'
	group by  user_id , brand_id
    )label
) buy_label_table_6_16_7_15
on 	lmn_user_brand_features_4_11_6_15_addclass.user_id = buy_label_table_6_16_7_15.user_id and 	lmn_user_brand_features_4_11_6_15_addclass.brand_id = buy_label_table_6_16_7_15.buy_brand

where actions_sum is not null and  actions_by is not null   ; --fliter
"""""")


############################################################################################################################################################

#connect all ,get train table for validate

sql(""""""
drop table if  exists lmn_predict_area_validate_5_11_7_15_addclass  ;
create table lmn_predict_area_validate_5_11_7_15_addclass as
select
	lmn_user_brand_features_5_11_7_15_addclass.user_id,
      lmn_user_brand_features_5_11_7_15_addclass.brand_id,
 	 click1	 ,
	click3	 ,
	click5	 ,
	click7	 ,
	click10	,
	click15	 ,
	click25	 ,

	buy1	 ,
	buy3	 ,
	buy5	 ,
	buy7	 ,
	buy10	,
	buy15	 ,
	buy25	 ,

	collect1	 ,
	collect3	 ,
	collect5	 ,
	collect7	 ,
	collect10	,
	collect15	 ,
	collect25	 ,

	basket1	 ,
	basket3	 ,
	basket5	 ,
	basket7	 ,
	basket10	,
	basket15	 ,
	basket25	,
      
       click_this_ratio	,
	 buy_this_ratio	,
	 collect_this_ratio	 ,
	 basket_this_ratio	,
	 action_this	,
	lmn_user_brand_features_5_11_7_15_addclass.cluster_index ub_class ,

 -- brand features
      --
  	n_clicked_ratio,
	n_bought_ratio,
	n_collected_ratio,	
	n_basketed_ratio,	
	actions_by ,

	clicked_dist_ratio,
	bought_dist_ratio,
	collected_dist_ratio,
	basketed_dist_ratio ,
       users_dist ,
	lmn_brand_features_5_11_7_15_addclass.cluster_index  b_class,

--user features 
	n_click_ratio,
	n_buy_ratio,
	n_collect_ratio ,
	n_basket_ratio,
	actions_sum ,

	click_dist_ratio,
	buy_dist_ratio,
	collect_dist_ratio,
	basket_dist_ratio,
      brand_dist  ,
      lmn_user_features_5_11_7_15_addclass.cluster_index  u_class ,	

	last_datetime 	

from
 lmn_user_brand_features_5_11_7_15_addclass

left outer join
lmn_user_features_5_11_7_15_addclass
on 	lmn_user_brand_features_5_11_7_15_addclass.user_id = lmn_user_features_5_11_7_15_addclass.user_id

left outer join
lmn_brand_features_5_11_7_15_addclass
on 	lmn_user_brand_features_5_11_7_15_addclass.brand_id = lmn_brand_features_5_11_7_15_addclass.brand_id		

where actions_sum is not null and  actions_by is not null   ; --fliter
"""""")



",python
"#test
import threading,time

from bot import Bot
bots = [Bot() for x in range(10)] 

netid = 'tcj29'
password = 'tc2013j@cony'

classes =      ['10803','4468', '9190', '16587', '5741', '6133','13290','12576', '11161', '11166' ]
disscussions = ['10821', ' '   , '9191', ' '     , '5743', '6140', ' '    ,'12578', '11165', ' '    ]
labs =         ['10804',  ' '  ,   ' '  , '16588',   ' '  , '6180', ' '    , ' '    ,   ' '   , '11168' ]

for x in range (0, len(classes)):
          t = threading.Thread(target=bots[x].addClass, args=(netid ,password ,classes[x], disscussions[x], labs[x]), kwargs = {'test': True, 'hidden': True}  )
          t.daemon = True
          t.start()
    #thread.start_new_thread(bots[x].addClass, args=(netid ,password ,classes[x], disscussions[x], labs[x]), kwargs = {'test': True, 'hidden': True}  )
	#bots[x].addClass(netid ,password ,classes[x], disscussions[x], labs[x],  test = True, hidden = True) 

time.sleep(60)

'''
bots[0].addClass('tcj29','tc2013j@cony','10803', '10821','10804', test = True)  #Single Class

bots[1].addClass('tcj29','tc2013j@cony','4468', '','', test = True)  #Single Class

bots[2].addClass('tcj29','tc2013j@cony','9190','9191','', test = True)  #Disscusion no Lab



bots[3].addClass('tcj29','tc2013j@cony','16587','','16588', test = True)  #Lab no Dicussion
#b.addClass('tcj29','tc2013j@cony','16587','','16594', test = True)  #Lab no Dicussion

bots[4].addClass('tcj29','tc2013j@cony','5741','5743','', test = True)  #Lab no Dicussion

bots[5].addClass('tcj29','tc2013j@cony','6133', '6140','6180', test = True)  #Disscussion and Lab  FIRST PAGE
#b.addClass('tcj29','tc2013j@cony','6133', '6147','6190', test = True)  #Disscussion and Lab	 SECOND PAGE
#
#b.addClass('tcj29','tc2013j@cony','6133', '7927','6195', test = True)  #Disscussion and Lab  LAST PAGE

'''",python
"/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.springframework.boot.loader.tools;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.jar.JarFile;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;

import org.springframework.boot.loader.tools.MainClassFinder.MainClass;
import org.springframework.boot.loader.tools.MainClassFinder.MainClassCallback;
import org.springframework.boot.loader.tools.sample.AnnotatedClassWithMainMethod;
import org.springframework.boot.loader.tools.sample.ClassWithMainMethod;
import org.springframework.boot.loader.tools.sample.ClassWithoutMainMethod;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatIllegalStateException;

/**
 * Tests for {@link MainClassFinder}.
 *
 * @author Phillip Webb
 */
class MainClassFinderTests {

	private TestJarFile testJarFile;

	@BeforeEach
	void setup(@TempDir File tempDir) throws IOException {
		this.testJarFile = new TestJarFile(tempDir);
	}

	@Test
	void findMainClassInJar() throws Exception {
		this.testJarFile.addClass(""B.class"", ClassWithMainMethod.class);
		this.testJarFile.addClass(""A.class"", ClassWithoutMainMethod.class);
		try (JarFile jarFile = this.testJarFile.getJarFile()) {
			String actual = MainClassFinder.findMainClass(jarFile, """");
			assertThat(actual).isEqualTo(""B"");
		}
	}

	@Test
	void findMainClassInJarSubFolder() throws Exception {
		this.testJarFile.addClass(""a/b/c/D.class"", ClassWithMainMethod.class);
		this.testJarFile.addClass(""a/b/c/E.class"", ClassWithoutMainMethod.class);
		this.testJarFile.addClass(""a/b/F.class"", ClassWithoutMainMethod.class);
		try (JarFile jarFile = this.testJarFile.getJarFile()) {
			String actual = MainClassFinder.findMainClass(jarFile, """");
			assertThat(actual).isEqualTo(""a.b.c.D"");
		}
	}

	@Test
	void usesBreadthFirstJarSearch() throws Exception {
		this.testJarFile.addClass(""a/B.class"", ClassWithMainMethod.class);
		this.testJarFile.addClass(""a/b/c/E.class"", ClassWithMainMethod.class);
		try (JarFile jarFile = this.testJarFile.getJarFile()) {
			String actual = MainClassFinder.findMainClass(jarFile, """");
			assertThat(actual).isEqualTo(""a.B"");
		}
	}

	@Test
	void findSingleJarSearch() throws Exception {
		this.testJarFile.addClass(""a/B.class"", ClassWithMainMethod.class);
		this.testJarFile.addClass(""a/b/c/E.class"", ClassWithMainMethod.class);
		try (JarFile jarFile = this.testJarFile.getJarFile()) {
			assertThatIllegalStateException().isThrownBy(() -> MainClassFinder.findSingleMainClass(jarFile, """"))
					.withMessageContaining(
							""Unable to find a single main class from the following candidates [a.B, a.b.c.E]"");
		}
	}

	@Test
	void findSingleJarSearchPrefersAnnotatedMainClass() throws Exception {
		this.testJarFile.addClass(""a/B.class"", ClassWithMainMethod.class);
		this.testJarFile.addClass(""a/b/c/E.class"", AnnotatedClassWithMainMethod.class);
		try (JarFile jarFile = this.testJarFile.getJarFile()) {
			String mainClass = MainClassFinder.findSingleMainClass(jarFile, """",
					""org.springframework.boot.loader.tools.sample.SomeApplication"");
			assertThat(mainClass).isEqualTo(""a.b.c.E"");
		}
	}

	@Test
	void findMainClassInJarSubLocation() throws Exception {
		this.testJarFile.addClass(""a/B.class"", ClassWithMainMethod.class);
		this.testJarFile.addClass(""a/b/c/E.class"", ClassWithMainMethod.class);
		try (JarFile jarFile = this.testJarFile.getJarFile()) {
			String actual = MainClassFinder.findMainClass(jarFile, ""a/"");
			assertThat(actual).isEqualTo(""B"");
		}

	}

	@Test
	void findMainClassInFolder() throws Exception {
		this.testJarFile.addClass(""B.class"", ClassWithMainMethod.class);
		this.testJarFile.addClass(""A.class"", ClassWithoutMainMethod.class);
		String actual = MainClassFinder.findMainClass(this.testJarFile.getJarSource());
		assertThat(actual).isEqualTo(""B"");
	}

	@Test
	void findMainClassInSubFolder() throws Exception {
		this.testJarFile.addClass(""a/b/c/D.class"", ClassWithMainMethod.class);
		this.testJarFile.addClass(""a/b/c/E.class"", ClassWithoutMainMethod.class);
		this.testJarFile.addClass(""a/b/F.class"", ClassWithoutMainMethod.class);
		String actual = MainClassFinder.findMainClass(this.testJarFile.getJarSource());
		assertThat(actual).isEqualTo(""a.b.c.D"");
	}

	@Test
	void usesBreadthFirstFolderSearch() throws Exception {
		this.testJarFile.addClass(""a/B.class"", ClassWithMainMethod.class);
		this.testJarFile.addClass(""a/b/c/E.class"", ClassWithMainMethod.class);
		String actual = MainClassFinder.findMainClass(this.testJarFile.getJarSource());
		assertThat(actual).isEqualTo(""a.B"");
	}

	@Test
	void findSingleFolderSearch() throws Exception {
		this.testJarFile.addClass(""a/B.class"", ClassWithMainMethod.class);
		this.testJarFile.addClass(""a/b/c/E.class"", ClassWithMainMethod.class);
		assertThatIllegalStateException()
				.isThrownBy(() -> MainClassFinder.findSingleMainClass(this.testJarFile.getJarSource()))
				.withMessageContaining(
						""Unable to find a single main class from the following candidates [a.B, a.b.c.E]"");
	}

	@Test
	void findSingleFolderSearchPrefersAnnotatedMainClass() throws Exception {
		this.testJarFile.addClass(""a/B.class"", ClassWithMainMethod.class);
		this.testJarFile.addClass(""a/b/c/E.class"", AnnotatedClassWithMainMethod.class);
		String mainClass = MainClassFinder.findSingleMainClass(this.testJarFile.getJarSource(),
				""org.springframework.boot.loader.tools.sample.SomeApplication"");
		assertThat(mainClass).isEqualTo(""a.b.c.E"");
	}

	@Test
	void doWithFolderMainMethods() throws Exception {
		this.testJarFile.addClass(""a/b/c/D.class"", ClassWithMainMethod.class);
		this.testJarFile.addClass(""a/b/c/E.class"", ClassWithoutMainMethod.class);
		this.testJarFile.addClass(""a/b/F.class"", ClassWithoutMainMethod.class);
		this.testJarFile.addClass(""a/b/G.class"", ClassWithMainMethod.class);
		ClassNameCollector callback = new ClassNameCollector();
		MainClassFinder.doWithMainClasses(this.testJarFile.getJarSource(), callback);
		assertThat(callback.getClassNames().toString()).isEqualTo(""[a.b.G, a.b.c.D]"");
	}

	@Test
	void doWithJarMainMethods() throws Exception {
		this.testJarFile.addClass(""a/b/c/D.class"", ClassWithMainMethod.class);
		this.testJarFile.addClass(""a/b/c/E.class"", ClassWithoutMainMethod.class);
		this.testJarFile.addClass(""a/b/F.class"", ClassWithoutMainMethod.class);
		this.testJarFile.addClass(""a/b/G.class"", ClassWithMainMethod.class);
		ClassNameCollector callback = new ClassNameCollector();
		try (JarFile jarFile = this.testJarFile.getJarFile()) {
			MainClassFinder.doWithMainClasses(jarFile, null, callback);
			assertThat(callback.getClassNames().toString()).isEqualTo(""[a.b.G, a.b.c.D]"");
		}
	}

	static class ClassNameCollector implements MainClassCallback<Object> {

		private final List<String> classNames = new ArrayList<>();

		@Override
		public Object doWith(MainClass mainClass) {
			this.classNames.add(mainClass.getName());
			return null;
		}

		List<String> getClassNames() {
			return this.classNames;
		}

	}

}
",java
"/*******************************************************************************
 * Copyright (c) 2006 - 2011 SJRJ.
 * 
 *     This file is part of SIGA.
 * 
 *     SIGA is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 * 
 *     SIGA is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 * 
 *     You should have received a copy of the GNU General Public License
 *     along with SIGA.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package br.gov.jfrj.siga.ex.util;

import java.io.File;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.HashMap;
import java.util.Map;
import java.util.TreeMap;

import junit.framework.TestCase;
import br.gov.jfrj.siga.cp.CpPapel;
import br.gov.jfrj.siga.dp.CpOrgaoUsuario;
import br.gov.jfrj.siga.dp.DpCargo;
import br.gov.jfrj.siga.dp.DpFuncaoConfianca;
import br.gov.jfrj.siga.dp.DpLotacao;
import br.gov.jfrj.siga.dp.DpPessoa;
import br.gov.jfrj.siga.ex.ExDocumento;
import br.gov.jfrj.siga.ex.ExMovimentacao;
import br.gov.jfrj.siga.ex.util.FuncoesEL;
import br.gov.jfrj.siga.ex.util.ProcessadorModeloFreemarker;
import br.gov.jfrj.siga.hibernate.ExDao;
import br.gov.jfrj.siga.model.Diagram;
import freemarker.template.Configuration;
import freemarker.template.DefaultObjectWrapper;
import freemarker.template.Template;

public class ModeloTest extends TestCase {

	private Configuration cfg;

	public ModeloTest() throws Exception {
		cfg = new Configuration();
		String s = cfg.getVersionNumber();
		// Specify the data source where the template files come from.
		// Here I set a file directory for it:
		cfg.setDirectoryForTemplateLoading(new File(
				""src/main/resources/br/gov/jfrj/siga/ex/util/test""));
		// Specify how templates will see the data-model. This is an
		// advanced
		// topic...
		// but just use this:
		cfg.setObjectWrapper(new DefaultObjectWrapper());
		cfg.setWhitespaceStripping(true);
	}

	public void testGeraModelo() throws Exception {
		if (true)
			return;
		ProcessadorModeloFreemarker p = new ProcessadorModeloFreemarker();

		Map<String, Object> attrs = new TreeMap<String, Object>();
		Map<String, Object> params = new TreeMap<String, Object>();

		ExDocumento doc = new ExDocumento();
		doc.setOrgaoUsuario(ExDao.getInstance().consultar(1L,
				CpOrgaoUsuario.class, false));
		ExMovimentacao mov = new ExMovimentacao();
		attrs.put(""doc"", doc);
		attrs.put(""mov"", mov);
		attrs.put(""mob"", mov.getExMobil());
		attrs.put(""template"", ""teste freemarker: ${param.doc!}."");

		params.put(""processar_modelo"", ""1"");
		if (doc != null && doc.getIdDoc() != null)
			params.put(""idDoc"", doc.getIdDoc().toString());
		if (mov != null && mov.getIdMov() != null) {
			params.put(""id"", mov.getIdMov().toString());
		}

		String s = p.processarModelo(doc.getOrgaoUsuario(), attrs, params);
		System.out.println(s);
	}

	public void testGeraModeloAntigo() throws Exception {
		if (true)
			return;
		// Create the root hash
		Map root = new HashMap();
		Map param = new HashMap();
		root.put(""root"", root);
		root.put(""param"", param);
		root.put(""entrevista"", false);
		root.put(""formulario"", true);
		root.put(""documento"", false);
		root.put(""assinatura"", false);
		root.put(""finalizacao"", false);
		root.put(""func"", new FuncoesEL());

		Template temp = cfg.getTemplate(""memorando.ftl"");

		try (Writer out = new OutputStreamWriter(System.out)) {
			temp.process(root, out);
			out.flush();
		}
	}

	public void testGeraDesenhoCp() throws Exception {
		Diagram d = new Diagram();
		d.setfMergeWithAbstractClass(true);
		boolean fI = true;

		d.addClass(DpPessoa.class, fI);
		d.addClass(DpLotacao.class, fI);
		d.addClass(DpFuncaoConfianca.class, fI);
		d.addClass(DpCargo.class, fI);
		d.addClass(CpPapel.class, fI);
		d.addClass(CpOrgaoUsuario.class, fI);

		d.addClass(br.gov.jfrj.siga.dp.CpOrgao.class, fI);
		d.addClass(br.gov.jfrj.siga.dp.DpSubstituicao.class, fI);
		d.addClass(br.gov.jfrj.siga.dp.CpFeriado.class, fI);
		d.addClass(br.gov.jfrj.siga.dp.CpOcorrenciaFeriado.class, fI);
		d.addClass(br.gov.jfrj.siga.dp.CpAplicacaoFeriado.class, fI);
		d.addClass(br.gov.jfrj.siga.dp.CpLocalidade.class, fI);
		d.addClass(br.gov.jfrj.siga.dp.CpUF.class, fI);
		d.addClass(br.gov.jfrj.siga.dp.CpPersonalizacao.class, fI);
		d.addClass(br.gov.jfrj.siga.cp.CpConfiguracao.class, fI);
		d.addClass(br.gov.jfrj.siga.cp.CpServico.class, fI);
		d.addClass(br.gov.jfrj.siga.cp.CpTipoGrupo.class, fI);
		d.addClass(br.gov.jfrj.siga.cp.CpGrupo.class, fI);
		d.addClass(br.gov.jfrj.siga.dp.CpTipoLotacao.class, fI);
		d.addClass(br.gov.jfrj.siga.cp.CpTipoPapel.class, fI);
		d.addClass(br.gov.jfrj.siga.cp.CpPapel.class, fI);
		d.addClass(br.gov.jfrj.siga.cp.CpTipoServico.class, fI);
		d.addClass(br.gov.jfrj.siga.cp.CpTipoIdentidade.class, fI);
		d.addClass(br.gov.jfrj.siga.cp.CpIdentidade.class, fI);

		d.createGraphML(""target/siga.graphml"", true, false);
	}

	public void testGeraDesenhoEx() throws Exception {
		Diagram d = new Diagram();
		d.setfMergeWithAbstractClass(true);
		boolean fI = true;

		d.addClass(DpPessoa.class, fI);
		d.addClass(DpLotacao.class, fI);
		d.addClass(DpFuncaoConfianca.class, fI);
		d.addClass(DpCargo.class, fI);
		d.addClass(CpPapel.class, fI);
		d.addClass(CpOrgaoUsuario.class, fI);
		d.addClass(br.gov.jfrj.siga.dp.CpOrgao.class, fI);
		d.addClass(br.gov.jfrj.siga.dp.DpSubstituicao.class, fI);
		d.addClass(br.gov.jfrj.siga.dp.CpFeriado.class, fI);
		d.addClass(br.gov.jfrj.siga.dp.CpOcorrenciaFeriado.class, fI);
		d.addClass(br.gov.jfrj.siga.dp.CpAplicacaoFeriado.class, fI);
		d.addClass(br.gov.jfrj.siga.dp.CpLocalidade.class, fI);
		d.addClass(br.gov.jfrj.siga.dp.CpUF.class, fI);
		d.addClass(br.gov.jfrj.siga.dp.CpPersonalizacao.class, fI);
		d.addClass(br.gov.jfrj.siga.cp.CpConfiguracao.class, fI);
		d.addClass(br.gov.jfrj.siga.cp.CpServico.class, fI);
		d.addClass(br.gov.jfrj.siga.cp.CpTipoGrupo.class, fI);
		d.addClass(br.gov.jfrj.siga.cp.CpGrupo.class, fI);
		d.addClass(br.gov.jfrj.siga.dp.CpTipoLotacao.class, fI);
		d.addClass(br.gov.jfrj.siga.cp.CpTipoPapel.class, fI);
		d.addClass(br.gov.jfrj.siga.cp.CpPapel.class, fI);
		d.addClass(br.gov.jfrj.siga.cp.CpTipoServico.class, fI);
		d.addClass(br.gov.jfrj.siga.cp.CpTipoIdentidade.class, fI);
		d.addClass(br.gov.jfrj.siga.cp.CpIdentidade.class, fI);

		d.addClass(br.gov.jfrj.siga.ex.ExMobil.class, fI);
		d.addClass(br.gov.jfrj.siga.ex.ExDocumento.class, fI);
		d.addClass(br.gov.jfrj.siga.ex.ExFormaDocumento.class, fI);
		d.addClass(br.gov.jfrj.siga.ex.ExConfiguracao.class, fI);
		d.addClass(br.gov.jfrj.siga.ex.ExClassificacao.class, fI);
		d.addClass(br.gov.jfrj.siga.ex.ExModelo.class, fI);
		d.addClass(br.gov.jfrj.siga.ex.ExTemporalidade.class, fI);
		d.addClass(br.gov.jfrj.siga.ex.ExTipoDespacho.class, fI);
		d.addClass(br.gov.jfrj.siga.ex.ExTipoDestinacao.class, fI);
		d.addClass(br.gov.jfrj.siga.ex.ExTipoDocumento.class, fI);
		d.addClass(br.gov.jfrj.siga.ex.ExNivelAcesso.class, fI);
		d.addClass(br.gov.jfrj.siga.ex.ExEstadoDoc.class, fI);
		d.addClass(br.gov.jfrj.siga.ex.ExPreenchimento.class, fI);
		d.addClass(br.gov.jfrj.siga.ex.ExTipoFormaDoc.class, fI);
		d.addClass(br.gov.jfrj.siga.ex.ExTipoMovimentacao.class, fI);
		d.addClass(br.gov.jfrj.siga.ex.ExVia.class, fI);
		d.addClass(br.gov.jfrj.siga.ex.ExMovimentacao.class, fI);
		d.addClass(br.gov.jfrj.siga.ex.ExTpDocPublicacao.class, fI);
		d.addClass(br.gov.jfrj.siga.ex.ExTipoMobil.class, fI);
		d.addClass(br.gov.jfrj.siga.ex.BIE.ExBoletimDoc.class, fI);
		d.addClass(br.gov.jfrj.siga.ex.ExPapel.class, fI);
		d.addClass(br.gov.jfrj.siga.ex.ExEmailNotificacao.class, fI);
		d.addClass(br.gov.jfrj.siga.dp.CpMarcador.class, fI);
		d.addClass(br.gov.jfrj.siga.dp.CpTipoMarca.class, fI);

		d.addClass(br.gov.jfrj.siga.ex.ExMarca.class, fI);
		d.addClass(br.gov.jfrj.siga.dp.CpMarca.class, fI);

		d.createGraphML(""target/siga-ex.graphml"", false, false);
	}

}
",java
"/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * ""License""); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.hadoop.test;

import org.apache.hadoop.fs.DFSCIOTest;
import org.apache.hadoop.fs.DistributedFSCheck;
import org.apache.hadoop.fs.JHLogAnalyzer;
import org.apache.hadoop.fs.TestDFSIO;
import org.apache.hadoop.fs.TestFileSystem;
import org.apache.hadoop.fs.loadGenerator.DataGenerator;
import org.apache.hadoop.fs.loadGenerator.LoadGenerator;
import org.apache.hadoop.fs.loadGenerator.LoadGeneratorMR;
import org.apache.hadoop.fs.loadGenerator.StructureGenerator;
import org.apache.hadoop.fs.slive.SliveTest;
import org.apache.hadoop.hdfs.NNBench;
import org.apache.hadoop.hdfs.NNBenchWithoutMR;
import org.apache.hadoop.io.FileBench;
import org.apache.hadoop.io.TestSequenceFile;
import org.apache.hadoop.mapred.BigMapOutput;
import org.apache.hadoop.mapred.GenericMRLoadGenerator;
import org.apache.hadoop.mapred.MRBench;
import org.apache.hadoop.mapred.ReliabilityTest;
import org.apache.hadoop.mapred.SortValidator;
import org.apache.hadoop.mapred.TestMapRed;
import org.apache.hadoop.mapred.TestSequenceFileInputFormat;
import org.apache.hadoop.mapred.TestTextInputFormat;
import org.apache.hadoop.mapred.ThreadedMapBenchmark;
import org.apache.hadoop.mapreduce.FailJob;
import org.apache.hadoop.mapreduce.GrowingSleepJob;
import org.apache.hadoop.mapreduce.LargeSorter;
import org.apache.hadoop.mapreduce.MiniHadoopClusterManager;
import org.apache.hadoop.mapreduce.SleepJob;
import org.apache.hadoop.mapreduce.TimelineServicePerformance;
import org.apache.hadoop.util.ProgramDriver;

/**
 * Driver for Map-reduce tests.
 *
 */
public class MapredTestDriver {

  private ProgramDriver pgd;

  public MapredTestDriver() {
    this(new ProgramDriver());
  }

  public MapredTestDriver(ProgramDriver pgd) {
    this.pgd = pgd;
    try {
      pgd.addClass(""testsequencefile"", TestSequenceFile.class,
      ""A test for flat files of binary key value pairs."");
      pgd.addClass(""threadedmapbench"", ThreadedMapBenchmark.class,
          ""A map/reduce benchmark that compares the performance "" +
          ""of maps with multiple spills over maps with 1 spill"");
      pgd.addClass(""mrbench"", MRBench.class,
          ""A map/reduce benchmark that can create many small jobs"");
      pgd.addClass(""mapredtest"", TestMapRed.class, ""A map/reduce test check."");
      pgd.addClass(""testsequencefileinputformat"",
          TestSequenceFileInputFormat.class,
          ""A test for sequence file input format."");
      pgd.addClass(""testtextinputformat"", TestTextInputFormat.class,
          ""A test for text input format."");
      pgd.addClass(""testmapredsort"", SortValidator.class,
          ""A map/reduce program that validates the "" +
          ""map-reduce framework's sort."");
      pgd.addClass(""testbigmapoutput"", BigMapOutput.class,
          ""A map/reduce program that works on a very big "" +
          ""non-splittable file and does identity map/reduce"");
      pgd.addClass(""loadgen"", GenericMRLoadGenerator.class,
          ""Generic map/reduce load generator"");
      pgd.addClass(""MRReliabilityTest"", ReliabilityTest.class,
          ""A program that tests the reliability of the MR framework by "" +
          ""injecting faults/failures"");
      pgd.addClass(""fail"", FailJob.class, ""a job that always fails"");
      pgd.addClass(""sleep"", SleepJob.class,
                   ""A job that sleeps at each map and reduce task."");
      pgd.addClass(""gsleep"", GrowingSleepJob.class,
          ""A sleep job whose mappers create 1MB buffer for every record."");
      pgd.addClass(""timelineperformance"", TimelineServicePerformance.class,
                   ""A job that launches mappers to test timeline service "" +
                   ""performance."");
      pgd.addClass(""nnbench"", NNBench.class,
          ""A benchmark that stresses the namenode w/ MR."");
      pgd.addClass(""nnbenchWithoutMR"", NNBenchWithoutMR.class,
          ""A benchmark that stresses the namenode w/o MR."");
      pgd.addClass(""testfilesystem"", TestFileSystem.class,
          ""A test for FileSystem read/write."");
      pgd.addClass(TestDFSIO.class.getSimpleName(), TestDFSIO.class,
          ""Distributed i/o benchmark."");
      pgd.addClass(""DFSCIOTest"", DFSCIOTest.class, """" +
          ""Distributed i/o benchmark of libhdfs."");
      pgd.addClass(""DistributedFSCheck"", DistributedFSCheck.class,
          ""Distributed checkup of the file system consistency."");
      pgd.addClass(""filebench"", FileBench.class,
          ""Benchmark SequenceFile(Input|Output)Format "" +
          ""(block,record compressed and uncompressed), "" +
          ""Text(Input|Output)Format (compressed and uncompressed)"");
      pgd.addClass(JHLogAnalyzer.class.getSimpleName(), JHLogAnalyzer.class,
          ""Job History Log analyzer."");
      pgd.addClass(SliveTest.class.getSimpleName(), SliveTest.class,
          ""HDFS Stress Test and Live Data Verification."");
      pgd.addClass(""minicluster"", MiniHadoopClusterManager.class,
      ""Single process HDFS and MR cluster."");
      pgd.addClass(""largesorter"", LargeSorter.class,
          ""Large-Sort tester"");
      pgd.addClass(""NNloadGenerator"", LoadGenerator.class,
              ""Generate load on Namenode using NN loadgenerator run WITHOUT MR"");
      pgd.addClass(""NNloadGeneratorMR"", LoadGeneratorMR.class,
          ""Generate load on Namenode using NN loadgenerator run as MR job"");
      pgd.addClass(""NNstructureGenerator"", StructureGenerator.class,
          ""Generate the structure to be used by NNdataGenerator"");
      pgd.addClass(""NNdataGenerator"", DataGenerator.class,
          ""Generate the data to be used by NNloadGenerator"");
    } catch(Throwable e) {
      e.printStackTrace();
    }
  }

  public void run(String argv[]) {
    int exitCode = -1;
    try {
      exitCode = pgd.run(argv);
    } catch(Throwable e) {
      e.printStackTrace();
    }
    System.exit(exitCode);
  }

  public static void main(String argv[]){
    new MapredTestDriver().run(argv);
  }
}

",java
"package br.gov.jfrj.siga.sr.util;

import br.gov.jfrj.siga.model.Diagram;
import br.gov.jfrj.siga.sr.model.SrAcao;
import br.gov.jfrj.siga.sr.model.SrArquivo;
import br.gov.jfrj.siga.sr.model.SrItemConfiguracao;
import br.gov.jfrj.siga.sr.model.SrLista;
import br.gov.jfrj.siga.sr.model.SrMovimentacao;
import br.gov.jfrj.siga.sr.model.SrPergunta;
import br.gov.jfrj.siga.sr.model.SrPesquisa;
import br.gov.jfrj.siga.sr.model.SrResposta;
import br.gov.jfrj.siga.sr.model.SrSolicitacao;
import br.gov.jfrj.siga.sr.model.SrTipoMovimentacao;
import br.gov.jfrj.siga.sr.model.SrTipoPergunta;

public class DoDiagram {

	public static void testGeraDiagramaGC() throws Exception {
		Diagram d = new Diagram();
		d.setfMergeWithAbstractClass(true);
		boolean fI = true;

		//d.addClass(DpPessoa.class, true);
		//d.addClass(DpLotacao.class, true);
		//d.addClass(CpOrgaoUsuario.class, true);
		//d.addClass(CpComplexo.class, true);
		//d.addClass(CpMarcador.class, true);

		//d.addClass(SrConfiguracao.class, true);
		d.addClass(SrMovimentacao.class, false);
		d.addClass(SrArquivo.class, false);
		//d.addClass(SrAtributo.class, false);
		//d.addClass(SrFormaAcompanhamento.class, false);
		d.addClass(SrItemConfiguracao.class, false);
		d.addClass(SrAcao.class, false);
		//d.addClass(SrMarca.class, true);
		d.addClass(SrSolicitacao.class, false);
		//d.addClass(SrTipoAtributo.class, false);
		//d.addClass(SrGrauSatisfacao.class, false);
		//d.addClass(SrGravidade.class, false);
		d.addClass(SrLista.class, false);
		d.addClass(SrPergunta.class, false);
		d.addClass(SrPesquisa.class, false);
		d.addClass(SrResposta.class, false);
		//d.addClass(SrTendencia.class, false);
		d.addClass(SrTipoMovimentacao.class, false);
		d.addClass(SrTipoPergunta.class, false);
		//d.addClass(SrUrgencia.class, false);

		d.createGraphML(""sigasr.graphml"", true, false);
	}

	/**
	 * @param args
	 * @throws Exception
	 */
	public static void main(String[] args) throws Exception {
		testGeraDiagramaGC();
	}

}
",java
"/**
 * ************************************************************************
 * * The contents of this file are subject to the MRPL 1.2
 * * (the  ""License""),  being   the  Mozilla   Public  License
 * * Version 1.1  with a permitted attribution clause; you may not  use this
 * * file except in compliance with the License. You  may  obtain  a copy of
 * * the License at http://www.floreantpos.org/license.html
 * * Software distributed under the License  is  distributed  on  an ""AS IS""
 * * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * * License for the specific  language  governing  rights  and  limitations
 * * under the License.
 * * The Original Code is FLOREANT POS.
 * * The Initial Developer of the Original Code is OROCUBE LLC
 * * All portions are Copyright (C) 2015 OROCUBE LLC
 * * All Rights Reserved.
 * ************************************************************************
 */
package com.floreantpos.model.dao;

import java.sql.Connection;

import org.hibernate.Session;
import org.hibernate.cfg.AnnotationConfiguration;
import org.hibernate.cfg.Configuration;

import com.floreantpos.Database;
import com.floreantpos.config.AppConfig;
import com.floreantpos.model.ActionHistory;
import com.floreantpos.model.AttendenceHistory;
import com.floreantpos.model.CashDrawer;
import com.floreantpos.model.CashDrawerResetHistory;
import com.floreantpos.model.CookingInstruction;
import com.floreantpos.model.Currency;
import com.floreantpos.model.CurrencyBalance;
import com.floreantpos.model.CustomPayment;
import com.floreantpos.model.Customer;
import com.floreantpos.model.DataUpdateInfo;
import com.floreantpos.model.DeliveryAddress;
import com.floreantpos.model.DeliveryCharge;
import com.floreantpos.model.DeliveryConfiguration;
import com.floreantpos.model.DeliveryInstruction;
import com.floreantpos.model.Discount;
import com.floreantpos.model.DrawerAssignedHistory;
import com.floreantpos.model.DrawerPullReport;
import com.floreantpos.model.EmployeeInOutHistory;
import com.floreantpos.model.GlobalConfig;
import com.floreantpos.model.Gratuity;
import com.floreantpos.model.InventoryGroup;
import com.floreantpos.model.InventoryItem;
import com.floreantpos.model.InventoryLocation;
import com.floreantpos.model.InventoryMetaCode;
import com.floreantpos.model.InventoryTransaction;
import com.floreantpos.model.InventoryUnit;
import com.floreantpos.model.InventoryVendor;
import com.floreantpos.model.InventoryWarehouse;
import com.floreantpos.model.KitchenTicket;
import com.floreantpos.model.KitchenTicketItem;
import com.floreantpos.model.MenuCategory;
import com.floreantpos.model.MenuGroup;
import com.floreantpos.model.MenuItem;
import com.floreantpos.model.MenuItemModifierGroup;
import com.floreantpos.model.MenuItemShift;
import com.floreantpos.model.MenuItemSize;
import com.floreantpos.model.MenuModifier;
import com.floreantpos.model.MenuModifierGroup;
import com.floreantpos.model.PackagingUnit;
import com.floreantpos.model.PayoutReason;
import com.floreantpos.model.PayoutRecepient;
import com.floreantpos.model.PizzaCrust;
import com.floreantpos.model.PizzaModifierPrice;
import com.floreantpos.model.PizzaPrice;
import com.floreantpos.model.PosTransaction;
import com.floreantpos.model.PrinterConfiguration;
import com.floreantpos.model.PrinterGroup;
import com.floreantpos.model.PurchaseOrder;
import com.floreantpos.model.Recepie;
import com.floreantpos.model.RecepieItem;
import com.floreantpos.model.Restaurant;
import com.floreantpos.model.Shift;
import com.floreantpos.model.ShopFloor;
import com.floreantpos.model.ShopFloorTemplate;
import com.floreantpos.model.ShopTable;
import com.floreantpos.model.ShopTableType;
import com.floreantpos.model.TableBookingInfo;
import com.floreantpos.model.Tax;
import com.floreantpos.model.Terminal;
import com.floreantpos.model.TerminalPrinters;
import com.floreantpos.model.Ticket;
import com.floreantpos.model.TicketDiscount;
import com.floreantpos.model.TicketItem;
import com.floreantpos.model.TicketItemDiscount;
import com.floreantpos.model.TicketItemModifier;
import com.floreantpos.model.TicketItemModifierGroup;
import com.floreantpos.model.User;
import com.floreantpos.model.UserPermission;
import com.floreantpos.model.UserType;
import com.floreantpos.model.VirtualPrinter;
import com.floreantpos.model.VoidReason;
import com.floreantpos.model.ZipCodeVsDeliveryCharge;

public abstract class _RootDAO extends com.floreantpos.model.dao._BaseRootDAO {

	/*
	 * If you are using lazy loading, uncomment this Somewhere, you should call
	 * RootDAO.closeCurrentThreadSessions(); public void closeSession (Session
	 * session) { // do nothing here because the session will be closed later }
	 */

	/*
	 * If you are pulling the SessionFactory from a JNDI tree, uncomment this
	 * protected SessionFactory getSessionFactory(String configFile) { // If you
	 * have a single session factory, ignore the configFile parameter //
	 * Otherwise, you can set a meta attribute under the class node called
	 * ""config-file"" which // will be passed in here so you can tell what
	 * session factory an individual mapping file // belongs to return
	 * (SessionFactory) new
	 * InitialContext().lookup(""java:/{SessionFactoryName}""); }
	 */

	public static void initialize(String configFileName, Configuration configuration) {
		com.floreantpos.model.dao._RootDAO.setSessionFactory(configuration.buildSessionFactory());
	}

	public static Configuration getNewConfiguration(String configFileName) {
		AnnotationConfiguration configuration = new AnnotationConfiguration();
		configuration = configuration.addClass(ActionHistory.class);
		configuration = configuration.addClass(AttendenceHistory.class);
		configuration = configuration.addClass(CashDrawerResetHistory.class);
		configuration = configuration.addClass(CookingInstruction.class);
		configuration = configuration.addClass(Discount.class);
		configuration = configuration.addClass(Gratuity.class);
		configuration = configuration.addClass(MenuCategory.class);
		configuration = configuration.addClass(MenuGroup.class);
		configuration = configuration.addClass(MenuItem.class);
		configuration = configuration.addClass(MenuItemModifierGroup.class);
		configuration = configuration.addClass(MenuItemShift.class);
		configuration = configuration.addClass(MenuModifier.class);
		configuration = configuration.addClass(MenuModifierGroup.class);
		configuration = configuration.addClass(PayoutReason.class);
		configuration = configuration.addClass(PayoutRecepient.class);
		configuration = configuration.addClass(Restaurant.class);
		configuration = configuration.addClass(Shift.class);
		configuration = configuration.addClass(Tax.class);
		configuration = configuration.addClass(Terminal.class);
		configuration = configuration.addClass(Ticket.class);
		configuration = configuration.addClass(KitchenTicket.class);
		configuration = configuration.addClass(TicketDiscount.class);
		configuration = configuration.addClass(TicketItem.class);
		configuration = configuration.addClass(TicketItemModifier.class);
		configuration = configuration.addClass(TicketItemModifierGroup.class);
		configuration = configuration.addClass(TicketItemDiscount.class);
		configuration = configuration.addClass(KitchenTicketItem.class);
		configuration = configuration.addClass(PosTransaction.class);
		configuration = configuration.addClass(User.class);
		configuration = configuration.addClass(VirtualPrinter.class);
		configuration = configuration.addClass(TerminalPrinters.class);
		configuration = configuration.addClass(VoidReason.class);
		configuration = configuration.addClass(DrawerPullReport.class);
		configuration = configuration.addClass(PrinterConfiguration.class);
		configuration = configuration.addClass(UserPermission.class);
		configuration = configuration.addClass(UserType.class);
		configuration = configuration.addClass(Customer.class);
		configuration = configuration.addClass(PurchaseOrder.class);
		configuration = configuration.addClass(ZipCodeVsDeliveryCharge.class);
		configuration = configuration.addClass(ShopFloor.class);
		configuration = configuration.addClass(ShopFloorTemplate.class);
		configuration = configuration.addClass(ShopTable.class);
		configuration = configuration.addClass(ShopTableType.class);
		configuration = configuration.addClass(PrinterGroup.class);
		configuration = configuration.addClass(DrawerAssignedHistory.class);
		configuration = configuration.addClass(DataUpdateInfo.class);
		configuration = configuration.addClass(TableBookingInfo.class);
		configuration = configuration.addClass(CustomPayment.class);
		configuration = configuration.addClass(com.floreantpos.model.OrderType.class);
		configuration = configuration.addClass(DeliveryAddress.class);
		configuration = configuration.addClass(DeliveryInstruction.class);
		configuration = configuration.addClass(DeliveryCharge.class);
		configuration = configuration.addClass(DeliveryConfiguration.class);
		configuration = configuration.addClass(EmployeeInOutHistory.class);
		configuration = configuration.addClass(Currency.class);
		configuration = configuration.addClass(CashDrawer.class);
		configuration = configuration.addClass(CurrencyBalance.class);
		configuration = configuration.addClass(GlobalConfig.class);
		configuration = configuration.addClass(MenuItemSize.class);
		configuration = configuration.addClass(PizzaCrust.class);
		configuration = configuration.addClass(PizzaPrice.class);
		configuration = configuration.addClass(PizzaModifierPrice.class);


		configuration = configureInventoryClasses(configuration);

		Database defaultDatabase = AppConfig.getDefaultDatabase();

		configuration = configuration.setProperty(""hibernate.dialect"", defaultDatabase.getHibernateDialect()); //$NON-NLS-1$
		configuration = configuration.setProperty(""hibernate.connection.driver_class"", defaultDatabase.getHibernateConnectionDriverClass()); //$NON-NLS-1$

		configuration = configuration.setProperty(""hibernate.connection.url"", AppConfig.getConnectString()); //$NON-NLS-1$
		configuration = configuration.setProperty(""hibernate.connection.username"", AppConfig.getDatabaseUser()); //$NON-NLS-1$
		configuration = configuration.setProperty(""hibernate.connection.password"", AppConfig.getDatabasePassword()); //$NON-NLS-1$
		configuration = configuration.setProperty(""hibernate.hbm2ddl.auto"", ""update""); //$NON-NLS-1$ //$NON-NLS-2$
		configuration = configuration.setProperty(""hibernate.connection.autocommit"", ""false""); //$NON-NLS-1$ //$NON-NLS-2$
		configuration = configuration.setProperty(""hibernate.max_fetch_depth"", ""3""); //$NON-NLS-1$ //$NON-NLS-2$
		configuration = configuration.setProperty(""hibernate.show_sql"", ""false""); //$NON-NLS-1$ //$NON-NLS-2$
		configuration = configuration.setProperty(""hibernate.connection.isolation"", String.valueOf(Connection.TRANSACTION_READ_COMMITTED)); //$NON-NLS-1$

		configuration = configuration.setProperty(""hibernate.c3p0.min_size"", ""5""); //$NON-NLS-1$ //$NON-NLS-2$
		configuration = configuration.setProperty(""hibernate.c3p0.max_size"", ""10""); //$NON-NLS-1$ //$NON-NLS-2$
		configuration = configuration.setProperty(""hibernate.c3p0.timeout"", ""60""); //$NON-NLS-1$ //$NON-NLS-2$

		configuration = configuration.setProperty(""hibernate.c3p0.max_statements"", ""50""); //$NON-NLS-1$ //$NON-NLS-2$

		configuration = configuration.setProperty(""hibernate.c3p0.checkoutTimeout"", ""15000""); //$NON-NLS-1$ //$NON-NLS-2$
		configuration = configuration.setProperty(""hibernate.c3p0.acquireRetryAttempts"", ""1""); //$NON-NLS-1$ //$NON-NLS-2$
		//configuration = configuration.setProperty(""hibernate.c3p0.acquireRetryDelay"", ""100""); //$NON-NLS-1$ //$NON-NLS-2$

		//        configuration = configuration.setProperty(""hibernate.c3p0.idle_test_period"", ""3000"");
		//        configuration = configuration.setProperty(""hibernate.c3p0.validate"", ""true""); //$NON-NLS-1$ //$NON-NLS-2$
		configuration = configuration.setProperty(""hibernate.c3p0.breakAfterAcquireFailure"", ""false""); //$NON-NLS-1$ //$NON-NLS-2$

		return configuration;
	}

	private static AnnotationConfiguration configureInventoryClasses(AnnotationConfiguration configuration) {
		configuration = configuration.addClass(InventoryGroup.class);
		configuration = configuration.addClass(InventoryItem.class);
		configuration = configuration.addClass(InventoryLocation.class);
		configuration = configuration.addClass(InventoryMetaCode.class);
		configuration = configuration.addClass(InventoryTransaction.class);
		configuration = configuration.addClass(InventoryUnit.class);
		configuration = configuration.addClass(InventoryVendor.class);
		configuration = configuration.addClass(InventoryWarehouse.class);
		configuration = configuration.addClass(Recepie.class);
		configuration = configuration.addClass(RecepieItem.class);
		configuration = configuration.addClass(PackagingUnit.class);

		return configuration;
	}

	public static Configuration reInitialize() {
		Configuration configuration = getNewConfiguration(null);
		com.floreantpos.model.dao._RootDAO.setSessionFactory(configuration.buildSessionFactory());

		return configuration;
	}

	public void refresh(Object obj) {
		Session session = createNewSession();
		super.refresh(obj, session);
		session.close();
	}
}",java
"/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * ""License""); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.hadoop.examples;

import org.apache.hadoop.examples.dancing.DistributedPentomino;
import org.apache.hadoop.examples.dancing.Sudoku;
import org.apache.hadoop.examples.pi.DistBbp;
import org.apache.hadoop.examples.terasort.TeraGen;
import org.apache.hadoop.examples.terasort.TeraSort;
import org.apache.hadoop.examples.terasort.TeraValidate;
import org.apache.hadoop.util.ProgramDriver;

/**
 * A description of an example program based on its class and a 
 * human-readable description.
 */
public class ExampleDriver {
  
  public static void main(String argv[]){
    int exitCode = -1;
    ProgramDriver pgd = new ProgramDriver();
    try {
      pgd.addClass(""wordcount"", WordCount.class, 
                   ""A map/reduce program that counts the words in the input files."");
      pgd.addClass(""wordmean"", WordMean.class,
                   ""A map/reduce program that counts the average length of the words in the input files."");
      pgd.addClass(""wordmedian"", WordMedian.class,
                   ""A map/reduce program that counts the median length of the words in the input files."");
      pgd.addClass(""wordstandarddeviation"", WordStandardDeviation.class,
                   ""A map/reduce program that counts the standard deviation of the length of the words in the input files."");
      pgd.addClass(""aggregatewordcount"", AggregateWordCount.class, 
                   ""An Aggregate based map/reduce program that counts the words in the input files."");
      pgd.addClass(""aggregatewordhist"", AggregateWordHistogram.class, 
                   ""An Aggregate based map/reduce program that computes the histogram of the words in the input files."");
      pgd.addClass(""grep"", Grep.class, 
                   ""A map/reduce program that counts the matches of a regex in the input."");
      pgd.addClass(""randomwriter"", RandomWriter.class, 
                   ""A map/reduce program that writes 10GB of random data per node."");
      pgd.addClass(""randomtextwriter"", RandomTextWriter.class, 
      ""A map/reduce program that writes 10GB of random textual data per node."");
      pgd.addClass(""sort"", Sort.class, ""A map/reduce program that sorts the data written by the random writer."");

      pgd.addClass(""pi"", QuasiMonteCarlo.class, QuasiMonteCarlo.DESCRIPTION);
      pgd.addClass(""bbp"", BaileyBorweinPlouffe.class, BaileyBorweinPlouffe.DESCRIPTION);
      pgd.addClass(""distbbp"", DistBbp.class, DistBbp.DESCRIPTION);

      pgd.addClass(""pentomino"", DistributedPentomino.class,
      ""A map/reduce tile laying program to find solutions to pentomino problems."");
      pgd.addClass(""secondarysort"", SecondarySort.class,
                   ""An example defining a secondary sort to the reduce."");
      pgd.addClass(""sudoku"", Sudoku.class, ""A sudoku solver."");
      pgd.addClass(""join"", Join.class, ""A job that effects a join over sorted, equally partitioned datasets"");
      pgd.addClass(""multifilewc"", MultiFileWordCount.class, ""A job that counts words from several files."");
      pgd.addClass(""dbcount"", DBCountPageView.class, ""An example job that count the pageview counts from a database."");
      pgd.addClass(""teragen"", TeraGen.class, ""Generate data for the terasort"");
      pgd.addClass(""terasort"", TeraSort.class, ""Run the terasort"");
      pgd.addClass(""teravalidate"", TeraValidate.class, ""Checking results of terasort"");
      exitCode = pgd.run(argv);
    }
    catch(Throwable e){
      e.printStackTrace();
    }
    
    System.exit(exitCode);
  }
}
	
",java
"package com.hiernate.util;          		//���ཨ��com.hibernate.util����
import org.hibernate.Session;       		//����org.hibernate.Session��
import org.hibernate.SessionFactory; 		//����org.hibernate.SessionFactory��
import org.hibernate.cfg.Configuration; 	//����org.hibernate.cfg.Configuration��
import com.hiernate.persistence.Bm;     	//����com.hiernate.persistence.Bm��
import com.hiernate.persistence.Chuchai;	//����com.hiernate.persistence.Chuchai��
import com.hiernate.persistence.Meeting;	//����com.hiernate.persistence.Meeting��
import com.hiernate.persistence.Menu;		//����com.hiernate.persistence.Menu��
import com.hiernate.persistence.Onduty;		//����com.hiernate.persistence.Onduty��
import com.hiernate.persistence.Person;		//����com.hiernate.persistence.Person��
import com.hiernate.persistence.Placard;	//����com.hiernate.persistence.Placard��
import com.hiernate.persistence.Qingjia;	//����com.hiernate.persistence.Qingjia��
import com.hiernate.persistence.Qiye;		//����com.hiernate.persistence.Qiye��
import com.hiernate.persistence.Shenhe;		//����com.hiernate.persistence.Shenhe��
import com.hiernate.persistence.TongXunAdd;	//����com.hiernate.persistence.TongXunAdd��
import com.hiernate.persistence.Tongxun;	//����com.hiernate.persistence.Tongxun��
import com.hiernate.persistence.User;		//����com.hiernate.persistence.User��
import com.hiernate.persistence.Waichu;		//����com.hiernate.persistence.Waichu��
public class GetHibernate {
	
	private static SessionFactory sf = null;//����SessionFactoryʵ��
	static {
		try {
			Configuration conf = new Configuration().addClass(User.class)
					.addClass(Menu.class).addClass(Meeting.class)
					.addClass(Placard.class).addClass(Waichu.class)
					.addClass(Qingjia.class).addClass(Chuchai.class)
					.addClass(Onduty.class).addClass(Qiye.class)
					.addClass(Bm.class).addClass(Person.class)
					.addClass(Shenhe.class).addClass(TongXunAdd.class)
					.addClass(Tongxun.class);
			 sf = conf.buildSessionFactory();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	//���Hibernate�������ļ�ΪXML��ʽ��ֻ���������ļ�������ӳ���ļ����ڳ����в��ص���Configuration
	//���addClass����������ӳ���ļ����������£�
	// SessionFactory sf = new Configuration()
	//                     .configure().buildSessionFactory()
   public Session openSession(){			//��SessionΪ����ֵ������Session����
	   Session session = sf.openSession();   //SessionFactory��openSession()�������Sessionʵ��
	   return session;
   }
   public void closeSession(Session session){  //�����ر�Session����������ΪSessionʵ��
	   if(session != null){                //close()�����ر�session
		   session.close();
	   }
   }
  }
",java
"/*
 * Parabuild CI licenses this file to You under the LGPL 2.1
 * (the ""License""); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *      https://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.parabuild.ci.services;

import net.sf.hibernate.HibernateException;
import net.sf.hibernate.Query;
import net.sf.hibernate.SessionFactory;
import net.sf.hibernate.cfg.Configuration;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.quartz.Scheduler;
import org.quartz.SchedulerException;
import org.quartz.SchedulerFactory;
import org.quartz.impl.StdSchedulerFactory;
import org.parabuild.ci.common.IoUtils;
import org.parabuild.ci.common.StringUtils;
import org.parabuild.ci.configuration.BuildConfigCloner;
import org.parabuild.ci.configuration.ConfigurationConstants;
import org.parabuild.ci.configuration.ConfigurationManager;
import org.parabuild.ci.configuration.PersistanceConstants;
import org.parabuild.ci.configuration.SystemConfigurationManager;
import org.parabuild.ci.configuration.SystemConfigurationManagerFactory;
import org.parabuild.ci.configuration.SystemConstants;
import org.parabuild.ci.configuration.TransactionCallback;
import org.parabuild.ci.object.*;
import org.parabuild.ci.statistics.StatisticsManager;
import org.parabuild.ci.statistics.StatisticsManagerFactory;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;

/**
 * @noinspection StaticFieldReferencedViaSubclass
 */
public final class ConfigurationService implements Service {

  private static final Log log = LogFactory.getLog(ConfigurationService.class);
  private SessionFactory sessionFactory = null;


  private byte status = SERVICE_STATUS_NOT_STARTED;


  /**
   * Returns serivce status
   *
   * @return service status
   */
  public byte getServiceStatus() {
    return status;
  }


  public void shutdownService() {
    try {
      shutdownQuarts();
    } catch (Exception e) {
      System.err.println(""Error while shutting down configuration service: "" + StringUtils.toString(e)); // NOPMD
    }
  }


  private void shutdownQuarts() throws SchedulerException {
    final SchedulerFactory factory = new StdSchedulerFactory();
    final Scheduler scheduler = factory.getScheduler();
    scheduler.shutdown();
  }


  public ServiceName serviceName() {
    return ServiceName.CONFIGURATION_SERVICE;
  }


  public void startupService() {
    try {
      initConfigManager();
      initQuartz();
      status = SERVICE_STATUS_STARTED;
      runPostStartUpActions();
    } catch (Exception e) {
      log.error(""Error while starting configuration service"", e);
    }
  }


  /**
   * Starts up Quartz scheduler.
   */
  private void initQuartz() throws SchedulerException {
    final SchedulerFactory factory = new StdSchedulerFactory();
    final Scheduler scheduler = factory.getScheduler();
    scheduler.start();
  }


  /**
   * Inits configuration manager
   */
  private void initConfigManager() throws HibernateException, IOException {

    // get props made from config/hibernate.properties
    final Properties props = new Properties();
    props.load(IoUtils.stringToInputStream(IoUtils.getResourceAsString(""hibernate.properties"")));

    // init hibernate
    final Configuration cfg = new Configuration();
    cfg.setProperties(props);
    cfg.setProperty(""hibernate.connection.url"", ""jdbc:hsqldb:"" + ConfigurationConstants.DATABASE_HOME.getAbsolutePath() + "";ifexists=true"");
    cfg.setProperty(""hibernate.connection.password"", PersistanceConstants.DATABASE_PASSWORD);
    cfg.setProperty(""hibernate.connection.username"", PersistanceConstants.DATABASE_USER_NAME);
    cfg.addClass(BuildConfig.class)
            .addClass(User.class)
            .addClass(SystemProperty.class)
            .addClass(VCSUserToEmailMap.class)
            .addClass(ScheduleProperty.class)
            .addClass(LabelProperty.class)
            .addClass(SourceControlSetting.class)
            .addClass(BuildRun.class)
            .addClass(StepRun.class)
            .addClass(StepLog.class)
            .addClass(Change.class)
            .addClass(ChangeList.class)
            .addClass(BuildRunParticipant.class)
            .addClass(ScheduleItem.class)
            .addClass(BuildConfigAttribute.class)
            .addClass(BuildWatcher.class)
            .addClass(BuildChangeList.class)
            .addClass(LogConfig.class)
            .addClass(LogConfigProperty.class)
            .addClass(BuildRunAttribute.class)
            .addClass(IssueTracker.class)
            .addClass(IssueTrackerProperty.class)
            .addClass(Issue.class)
            .addClass(IssueAttribute.class)
            .addClass(ReleaseNote.class)
            .addClass(PendingIssue.class)
            .addClass(IssueChangeList.class)
            .addClass(StepRunAttribute.class)
            .addClass(Group.class)
            .addClass(UserGroup.class)
            .addClass(GroupBuildAccess.class)
            .addClass(ResultConfig.class)
            .addClass(ResultConfigProperty.class)
            .addClass(StepResult.class)
            .addClass(UserProperty.class)
            .addClass(ActiveBuild.class)
            .addClass(ActiveBuildAttribute.class)
            .addClass(HourlyStats.class)
            .addClass(DailyStats.class)
            .addClass(YearlyStats.class)
            .addClass(MonthlyStats.class)
            .addClass(HourlyDistribution.class)
            .addClass(WeekDayDistribution.class)
            .addClass(StartParameter.class)
            .addClass(DisplayGroup.class)
            .addClass(DisplayGroupBuild.class)
            .addClass(BuilderConfiguration.class)
            .addClass(AgentConfig.class)
            .addClass(BuilderAgent.class)
            .addClass(HourlyTestStats.class)
            .addClass(DailyTestStats.class)
            .addClass(MonthlyTestStats.class)
            .addClass(YearlyTestStats.class)
            .addClass(ResultGroup.class)
            .addClass(PublishedStepResult.class)
            .addClass(ResultGroupAccess.class)
            .addClass(BuildRunAction.class)
            .addClass(BuildRunDependence.class)
            .addClass(Project.class)
            .addClass(ProjectAttribute.class)
            .addClass(ProjectBuild.class)
            .addClass(ProjectResultGroup.class)
            .addClass(MergeServiceConfiguration.class)
            .addClass(MergeConfiguration.class)
            .addClass(MergeConfigurationAttribute.class)
            .addClass(Merge.class)
            .addClass(MergeSourceBuildRun.class)
            .addClass(MergeTargetBuildRun.class)
            .addClass(MergeChangeList.class)
            .addClass(BranchChangeList.class)
            .addClass(BranchBuildRunParticipant.class)
            .addClass(PromotionPolicy.class)
            .addClass(PromotionPolicyStep.class)
            .addClass(PromotionStepDependency.class)
            .addClass(TestSuiteName.class)
            .addClass(TestCaseName.class)
            .addClass(BuildRunTest.class)
            .addClass(GlobalVCSUserMap.class)
            .addClass(BuildChangeListAttribute.class)
            .addClass(BuildSequence.class);
    if (log.isDebugEnabled()) {
      log.debug(""creating session factory"");
    }
    sessionFactory = cfg.buildSessionFactory();
  }


  /**
   * Runs actions that might need to run at startup.
   */
  private void runPostStartUpActions() {
    if (Boolean.valueOf(System.getProperty(SystemConstants.SYSTEM_PROPERTY_POPULATE_BUILD_RUN_CONFIGS, ""false"")).booleanValue()) {
      // have to create missing build run configs.
      final List buildRunList = (List) ConfigurationManager.runInHibernate(new TransactionCallback() {
        public Object runInTransaction() throws Exception {
          final Collection result = new ArrayList(7777);
          // get all build runs that are tied to active builds
          // (i.e. don't have copy versions of build configs.
          // that is, we can use build run's config id being
          // cerain it is an active build config.

          // first process automatic
          final Query qNonRef = session.createQuery(
                  "" select br from BuildRun br, BuildConfig bc, ActiveBuild ab "" +
                          ""   where br.buildID = bc.buildID "" +
                          ""     and bc.buildID = ab.ID"" +
                          ""     and bc.sourceControl != ?"");
          qNonRef.setInteger(0, BuildConfig.SCM_REFERENCE);
          result.addAll(qNonRef.list());

          // than process sched/ref
          final Query qRef = session.createQuery(
                  "" select br from BuildRun br, BuildConfig bc, ActiveBuild ab "" +
                          ""   where br.buildID = bc.buildID "" +
                          ""     and bc.buildID = ab.ID"" +
                          ""     and bc.sourceControl = ?"");
          qRef.setInteger(0, BuildConfig.SCM_REFERENCE);
          result.addAll(qRef.list());

          // traverse result
          return result;
        }
      });

      final BuildConfigCloner cloner = new BuildConfigCloner();
      for (final Iterator i = buildRunList.iterator(); i.hasNext();) {
        final BuildRun buildRun = (BuildRun) i.next();
        // have to create missing build run configs.
        ConfigurationManager.runInHibernate(new TransactionCallback() {
          public Object runInTransaction() throws Exception {
            if (log.isDebugEnabled()) {
              log.debug(""Will create config for "" + buildRun);
            }
            // create build run config copy
            final BuildConfig newBuildRunConfig = cloner.createBuildRunConfig(buildRun.getBuildID(), ""null"");
            // set new ID
            buildRun.setBuildID(newBuildRunConfig.getBuildID());
            // save
            session.saveOrUpdate(buildRun);
            // flush - size of the session object can be pretty build.
            session.flush();
            if (log.isDebugEnabled()) {
              log.debug(""Created config "" + buildRun.getBuildRunID());
            }
            return null;
          }
        });
      }
    }

    // init statistics if requested by updater
    if (Boolean.valueOf(System.getProperty(SystemConstants.SYSTEM_PROPERTY_INIT_STATISTICS, ""false"")).booleanValue()) {
      final ConfigurationManager cm = ConfigurationManager.getInstance();
      for (final Iterator i = cm.getExistingBuildConfigs().iterator(); i.hasNext();) {
        final StatisticsManager statisticsManager = StatisticsManagerFactory
                .getStatisticsManager(((BuildConfig) i.next()).getActiveBuildID());
        statisticsManager.initStatistics();
      }
    }

    // enable advanced settings if missed. this is done for customers that
    // already used Parabuild when advanced seeting appeared - they should
    // have it enabled so that they don't face change of UI behaviour.
    final SystemConfigurationManager scm = SystemConfigurationManagerFactory.getManager();
    if (Boolean.valueOf(System.getProperty(SystemConstants.SYSTEM_PROPERTY_INIT_ADVANCED_SETTINGS, ""false"")).booleanValue()) {
      scm.createSystemPropertyIfDoesNotExist(SystemProperty.ENABLE_ADVANCED_BUILD_SETTING, SystemProperty.OPTION_CHECKED);
    }

    // Init retry settings
    if (Boolean.valueOf(System.getProperty(SystemConstants.SYSTEM_PROPERTY_INIT_RETRY_SETTINGS, ""false"")).booleanValue()) {
      scm.createSystemPropertyIfDoesNotExist(SystemProperty.RETRY_VCS_COMMAND_INTERVAL, SystemProperty.DEFAULT_RETRY_VCS_COMMAND_INTERVAL);
      scm.createSystemPropertyIfDoesNotExist(SystemProperty.RETRY_VCS_COMMAND_TIMES, SystemProperty.DEFAULT_RETRY_VCS_COMMAND_TIMES);
      scm.createSystemPropertyIfDoesNotExist(SystemProperty.RETRY_VCS_COMMAND_PATTERNS, SystemProperty.DEFAULT_RETRY_VCS_COMMAND_PATTERNS);
    }


    //
    // Set default values if not set
    //
    scm.createSystemPropertyIfDoesNotExist(SystemProperty.ROUND_ROBIN_LOAD_BALANCING, SystemProperty.OPTION_CHECKED);
    scm.createSystemPropertyIfDoesNotExist(SystemProperty.DEFAULT_BUILD_NAME_VALIDATION, SystemProperty.RADIO_SELECTED);
    scm.createSystemPropertyIfDoesNotExist(SystemProperty.DEFAULT_VARIABLE_NAME_VALIDATION, SystemProperty.RADIO_SELECTED);
    scm.createSystemPropertyIfDoesNotExist(SystemProperty.CUSTOM_BUILD_NAME_VALIDATION, SystemProperty.RADIO_UNSELECTED);
    scm.createSystemPropertyIfDoesNotExist(SystemProperty.CUSTOM_VARIABLE_NAME_VALIDATION, SystemProperty.RADIO_UNSELECTED);
    scm.createSystemPropertyIfDoesNotExist(SystemProperty.USE_XML_LOG_FORMAT_FOR_SUBVERSION, SystemProperty.OPTION_CHECKED);
    scm.createSystemPropertyIfDoesNotExist(SystemProperty.NOTIFY_USERS_WITH_EDIT_RIGHTS_ABOUT_SYSTEM_ERRORS, SystemProperty.OPTION_CHECKED);
    scm.createSystemPropertyIfDoesNotExist(SystemProperty.RESPECT_INTERMEDIATE_STEP_FAILURE, SystemProperty.OPTION_CHECKED);
    scm.createSystemPropertyIfDoesNotExist(SystemProperty.MAX_PARALLEL_UPGRADES, ""2"");
  }


  public SessionFactory getSessionFactory() {
    validateIsUp();
    return sessionFactory;
  }


  private void validateIsUp() {
    if (status != SERVICE_STATUS_STARTED) {
      throw new IllegalStateException(""Service "" + serviceName() + "" has not started yet"");
    }
  }


  public String toString() {
    return ""ConfigurationService{"" +
            ""status="" + status +
            '}';
  }
}
",java
"#include <stdio.h>
#include <stdlib.h>
#include ""ml.h""

int  iunique(int y[], int n, int **values)
     /*
       extract unique values from a vector y of n integers.
       
       Return value: the number of unique values on success, 0 otherwise.
     */
{
  int nvalues=1;
  int i,j;
  int addclass;
  int *indx;

  if(!(*values=ivector(1))){
    fprintf(stderr,""iunique: out of memory\n"");
    return 0;
  }
    
  (*values)[0]=y[0];
  for(i=1;i<n;i++){
    addclass=1;
    for(j=0;j<nvalues;j++)
      if((*values)[j]==y[i])
        addclass=0;
    if(addclass){
      if(!(*values=(int*)realloc(*values,(nvalues+1)*sizeof(int)))){
	fprintf(stderr,""iunique: out of memory\n"");
	return 0;
      }
      (*values)[nvalues++]=y[i];
    }
  }

  if(!(indx=ivector(nvalues))){
    fprintf(stderr,""iunique: out of memory\n"");
    return 0;
  }

  isort(*values,indx,nvalues,SORT_ASCENDING);

  if(free_ivector(indx)!=0){
    fprintf(stderr,""iunique: free_ivector error\n"");
    return 0;
  }

  return nvalues;
}


int  dunique(double y[], int n, double **values)
     /*
       extract unique values from a vector y of n doubles.
       
       Return value: the number of unique values on success, 0 otherwise.
     */
{
  int nvalues=1;
  int i,j;
  int addclass;
  int *indx;

  if(!(*values=dvector(1))){
    fprintf(stderr,""dunique: out of memory\n"");
    return 0;
  }
    
  (*values)[0]=y[0];
  for(i=1;i<n;i++){
    addclass=1;
    for(j=0;j<nvalues;j++)
      if((*values)[j]==y[i])
        addclass=0;
    if(addclass){
      if(!(*values=(double*)realloc(*values,(nvalues+1)*sizeof(double)))){
	fprintf(stderr,""dunique: out of memory\n"");
	return 0;
      }
      (*values)[nvalues++]=y[i];
    }
  }

  if(!(indx=ivector(nvalues))){
    fprintf(stderr,""iunique: out of memory\n"");
    return 0;
  }

  dsort(*values,indx,nvalues,SORT_ASCENDING);

  if(free_ivector(indx)!=0){
    fprintf(stderr,""iunique: free_ivector error\n"");
    return 0;
  }

  return nvalues;
}
",c
"// Max External: startup.c
// T.Place - 9/4/2001, 1/8/2002
// A simple Max object to put all tap.tools' objects into the new object list & post some info

#include ""ext.h""				// Required for all Max external objects

void *this_class;			// Required. Global pointing to this class 

typedef struct startup		// Data structure for this object 
{
	Object	p_ob;		// Must always be the first field; used by Max 
} Startup;

		
// Prototypes for methods: need a method for each incoming message
void	*startup_new(long value);			// object creation method  
void	startup_free(Startup *startup);	// free method

/*********************************************************/
//Main() Function

void main(void)			//main receives a copy of the Max function macros table 
{	
	// set up our class: create a class definition 
	setup((t_messlist **)&this_class, (method)startup_new, (method)startup_free, (short)sizeof(Startup), 0L, A_DEFLONG, 0);

	addmess((method)inspector_open, ""info"", A_CANT, 0);		// bind method for opening the license window

	finder_addclass(""SuperCollider Lib"", ""sc.CombN"");
	finder_addclass(""SuperCollider Lib"", ""sc.LFPulse"");
	finder_addclass(""SuperCollider Lib"", ""sc.LFSaw"");
	finder_addclass(""SuperCollider Lib"", ""sc.midicps"");
	finder_addclass(""SuperCollider Lib"", ""sc.SinOsc"");
	finder_addclass(""SuperCollider Lib"", ""sc.WhiteNoise"");
	finder_addclass(""SuperCollider Lib"", ""sc.Xline"");
	
//	finder_addclass(""Tap.Tools"", ""tap.metro"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.prime"");
	finder_addclass(""Tap.Tools"", ""tap.random"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.sieve"");					// add object to new-object list

	finder_addclass(""Tap.Tools"", ""tap.1pole-lp~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.allpole~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.anticlick~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.auto_thru~"");			// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.avg~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.bink~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.crossfade~"");			// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.decibels~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.diff~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.elixir~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.fft-list~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.fft-normalize~"");			// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.lp-comb~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.lpc~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.noise~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.pan~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.polar~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.quantize~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.radians~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.rms~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.scale~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.sift~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.split~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.typecheck~"");			// add object to new-object list

	finder_addclass(""Tap.Tools"", ""tap.5comb~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.adapt~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.decay_calc"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.deviate~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.fft~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.filterbank~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.gate~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.ifft~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.Lchange"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.limiter~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.loadbang"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.normalizer~"");			// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.nr~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.shift~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.sustain~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.thru~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.verb~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.vocoder~"");				// add object to new-object list	
	finder_addclass(""Tap.Tools"", ""tap.vocoderlite~"");			// add object to new-object list	
	
	post(""Tap.Tools MSP"");						// Print to the Max Window...
	post(""    Objects for Max/MSP by Tim Place"");
	post(""    Version 0.95"");
	post(""    Copyright � 1999-2002 by Silicon Prairie Intermedia"");
	post(""    http://www.sp-intermedia.com"");
	post(""    Use \""Get Info\"" on any object to view its license"");
}


/*********************************************************/
//Object Creation Function

void *startup_new(long value)
{
	Startup *startup;
	startup = (Startup *)newobject(this_class);	// create the new instance and return a pointer to it 
	return(startup);						// must return a pointer to the new instance 
}


/*********************************************************/
//Bound to input Functions

// free method
void startup_free(Startup *startup)
{
	notify_free((t_object *)startup);
}",c
