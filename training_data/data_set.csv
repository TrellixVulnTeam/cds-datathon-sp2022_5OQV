contents,language
"(******************************************************************************)
(*      Copyright (c) 2008, 2009, Sebastien MONDET                            *)
(*                                                                            *)
(*      Permission is hereby granted, free of charge, to any person           *)
(*      obtaining a copy of this software and associated documentation        *)
(*      files (the ""Software""), to deal in the Software without               *)
(*      restriction, including without limitation the rights to use,          *)
(*      copy, modify, merge, publish, distribute, sublicense, and/or sell     *)
(*      copies of the Software, and to permit persons to whom the             *)
(*      Software is furnished to do so, subject to the following              *)
(*      conditions:                                                           *)
(*                                                                            *)
(*      The above copyright notice and this permission notice shall be        *)
(*      included in all copies or substantial portions of the Software.       *)
(*                                                                            *)
(*      THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND,       *)
(*      EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES       *)
(*      OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND              *)
(*      NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT           *)
(*      HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,          *)
(*      WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING          *)
(*      FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR         *)
(*      OTHER DEALINGS IN THE SOFTWARE.                                       *)
(******************************************************************************)

(** The (X)HTML output format, implements {!type:Signatures.printer}
    functions. *)

(**/**)

type t = {
  stack: Commands.Stack.t;
  mutable write: string -> unit;
  write_mem: (string -> unit) Stack.t;
  mutable current_line: int;
  mutable started_text: bool;
  mutable inside_header:bool;
  mutable current_table: Commands.Table.table option;
  mutable current_section: (int * string * Buffer.t) option;
  error: Error.error -> unit;
  mutable loc: Error.location;
  class_hook: string option;
  url_hook: string -> string;
  img_hook: string -> string;
  separate_header: (string * string * string) ref option;
  make_section_links: [ `never | `when_labeled | `always ];
}

module CS = Commands.Stack

let (~%) = Printf.sprintf

module AddClass = struct
  let name add style =
    match add with
    | None -> """"
    | Some s -> ~% "" %s%s"" s style
  
  let attribute add style =
    match add with
    | None -> """"
    | Some s -> ~% "" class=\""%s%s\"""" s style

end

let create
    ~writer ?class_hook ?separate_header
    ?(make_section_links=`when_labeled)
    ?(img_hook=fun s -> s) ?(url_hook=fun s -> s) () =
  let module S = Signatures in
  let write = writer.S.w_write in
  {
    stack = CS.empty ();
    write = write;
    write_mem = Stack.create ();
    current_line = 1;
    started_text = false;
    inside_header = false;
    current_table = None;
    current_section = None;
    error = writer.S.w_error;
    loc = {Error.l_line = -1; l_char = -1; l_file = ""NO FILE"";};
    class_hook = class_hook;
    url_hook = url_hook;
    img_hook = img_hook;
    separate_header = separate_header;
    make_section_links = make_section_links;
  }
    

let strstat s = (~% ""[%d:%d]"" s.Error.l_line s.Error.l_char)
let debugstr t s msg = 
  if false then
    (~% ""<!--DEBUG:[%s] Loc:[%d;%d] CurLine:%d-->""
       msg s.Error.l_line s.Error.l_char t.current_line)
  else
    """"

let sanitize_comments line =
  let patterns = [('<', ""LT""); ('>', ""GT""); ('&', ""AMP""); ('-', ""DASH"")] in
  Escape.replace_chars ~src:line ~patterns
    (* let src = Escape.replace_string ~src:line ~find:""-->"" ~replace_with:""XXX"" in *)
    (* Escape.replace_string ~src ~find:""<!--"" ~replace_with:""XXXX"" *)

let sanitize_pcdata line =
  let patterns = [('<', ""&lt;""); ('>', ""&gt;""); ('&', ""&amp;"")] in
  Escape.replace_chars ~src:line ~patterns

let sanitize_xml_attribute src =
  let patterns =
    [('<', ""&lt;""); ('>', ""&gt;""); ('&', ""&amp;""); ('""', ""&quot;"")] in
  Escape.replace_chars ~src ~patterns


let quotation_open_close t a =
  let default = (""&ldquo;"", ""&rdquo;"") in
  try
    match List.hd a with
    | ""'""  -> (""&lsquo;"", ""&rsquo;"")
    | ""en"" -> (""&ldquo;"", ""&rdquo;"")
    | ""fr"" -> (""&laquo;&nbsp;"", ""&nbsp;&raquo;"")
    | ""de"" -> (""&bdquo;"", ""&rdquo;"")
    | ""es"" -> (""&laquo;"", ""&raquo;"")
    | s    -> 
        t.error (Error.mk t.loc `warning (`unknown_quotation_style s));
        default
  with
  | e -> default

let list_start t =
  function `itemize -> ~% ""\n<ul%s>\n"" (AddClass.attribute t.class_hook ""ul"")
  | `numbered -> ~%  ""\n<ol%s>\n"" (AddClass.attribute t.class_hook ""ol"")
let list_item t = function
  | `itemize -> ~% ""</li>\n<li%s>"" (AddClass.attribute t.class_hook ""li"")
  | `numbered -> ~% ""</li>\n<li%s>""  (AddClass.attribute t.class_hook ""li"")
let list_firstitem t = 
  function `itemize -> ~% ""<li%s>"" (AddClass.attribute t.class_hook ""li"")
  | `numbered -> ~% ""<li%s>"" (AddClass.attribute t.class_hook ""li"")
let list_stop t = 
  function `itemize -> ""</li>\n</ul>\n"" | `numbered -> ""</li>\n</ol>\n""

let section_start t n l =
  let buf = Buffer.create 42 in
  match t.current_section with
  | Some _ ->
    failwith ""Nested Sections not allowed""
  | None ->
    t.current_section <- Some (n, l, buf);
    Stack.push t.write t.write_mem;
    t.write ""</div>\n"";
    t.write <- Buffer.add_string buf;
    ()

let section_stop t n l =
  begin match t.current_section with
  | None -> failwith ""fatal error: section_stop with no section_start""
  | Some (n, l, buf) ->
    let lsan =
      match t.make_section_links, sanitize_xml_attribute l with
      | `never, _ -> """"
      | `when_labeled, """" -> """" 
      | `when_labeled, s -> ~% "" id=\""%s\"""" s
      | `always, """" -> ~% "" id=\""%s\"""" (Escape.clean_string (Buffer.contents buf))
      | `always, s  -> ~% "" id=\""%s\"""" s
    in
    t.write <- Stack.pop t.write_mem;
    t.current_section <- None;
    let tag = ~% ""h%d"" (n + 1) in
    ~% ""<%s%s%s>%s</%s>\n<div class=\""p%s\"">""
      tag lsan (AddClass.attribute t.class_hook tag)
      (Buffer.contents buf)
      tag (AddClass.name t.class_hook ""p"")
  end

let link_start t args =
  let link, new_write = Commands.Link.start ~url_hook:t.url_hook args in
  Stack.push t.write t.write_mem;
  t.write <- new_write;
  link

let link_stop t l =
  t.write <- Stack.pop t.write_mem;
  let kind, target, text = Commands.Link.stop l in
  let target_str = 
    (match target with Some s -> s | None -> ""#"") in
  t.write
    (~% ""<a href=\""%s%s\""%s>%s</a>"" 
       (match kind with `local -> ""#"" | `generic -> """")
       (sanitize_xml_attribute target_str)
       (AddClass.attribute t.class_hook ""a"")
       (match text with Some s -> s | None -> sanitize_pcdata target_str));
  ()

let image_start t args =
  (* http://www.w3.org/Style/Examples/007/figures *)
  let error_msg m = t.error (Error.mk t.loc `error m) in
  let src, opts, lbl =
    Commands.Names.image_params ~img_hook:t.img_hook error_msg args in
  let opts_str =
    match opts with
    | `wpx px -> (~% ""width=\""%dpx\""""  px)
    | `wpercent w -> (~% ""width=\""%d%%\"""" w)
    | `none -> """" 
  in
  let sansrc =
    match sanitize_xml_attribute src with
      """" -> ""http://IMAGEWITHNOSOURCE"" | s -> s in
  let sanlbl =
    match sanitize_xml_attribute lbl with 
    | """" -> """" | s -> ~% ""id=\""%s\"" "" s in
  t.write
    (~% ""\n<div class=\""figure%s\"" %s>\n  <a href=\""%s\"">\
        \n    <img src=\""%s\"" %s %s alt=\""%s\""%s/>\n  </a><br/>\n""
       (AddClass.name t.class_hook ""figure"")
        sanlbl sansrc sansrc opts_str sanlbl sansrc
        (AddClass.attribute t.class_hook ""img""));
  `image (src, opts, lbl)

let image_stop = ""</div>""

let header_start t =
  t.inside_header <- true; 
  begin match t.separate_header with
  | None ->
      t.write (~% ""%s\n<div class=\""header%s\"">\n""
                 (if t.started_text then ""</div>"" else """")
                 (AddClass.name t.class_hook ""header""))
  | Some r ->
      Stack.push t.write t.write_mem;
      t.write <- (fun str -> 
                    match CS.head t.stack with
                    | Some `title    -> let t,a,s = !r in r := (t ^ str, a, s);
                    | Some `authors  -> let t,a,s = !r in r := (t, a ^ str, s);
                    | Some `subtitle -> let t,a,s = !r in r := (t, a, s ^ str);
                    | _ -> ());
  end

let header_stop t =
  t.inside_header <- false;
  begin match t.separate_header with
  | None ->
      t.started_text <- true; (* we put the <p> *)
      t.write (~% ""</div> <!-- END HEADER -->\n<div class=\""p%s\"">\n""
                 (AddClass.name t.class_hook ""p""))
  | Some r ->
      t.write <- Stack.pop t.write_mem;
  end

let title_start t =
  t.write (~% ""\n  <h1%s>"" (AddClass.attribute t.class_hook ""h1""))
let title_stop t = t.write ""</h1>\n""
let authors_start t =
  t.write (~% ""  <div class=\""authors%s\"">""
             (AddClass.name t.class_hook ""authors""))
let authors_stop t = t.write ""</div>\n""
let subtitle_start t =
  t.write (~% ""  <div class=\""subtitle%s\"">""
             (AddClass.name t.class_hook ""subtitle""))
let subtitle_stop t = t.write ""</div>\n""

let table_start t args =
  (* http://www.topxml.com/xhtml/articles/xhtml_tables/ *)
  let table, to_stack, new_write = Commands.Table.start args in
  t.current_table <- Some table;
  Stack.push t.write t.write_mem;
  t.write <- new_write;
  to_stack

let print_table t table =
  let module CT = Commands.Table in
  let write = t.write in
  let lbl_str =
    match table.CT.label with
    | None -> """"
    | Some s -> (~% ""id=\""%s\"""" (sanitize_xml_attribute s))
  in
  write
    (~% ""<div class=\""tablefigure%s\"">\n\
         <table class=\""tablefigure%s\""  border=\""1\"" %s >\n""
       (AddClass.name t.class_hook ""tablefigure"")
         (AddClass.name t.class_hook ""table"")
         lbl_str);
  let caption_str = (Buffer.contents table.CT.caption) in
  if not (Escape.is_white_space caption_str) then (
    write (~% ""<caption  class=\""tablefigure%s\"" %s>%s</caption>\n<tr>""
             (AddClass.name t.class_hook ""p"")
             lbl_str caption_str);
  );

  let riddle = CT.Util.make_riddle table in

  let rec write_cells cells cur_row cur_col =
    match cells with
    | [] -> (* fill the gap + warning *)
        ()
    | c :: tl ->
        let typ_of_cell = if c.CT.is_head then ""h"" else ""d"" in
        let alignement =
          match c.CT.align with
          | `right ->
              ~% ""class=\""rightalign%s\"" style=\""text-align:right;\""""
                (AddClass.name t.class_hook ""cellrightalign"")
          | `center ->
              ~% ""class=\""centeralign%s\"" style=\""text-align:center;\""""
                (AddClass.name t.class_hook ""cellcenteralign"")
          | `left ->
              ~% ""class=\""leftalign%s\"" style=\""text-align:left;\""""
                (AddClass.name t.class_hook ""cellleftalign"")
        in
        write (~% ""<t%s  rowspan=\""%d\"" colspan=\""%d\"" %s >%s</t%s>""
                 typ_of_cell c.CT.rows_used c.CT.cols_used alignement
                 (Buffer.contents c.CT.cell_text)
                 typ_of_cell);
        CT.Util.fill_riddle riddle
          cur_row cur_col c.CT.rows_used c.CT.cols_used;
        let next_row, next_col = 
          CT.Util.next_coordinates riddle table cur_row cur_col in
        if cur_row <> next_row then (
          write ""</tr>\n"";
          if tl <> [] then
            write (~% ""<tr%s>"" (AddClass.attribute t.class_hook ""tr""));
        );
        write_cells tl next_row next_col
  in
  write_cells (List.rev table.CT.cells) 0 0;
  write ""</table></div>\n""


let table_stop t =
  begin match t.current_table with
  | None -> failwith ""Why am I here ??? no table to end.""
  | Some tab ->
      (* p (~% ""End of table: %s\n"" (Buffer.contents tab.caption)); *)
      t.write <- Stack.pop t.write_mem;
      t.current_table <- None;
      print_table t tab;
  end

let cell_start t args =
  begin match t.current_table with
  | None ->
      t.error (Error.mk t.loc `error `cell_out_of_table);
      `cell (false, 1, `center)
  | Some tab ->
      Commands.Table.cell_start ~loc:t.loc ~error:t.error tab args
  end

let cell_stop t env =
  match t.current_table with
  | None -> (* Already warned *) ()
  | Some tab -> Commands.Table.cell_stop ~loc:t.loc ~error:t.error tab

let note_start t =
  t.write
    (~% ""<small class=\""notebegin%s\"">(</small><small class=\""note%s\"">""
       (AddClass.name t.class_hook ""notebegin"")
       (AddClass.name t.class_hook ""note""));
  `note

let note_stop t =
  ~% ""</small><small class=\""noteend%s\"">)</small>""
    (AddClass.name t.class_hook ""noteend"")

let may_start_text t =
  if not t.started_text && not t.inside_header then (
    t.started_text <- true;
    t.write (~% ""<div class=\""p%s\"">"" (AddClass.name t.class_hook ""p""));
  )

let start_environment ?(is_begin=false) t location name args =
  t.loc <- location;
  let module C = Commands.Names in
  let cmd name args =
    match name with
    | s when C.is_header s -> (header_start t); `header
    | s when C.is_title s ->  (title_start t); `title
    | s when C.is_subtitle s -> (subtitle_start t); `subtitle
    | s when C.is_authors s -> (authors_start t); `authors
    | _ ->
        may_start_text t;
        begin match name with
        | s when C.is_quotation s        ->
            let op, clo = quotation_open_close t args in
            t.write op;
            `quotation (op, clo)
        | s when C.is_italic s ->
            t.write (~% ""<i%s>"" (AddClass.attribute t.class_hook ""i""));
            `italic
        | s when C.is_bold s ->
            t.write (~% ""<b%s>"" (AddClass.attribute t.class_hook ""b""));
            `bold
        | s when C.is_mono_space s ->
            t.write (~% ""<tt%s>"" (AddClass.attribute t.class_hook ""tt""));
            `mono_space
        | s when C.is_superscript s ->
            t.write (~% ""<sup%s>"" (AddClass.attribute t.class_hook ""sup""));
            `superscript
        | s when C.is_subscript s ->
            t.write (~% ""<sub%s>"" (AddClass.attribute t.class_hook ""sub""));
            `subscript
        | s when (C.is_end s)           -> `cmd_end
        | s when C.is_list s             ->
            let style, other_args, waiting =
              let error_msg m = t.error (Error.mk t.loc `error m) in
              match args with
              | [] -> (`itemize, [], ref true)
              | h :: t -> (C.list_style error_msg h, t, ref true) in
            t.write (list_start t style);
            `list (style, other_args, waiting)
        | s when C.is_item s -> `item
        | s when C.is_section s -> 
            let level, label = C.section_params args in
            section_start t level label;
            `section (level, label)
        | s when C.is_link s -> (link_start t args)
        | s when C.is_image s -> image_start t args
        | s when C.is_table s -> table_start t args
        | s when C.is_cell s -> cell_start t args
        | s when C.is_note s -> note_start t
        | s when C.is_quote s ->
            t.write (~% ""<blockquote%s>"" (AddClass.attribute t.class_hook ""quote""));
            t.write (~% ""<div class=\""p%s\"">"" (AddClass.name t.class_hook ""p""));
            `quote
        | s ->
            t.error (Error.mk t.loc `error (`unknown_command  s));
            `unknown (s, args)
        end
  in
  let the_cmd =
    if C.is_begin name then (
      match args with
      | [] ->
          t.error (Error.mk t.loc `error `begin_without_arg);
          (`cmd_begin ("""", []))
      | h :: t -> (`cmd_begin (h, t))
    ) else (
      cmd name args
    )
  in
  if is_begin then (
    CS.push t.stack (`cmd_inside the_cmd);
  ) else (
    CS.push t.stack the_cmd;
  )

let start_command t location name args =
  t.loc <- location;
  (* p (~% ""Command: \""%s\""(%s)\n"" name (String.concat "", "" args)); *)
  match Commands.non_env_cmd_of_name name args with
  | `unknown (name, args) -> start_environment t location name args
  | cmd -> CS.push t.stack cmd

let stop_command t location =
  t.loc <- location;
  let rec out_of_env env =
    match env with
    | `cmd_end ->
        begin match CS.pop t.stack with
        | Some (`cmd_inside benv) ->
            (* p (~% ""{end} %s\n"" (Commands.env_to_string benv)); *)
            out_of_env benv
        | Some c ->
            t.error (Error.mk t.loc `error `non_matching_end);
            CS.push t.stack c;
        | None ->
            t.error (Error.mk t.loc `error `non_matching_end);
        end
    | `cmd_begin (nam, args) ->
        (* p (~% ""cmd begin %s(%s)\n"" nam (String.concat "", "" args)); *)
        start_environment ~is_begin:true t location nam args;
    | `paragraph ->
        t.write (~% ""</div>\n<div class=\""p%s\"">""
                   (AddClass.name t.class_hook ""p""))
    | `new_line -> 
        t.write (~% ""<br%s/>\n"" (AddClass.attribute t.class_hook ""br""))
    | `non_break_space -> t.write ""&nbsp;""
    | `horizontal_ellipsis -> t.write ""&hellip;""
    | `en_dash -> t.write ""&ndash;""
    | `em_dash -> t.write ""&mdash;""
    | `open_brace -> t.write ""{""
    | `close_brace -> t.write ""}""
    | `sharp -> t.write ""#""
    | (`utf8_char i) -> t.write (~% ""&#%d;"" i)
    | (`quotation (op, clo)) -> t.write clo
    | `italic       ->  t.write ""</i>""  
    | `bold         ->  t.write ""</b>""  
    | `mono_space   ->  t.write ""</tt>"" 
    | `superscript  ->  t.write ""</sup>""
    | `subscript    ->  t.write ""</sub>""
    | `list (style, _, r) -> t.write (list_stop t style)
    | `item ->
        begin match CS.head t.stack with
        | Some (`list (style, _, r))
        | Some (`cmd_inside (`list (style, _, r))) ->
            if !r then (
              t.write (list_firstitem t style);
              r := false;
            ) else (
              t.write (list_item t style);
            );
        | Some c ->
            t.error (Error.mk t.loc `error `item_out_of_list);
            CS.push t.stack c;
        | None ->
            t.error (Error.mk t.loc `error `item_out_of_list);
        end
    | `section (level, label) ->
      let section = (section_stop t level label) in
      t.write section;
    | `link l -> link_stop t l;
    | `image _ -> t.write image_stop;
    | `header ->  (header_stop t);
    | `title -> title_stop t;
    | `subtitle -> subtitle_stop t;
    | `authors -> authors_stop t;
    | `table _ -> table_stop t
    | `cell _ as c -> cell_stop t c
    | `note -> t.write (note_stop t)
    | `quote ->  t.write ""</div></blockquote>""
    | `cmd_inside c ->
        t.error (Error.mk t.loc `error `closing_brace_matching_begin);
    | `unknown c -> () (* Already ""t.error-ed"" in start_environment *)
    | c -> (* shouldn't be there !! *)
        t.error (Error.mk t.loc `fatal_error 
                   (`transformer_lost (Commands.env_to_string c)));
  in
  match CS.pop t.stack with
  | Some env -> out_of_env env
  | None ->
      t.error (Error.mk t.loc `error `nothing_to_end_with_brace)


let handle_comment_line t location line =
  t.loc <- location;
  t.write (~% ""%s<!--%s-->\n"" (debugstr t location ""Comment"")
             (sanitize_comments line));
  t.current_line <- t.current_line + 1;
  ()

let handle_text t location line =
  t.loc <- location;
  if not (Escape.is_white_space line) then (
    may_start_text t;
  );
  
  if (t.started_text && (not t.inside_header)) ||
    (t.inside_header && (CS.head t.stack <> Some `header)) then (

      let debug = debugstr t location ""Text"" in
      let pcdata = sanitize_pcdata line in
      if location.Error.l_line > t.current_line then (
        t.write (~% ""%s%s"" debug pcdata);
        t.current_line <- location.Error.l_line;
      ) else (
        t.write (~% ""%s%s"" debug pcdata);
      )
    ) else (
      if
        CS.head t.stack = Some `header
        && (not (Escape.is_white_space line))
      then (
        t.write (~% ""<!-- IGNORED TEXT: %s -->"" (sanitize_comments line));
      );

    )


let terminate t location =
  t.loc <- location;
  if (CS.to_list t.stack) <> [] then (
    let l = List.map Commands.env_to_string (CS.to_list t.stack) in
    t.error (Error.mk t.loc `error (`terminating_with_open_environments l));
  );  
  t.write (if t.started_text then ""</div>\n"" else """");
  () 


let start_raw_mode t location kind_str args =
  t.current_line <- location.Error.l_line;
  let kind = Commands.Raw.raw_cmd_of_str kind_str in
  begin match kind with
  | `code ->
      CS.push t.stack (`code args);
      begin match args with
      | _ :: q :: _ ->
        t.write (~% ""\n<!--verbatimbegin:%s -->\n"" (sanitize_comments q))
      | _ -> ()
      end;
      t.write (~% ""<pre%s>""  (AddClass.attribute t.class_hook ""pre""));
  | `bypass | `text | `ignore as env_kind ->
      CS.push t.stack env_kind;
  end

let handle_raw_text t location text =
  t.current_line <- location.Error.l_line;
  begin match CS.head t.stack with
  | Some (`code _) | Some `text ->
      let pcdata = sanitize_pcdata text in
      t.write (~% ""%s"" pcdata);
  | Some `bypass ->
      t.write text;
  | Some `ignore -> ()
  | _ ->
      failwith ""handle_raw_text: Shouldn't be there, Parser's fault ?"";
  end
  
let stop_raw_mode t location =
  t.current_line <- location.Error.l_line;
  begin match CS.pop t.stack with
  | Some (`code args) ->
      t.write ""</pre>"";
      begin match args with
      | _ :: q :: _ ->
        t.write (~% ""\n<!--verbatimend:%s -->\n"" (sanitize_comments q))
      | _ -> ()
      end;
  | Some `bypass | Some `text | Some `ignore -> ()
  | _ ->
      (* warning ? error ? anyway, *)
      failwith ""Shouldn't be there, Parser's fault ?"";
  end

(**/**)

(** Build a [printer] to feed {!val:Parser.do_transformation}, the
optional arguments have the same meaning than for
{!val:Transform.brtx_to_html}. *)
let build ?(print_comments=false)
    ?make_section_links
    ?separate_header ?img_hook ?url_hook ?class_hook ~writer () =
  let t =
    create ~writer ?make_section_links
      ?class_hook ?separate_header ?img_hook ?url_hook () in
  { Signatures.
      print_comment =
      if print_comments then 
        (handle_comment_line t)
      else 
        (fun a b -> ());
    print_text =    handle_text t;
    enter_cmd =     start_command t;
    leave_cmd =     stop_command t;
    terminate =     terminate t;
    is_raw = Commands.Raw.is_raw_cmd;
    default_raw_end = Commands.Raw.default_raw_end;
    enter_raw =     start_raw_mode t;
    print_raw =     handle_raw_text t;
    leave_raw =     stop_raw_mode t;
    error = writer.Signatures.w_error; }

(** Build an HTML header. *)
let header ?(title="""") ?(comment="""") ?stylesheet_link () =
  let css_str =
    match stylesheet_link with
    | None -> """"
    | Some f ->
        ~% ""<link rel=\""stylesheet\""  type=\""text/css\"" href=\""%s\"" />\n""
          (sanitize_xml_attribute f)
  in
  ~% ""<!DOCTYPE html
    PUBLIC \""-//W3C//DTD XHTML 1.0 Strict//EN\""
    \""http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"">
    <html xmlns=\""http://www.w3.org/1999/xhtml\"" xml:lang=\""en\"" lang=\""en\"">
    <!-- %s -->
    <head>
    <meta http-equiv=\""Content-Type\"" content=\""text/html; charset=utf-8\"" />
    %s<title>%s</title>
    </head>
    <body>"" (sanitize_comments comment) css_str (sanitize_pcdata title)

(** Close an HTML document. *)
let footer () = ""</body>\n</html>\n""

",ocaml
"(**************************************************************************)
(*                                                                        *)
(*                      TypeRex                                           *)
(*                                                                        *)
(*   Copyright OCamlPro 2011-2017. All rights reserved.                   *)
(*   This file is distributed under the terms of the LGPL v2.1 with       *)
(*   the special exception on linking described in the file LICENSE.      *)
(*      (GNU Lesser General Public Licence version 2.1)                   *)
(*                                                                        *)
(*     Contact: <typerex@ocamlpro.com> (http://www.ocamlpro.com/)         *)
(*                                                                        *)
(*  THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND,       *)
(*  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES       *)
(*  OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND              *)
(*  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS   *)
(*  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN    *)
(*  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN     *)
(*  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE      *)
(*  SOFTWARE.                                                             *)
(**************************************************************************)

type color =
  | Red
  | Pink
  | Purple
  | DeepPurple
  | Indigo
  | Blue
  | LightBlue
  | Cyan
  | Teal
  | Green
  | LightGreen
  | Lime
  | Yellow
  | Amber
  | Orange
  | DeepOrange
  | Brown
  | Grey
  | BlueGrey
  | Black
  | White
  | Transparent

type shade =
  | Lighten of int
  | Darken of int
  | Accent of int
  | None

type t = { color : color ; shade : shade }

let color_to_string = function
  | Red -> ""red""
  | Pink -> ""pink""
  | Purple -> ""purple""
  | DeepPurple -> ""deep-purple""
  | Indigo -> ""indigo""
  | Blue -> ""blue""
  | LightBlue -> ""light-blue""
  | Cyan -> ""cyan""
  | Teal -> ""teal""
  | Green -> ""green""
  | LightGreen -> ""light-green""
  | Lime -> ""lime""
  | Yellow -> ""yellow""
  | Amber -> ""amber""
  | Orange -> ""orange""
  | DeepOrange -> ""deep-orange""
  | Brown -> ""brown""
  | Grey -> ""grey""
  | BlueGrey -> ""blue-grey""
  | Black -> ""black""
  | White -> ""white""
  | Transparent -> ""transparent""

let shade_to_string = function
  | Lighten i -> Printf.sprintf ""lighten-%d"" i
  | Darken i -> Printf.sprintf ""darken-%d"" i
  | Accent i -> Printf.sprintf ""accent-%d"" i
  | None ->  """"

let background_color div color =
  let col = color_to_string color.color in
  Js_utils.Manip.addClass div col ;
  match color.shade with
  | None -> ()
  | shade ->
      Js_utils.Manip.addClass div (shade_to_string shade)

let text_color div color =
  let col = color_to_string color.color ^ ""-text""in
  Js_utils.Manip.addClass div col ;
  match color.shade with
  | None -> ()
  | shade ->
      let shade = ""text-"" ^ shade_to_string shade in
      Js_utils.Manip.addClass div shade
",ocaml
"module Pre = struct
  (* 和集合 *)
  let union (xs: 'a list) (ys: 'a list):'a list =
    List.filter begin fun x ->
      not (List.mem x ys)
    end xs @ ys

  (* 積集合 *)
  let intersect (xs: 'a list) (ys: 'a list): 'a list =
    List.filter begin fun x ->
      List.mem x ys
    end xs

  (* リストをセットにする。要素が１つずつにまとめる *)
  let nub (xs : 'a list): 'a list =
    List.fold_left begin fun ys y ->
      if List.mem y ys
      then ys
      else y :: ys
    end [] xs

  let show_list show sep xs =
    begin
      let rec loop xs =
        begin match xs with
          | [] -> """"
          | [x] -> show x
          | x::xs -> show x ^ sep ^ loop xs
        end
    in
      Printf.sprintf ""[%s]"" (loop xs)
    end
  let show_int_list xs =
    show_list string_of_int ""; "" xs
end

module Id = struct
  type id = string

  (* 数値に対するidを取得する *)
  let enumId (n:int) : id =
    ""v"" ^ string_of_int n
end

(* 3 Kinds *)
module Kind = struct
  type kind =
    | Star
    | Kfun of kind * kind

  let rec show (k:kind):string =
    begin match k with
      | Star -> ""*""
      | Kfun(Kfun _ as k1,k2) -> Printf.sprintf ""(%s) -> %s"" (show k1) (show k2) 
      | Kfun(k1,k2) -> Printf.sprintf ""%s -> %s"" (show k1) (show k2) 
    end
end

(* 4 Types *)
module Type = struct
  open Kind
  (* 型変数 *)
  type tyvar = Tyvar of Id.id * kind
  (* 型コンストラクタ *)
  type tycon = Tycon of Id.id * kind
  (* 型 *)
  type type_ =
    | TVar of tyvar
    | TCon of tycon
    | TAp of type_ * type_
    | TGen of int

  let tUnit :type_ = TCon(Tycon(""()"", Star))
  let tChar :type_ = TCon(Tycon(""Char"", Star))
  let tInt :type_ = TCon(Tycon(""Int"", Star))
  let tInteger :type_ = TCon(Tycon(""Integer"", Star))
  let tFloat :type_ = TCon(Tycon(""Float"", Star))
  let tDouble :type_ = TCon(Tycon(""Double"", Star))

  let tList :type_ = TCon(Tycon(""[]"", Kfun(Star, Star)))
  let tArrow :type_ = TCon(Tycon(""(->)"", Kfun(Star, Kfun(Star, Star))))
  let tTuple2 :type_ = TCon(Tycon(""(,)"", Kfun(Star, Kfun(Star, Star))))

  let fn (a:type_) (b:type_) :type_ = TAp(TAp(tArrow, a), b)

  let list t :type_ = TAp(tList, t)

  let tString :type_ = list tChar

  let pair a b :type_ = TAp(TAp(tTuple2, a), b)

  let tyvarKind (Tyvar(_, k)) :kind = k
  let tyconKind (Tycon(_, k)) :kind = k
  let rec typeKind t:kind =
    match t with
    | TCon tc -> tyconKind tc
    | TVar u -> tyvarKind u
    | TAp(t, _) ->
      begin match typeKind t with
        | Kfun(_, k) -> k
        | _ -> failwith ""inconsistent type""
      end
    | TGen _ -> failwith ""generic type variables have no kind""

  let rec show (t:type_): string =
    begin match t with
      | TVar(Tyvar(id,kind)) -> Printf.sprintf ""TVar(Tyvar(%s,%s))"" id (Kind.show kind)
      | TCon(Tycon(id,kind)) -> Printf.sprintf ""TCon(Tycon(%s,%s))"" id (Kind.show kind)
      | TAp(t1,t2)           -> Printf.sprintf ""TAp(%s,%s)"" (show t1) (show t2)
      | TGen(i)              -> Printf.sprintf ""TGen(%d)"" i
    end
end

(* 5 Substitutions *)
module Subst = struct
  open Type

  type subst = (tyvar * type_) list

  let nullSubst : subst = []

  let (+->) u t : subst = [(u, t)]

  (* 型変数を展開する *)
  let rec typeApply (s : subst) (t:type_):type_ = 
    begin match t with
      | TVar u as t ->
        begin try
          List.assoc u s
        with
          Not_found -> t
        end
      | TAp(l, r) -> TAp(typeApply s l, typeApply s r)
      | t -> t
    end

  let rec typeTv (t:type_):tyvar list =
    begin match t with
      | TVar u -> [u]
      | TAp(l, r) -> Pre.union (typeTv l) (typeTv r)
      | _ -> []
    end

  let listApply (apply : subst -> 'a -> 'b) (s : subst) (xs:'a list):'b list =
    List.map (apply s) xs

  let listTv (tv:'a -> tyvar list) (xs:'a list) : tyvar list =
    Pre.nub (List.concat (List.map tv xs))

  let (@@) (s1:subst) (s2 : subst) : subst =
    List.map begin fun (u, t) ->
      (u, typeApply s1 t)
    end s2 @ s1

  let merge s1 s2 : subst =
    let agree =
      let agreeOnVar v =
        typeApply s1 (TVar v) = typeApply s2 (TVar v)
      in
      List.for_all agreeOnVar (Pre.intersect (List.map fst s1) (List.map fst s2))
    in
    if agree
    then s1 @ s2
    else failwith ""substitutions do not agree""

  let show (subst:subst):string =
    Pre.show_list begin fun (Tyvar(id,kind),type_) ->
      Printf.sprintf ""Tyvar(%s,%s),%s"" id (Kind.show kind) (Type.show type_)
    end ""; "" subst

  let rec show_tyvar(tv:tyvar): string = 
    begin match tv with
      | Tyvar(id,kind) -> Printf.sprintf ""Tyvar(%s,%s)"" id (Kind.show kind)
    end

  let show_tyvar_list xs :string =
    Pre.show_list begin fun (Tyvar(id,kind)) ->
      Printf.sprintf ""Tyvar(%s,%s)"" id (Kind.show kind)
    end ""; "" xs
end

(* 6 Unification and Matching *)
module Unify = struct
  open List
  open Kind
  open Type
  open Subst
  
  let rec mgu (t1:type_) (t2:type_):subst =
    match t1, t2 with
    | TAp(l, r), TAp(l', r') ->
      let s1 = mgu l l' in
      let s2 = mgu (typeApply s1 r) (typeApply s1 r') in
      s2 @@ s1
    | TVar u, t | t, TVar u -> varBind u t
    | TCon tc1, TCon tc2 when tc1 = tc2 -> nullSubst
    | _ -> failwith ""types do not unify""

  and varBind (u:tyvar) (t:type_):subst =
    match t with
    | _ when t = TVar u                -> nullSubst
    | _ when mem u (typeTv t)          -> failwith ""occurs check fails""
    | _ when tyvarKind u <> typeKind t -> failwith ""kinds do not match""
    | _                                -> u +-> t

  let rec match_ (t1:type_) (t2:type_):subst =
    match t1, t2 with
    | TAp(l, r), TAp(l', r') ->
      let sl = match_ l l' in
      let sr = match_ r r' in
      merge sl sr
    | TVar u, t when tyvarKind u = typeKind t -> u +-> t
    | TCon tc1, TCon tc2 when tc1 = tc2 -> nullSubst
    | _ -> failwith ""types do not match""
end

(* 7 Type Classes, Predicates and Qualified Types *)
module Pred = struct
  open List
  open Kind
  open Type
  open Subst


  (* 7.1 Basic definitions *)
  type pred = IsIn of Id.id * type_

  let p (IsIn(s, t)) =
    s  ^ "" "" ^ (Type.show t)

  let _ =
    let ty = TVar(Tyvar(""a"", Star)) in
    let pred = IsIn(""Num"", ty) in
    Printf.printf ""pred %s\n"" (p pred)

  let ps pred =
    Pre.show_list p "", "" pred

  let _ =
    let ty = TVar(Tyvar(""a"", Star)) in
    let preds = [IsIn(""Num"", ty);IsIn(""B"", ty)] in
    Printf.printf ""preds %s\n"" (ps preds)

  type 't qual = Qual of pred list * 't

  let p_qual q =
    begin match q with
      | Qual(preds,ty) -> ps preds ^ "" => "" ^ Type.show ty
    end

  let _ =

    (* (Num a) => a -> Int *)

    let ty = TVar(Tyvar(""a"", Star)) in
    let pred = IsIn(""Num"", ty) in
    Printf.printf ""pred %s\n"" (p pred);
    (* Qual *)
    let q = Qual([pred], fn ty tInt) in
    Printf.printf ""qual = %s\n"" (p_qual q)

  let predApply (s:subst) (pred:pred):pred =
    match pred with
    | IsIn(i, t) -> IsIn(i, Subst.typeApply s t)

  let _ =
    let s = [Tyvar(""a"", Star), tInt] in
    let pred = IsIn(""Num"", TVar(Tyvar(""a"", Star))) in
    let pred2 = predApply s pred in
    Printf.printf ""pred2 = %s\n"" (p pred2)

  let predTv (pred:pred):tyvar list =
    match pred with
    | IsIn(_, t) -> Subst.typeTv t

  let _ =
    let pred = IsIn(""Num"", TVar(Tyvar(""a"", Star))) in
    let tvs = predTv pred in
    Printf.printf ""tvs = %s\n"" (Subst.show_tyvar_list tvs)

  let predsApply (s:subst) (xs:pred list):pred list =
    Subst.listApply predApply s xs

  let _ =
    let s = [Tyvar(""a"", Star), tInt] in
    let preds = [IsIn(""Num"", TVar(Tyvar(""a"", Star)))] in
    let preds2 = predsApply s preds in
    Printf.printf ""preds2 = %s\n"" (ps preds2)

  let predsTv (xs:'a list) : tyvar list =
    Subst.listTv predTv xs

  let _ =
    let preds = [IsIn(""Num"", TVar(Tyvar(""a"", Star)))] in
    let tvs = predsTv preds in
    Printf.printf ""tvs = %s\n"" (Subst.show_tyvar_list tvs)

  let qualTypeApply (s:subst) (qual:type_ qual):type_ qual =
    match qual with
    | Qual(ps, t) -> Qual(predsApply s ps, Subst.typeApply s t)

  let _ =
    let ty = TVar(Tyvar(""a"", Star)) in
    let pred = IsIn(""Num"", ty) in
    let q = Qual([pred], fn ty tInt) in
    Printf.printf ""qual = %s\n"" (p_qual q);
    let qual2 = qualTypeApply ((Tyvar(""a"", Star)) +-> tInt) q in
    Printf.printf ""qual2 = %s\n"" (p_qual qual2)

  let qualTypeTv qual =
    match qual with
    | Qual(ps, t) ->
      Pre.union (predsTv ps) (Subst.typeTv t)

  let _ =
    let ty = TVar(Tyvar(""a"", Star)) in
    let pred = IsIn(""Num"", ty) in
    let q = Qual([pred], fn ty tInt) in
    let tvs = qualTypeTv q in
    Printf.printf ""tvs = %s\n"" (Subst.show_tyvar_list tvs)

  let lift (m:type_->type_->'a) (p:pred) (p':pred):'a =
    match (p, p') with
    | IsIn(i, t), IsIn(i', t') ->
      if i = i' then m t t'
      else failwith ""classes differ""

  let mguPred = lift Unify.mgu

  let _ =
    let pred1 = IsIn(""Num"", TVar(Tyvar(""a"", Star))) in
    let pred2 = IsIn(""Num"", TVar(Tyvar(""a"", Star))) in
    let s = mguPred pred1 pred2 in
    Printf.printf ""mguPred = %s\n"" (Subst.show s)

  let matchPred = lift Unify.match_

  let _ =
    let pred1 = IsIn(""Num"", TVar(Tyvar(""a"", Star))) in
    let pred2 = IsIn(""Num"", TVar(Tyvar(""a"", Star))) in
    let s = matchPred pred1 pred2 in
    Printf.printf ""matchPred = %s\n"" (Subst.show s)

  type inst = pred qual

  let p_inst i =
    begin match i with
    | Qual(preds,pred) -> Printf.sprintf ""Qual(%s,%s)"" (ps preds) (p pred)
    end

  let _ =
    let inst = Qual([IsIn(""Ord"",tUnit);IsIn(""Ord"",tChar)],IsIn(""Ord"",tChar)) in
    Printf.printf ""inst=%s\n"" (p_inst inst)

  type class_ = Id.id list * inst list

  let (==>) ps p = Qual(ps, p)

  let _ =
    let (cls:class_) = (
      [""Eq""], (* クラス名 *)
      [
      (* インスタンスの列挙 型の実装の列挙 *)
        [] ==> IsIn(""Ord"", tUnit);
        [] ==> IsIn(""Ord"", tChar);
        (* int *)
        [] ==> IsIn(""Ord"", tInt);
        (* Ord a, Ord b => pair a b *)
        [
          IsIn(""Ord"",TVar(Tyvar(""a"", Star)));
          IsIn(""Ord"",TVar(Tyvar(""b"", Star)))
        ] ==>
        IsIn(""Ord"", (pair (TVar(Tyvar(""a"",Star))) (TVar(Tyvar(""b"",Star)))))
        
      ]
    ) in ()

  (* 7.2 Class Environments *)

  type classEnv = {
    classes : (Id.id -> class_);
    defaults : type_ list;
  }

  let initialEnv :classEnv = {
    classes = (fun i -> raise Not_found);
    defaults = [tInteger; tDouble]
  }

  let modify (ce:classEnv) i c =
    { ce with classes = fun j -> if i = j then c else ce.classes j; }

  let _ =
    let b = modify initialEnv ""ABC"" ([""A""],[[] ==> IsIn(""Ord"",tUnit)]) in
    ()

  let super (ce:classEnv) i = fst (ce.classes i)

  let _ =
    let b = modify initialEnv ""ABC"" ([""A""],[[] ==> IsIn(""Ord"",tUnit)]) in
    let s = super b ""ABC"" in
    ()

  let insts (ce:classEnv) i = snd (ce.classes i)

  let _ =
    let b = modify initialEnv ""ABC"" ([""A""],[[] ==> IsIn(""Ord"",tUnit)]) in
    let s = insts b ""ABC"" in
    ()

  let defined (ce:classEnv) i =
    try
      ignore (ce.classes i);
      true
    with Not_found -> false

  let _ =
    let b = modify initialEnv ""ABC"" ([""A""],[[] ==> IsIn(""Ord"",tUnit)]) in
    let s = defined b ""ABC"" in
    ()

  type envTransformer = classEnv -> classEnv

  let addClass i is : envTransformer =
    fun (ce:classEnv) ->
      if defined ce i then failwith ""class already defined""
      else if exists (fun i -> not (defined ce i)) is then
        failwith ""superclass not defined""
      else modify ce i (is, [])

  let _ =
    let c1 :envTransformer = addClass ""Eq"" [] in
    let c1s = c1 initialEnv in
    ()

  let (<:>) (f : envTransformer) (g : envTransformer) : envTransformer =
    fun (ce:classEnv) -> g (f ce)

  let _ =
    let c1 :envTransformer = addClass ""Eq"" [] in
    let c2 :envTransformer = addClass ""Eq2"" [] in
    let c3 :envTransformer = c1 <:> c2 in
    let c4 :envTransformer = addClass ""Eq"" [] <:> addClass ""Eq2"" [] in
    ()

  let addCoreClasses :envTransformer =
    addClass ""Eq"" [] (* Eqは == /=で同値判定できる *)
    <:> addClass ""Ord"" [""Eq""] (* Ord は比較出来るクラスで、Eqを継承し < > <= >= *)
    <:> addClass ""Show"" [] (* Show 文字列化できる *)
    <:> addClass ""Read"" [] 
    <:> addClass ""Bounded"" []
    <:> addClass ""Enum"" []
    <:> addClass ""Functor"" []
    <:> addClass ""Monad"" []

  let addNumClasses :envTransformer =
    addClass ""Num"" [""Eq""; ""Show""] (* Numは数字で、同値判定出来て、表示出来る *)
    <:> addClass ""Real"" [""Num""; ""Ord""] (* Realは数字で比較も出来る *)
    <:> addClass ""Fractional"" [""Num""] (* 大小関係はない *)
    <:> addClass ""Integral"" [""Real""; ""Enum""] (* 列挙可能 *)
    <:> addClass ""RealFrac"" [""Real""; ""Fractional""] (*大小関係ありのFractional*)
    <:> addClass ""Floating"" [""Fractional""] (* 大小関係はない *)
    <:> addClass ""RealFloat"" [""RealFrac""; ""Floating""] (* 大小関係がある *)

  let addPreludeClasses :envTransformer =
    addCoreClasses <:> addNumClasses

  let overlap (p:pred) (q:pred) : bool =
    try
      ignore (mguPred p q);
      true
    with _ -> false

  let _ =
    let pred1 = IsIn(""Ord"", tUnit) in
    let pred2 = IsIn(""Ord"", tChar) in
    Printf.printf ""overlap pred1 pred2 %b\n"" (overlap pred1 pred2);
    Printf.printf ""overlap pred1 pred1 %b\n"" (overlap pred1 pred1)

  let addInst ps (IsIn(i, _) as p) : envTransformer =
    fun (ce:classEnv) ->
      if not (defined ce i) then failwith ""no class for instance"";
      let its = insts ce i in
      let qs = map (fun (Qual(_, q)) -> q) its in
      if exists (overlap p) qs then failwith ""overlapping instance"";      
      let c = super ce i, Qual(ps, p) :: its in
      modify ce i c

  let exampleInsts : envTransformer =
    addPreludeClasses
    <:> addInst [] (IsIn(""Ord"", tUnit))
    <:> addInst [] (IsIn(""Ord"", tChar))
    <:> addInst [] (IsIn(""Ord"", tInt))
    <:> addInst [IsIn(""Ord"", TVar(Tyvar(""a"", Star)));
                 IsIn(""Ord"", TVar(Tyvar(""b"", Star)))]
                (IsIn(""Ord"", pair (TVar(Tyvar(""a"", Star)))
                                  (TVar(Tyvar(""b"", Star)))))

  (* 7.3 Entailment *)

  let rec bySuper (ce:classEnv) (IsIn(i, t) as p) =
    p :: concat (map (fun i' -> bySuper ce (IsIn(i', t))) (super ce i))

  let _ =
    let preds = bySuper (exampleInsts initialEnv) (IsIn(""Num"", TVar(Tyvar(""a"", Star)))) in
    Printf.printf ""ps = %s\n"" (ps preds)

  let byInst (ce:classEnv) (IsIn(i, t) as p) =
    let tryInst (Qual(ps, h)) =
      try
       let u = matchPred h p in
       Some (map (predApply u) ps)
      with _ -> None in
    let rec msum = function
      | [] -> None
      | None :: xs -> msum xs
      | x :: _ -> x in
    msum (map tryInst (insts ce i))

  let _ =
    let preds = byInst (exampleInsts initialEnv) (IsIn(""Num"", TVar(Tyvar(""a"", Star)))) in
    match preds with
    | Some(preds) -> Printf.printf ""ps = some(%s)\n"" (ps preds)
    | None -> Printf.printf ""ps = none\n""

  let rec entail (ce:classEnv) ps p =
    exists (mem p) (map (bySuper ce) ps) ||
    match byInst ce p with
    | None -> false
    | Some qs -> for_all (entail ce ps) qs

  let _ =
    let p = IsIn(""Num"", TVar(Tyvar(""a"", Star))) in
    let ps = [p] in
    let result = entail (exampleInsts initialEnv) ps p in
    Printf.printf ""result = %b\n"" result

  (* 7.4 Context Reduction *)

  let inHnf (p:pred):bool =
    match p with
    | IsIn(_, t) ->
      let rec hnf = function
        | TVar _ -> true
        | TCon _ -> false
        | TAp(t, _) -> hnf t
        | TGen _ -> failwith ""context reduction on generic variable""
      in
      hnf t

  let _ =
    let r = inHnf (IsIn(""Num"",TVar(Tyvar(""a"", Star)))) in
    Printf.printf ""inHnf %b\n"" r; (* true *)
    let r = inHnf (IsIn(""Num"",tInt)) in
    Printf.printf ""inHnf %b\n"" r (* false *)

  let rec toHnfs (ce:classEnv) ps = concat (map (toHnf ce) ps)
  and toHnf (ce:classEnv) p =
    if inHnf p then [p]
    else
      match byInst ce p with
      | None -> failwith ""context reduction""
      | Some ps -> toHnfs ce ps

  let _ =
    let preds = [IsIn(""Num"",TVar(Tyvar(""a"", Star)))] in
    let preds = toHnfs initialEnv preds in
    Printf.printf ""toHnf %s\n"" (ps preds)

  let _ =
    let pred = IsIn(""Num"",TVar(Tyvar(""a"", Star))) in
    let preds = toHnf initialEnv pred in
    Printf.printf ""toHnf %s\n"" (ps preds)

  let simplify (ce:classEnv) ps =
    let rec loop rs = function
      | [] -> rs
      | p :: ps ->
        if entail ce (rs @ ps) p then loop rs ps
        else loop (p :: rs) ps in
    loop [] ps

  let _ =
    let pred = IsIn(""Num"", TVar(Tyvar(""a"", Star))) in
    let preds = [pred] in
    let preds = simplify (exampleInsts initialEnv) preds in
    Printf.printf ""simplify = %s\n"" (ps preds)

  let reduce (ce:classEnv) ps =
    simplify ce (toHnfs ce ps)

  let _ =
    let pred = IsIn(""Num"", TVar(Tyvar(""a"", Star))) in
    let preds = [pred] in
    let preds = reduce (exampleInsts initialEnv) preds in
    Printf.printf ""reduce = %s\n"" (ps preds)

  let scEntail (ce:classEnv) ps p =
    exists (mem p) (map (bySuper ce) ps)

  let _ =
    let pred = IsIn(""Num"", TVar(Tyvar(""a"", Star))) in
    let preds = [pred] in
    let result = scEntail (exampleInsts initialEnv) preds pred in
    Printf.printf ""scEntail = %b\n"" result
end

open Kind
open Type
open Subst
open Pred
(* 7.1 Basic definitions *)
let _ =

  (* predTv *)

  (* predsTv *)

  (* qualTypeTv *)

  (* lift *)

  (* mguPred *)
  (* matchPred *)

  (* class_ = Id.id list * inst list *)

  ()
",ocaml
"open Quartic
open Base
open Js_of_ocaml

let draw_prime_graph cy parent (id_graph : Tree.id_graph) =
  let () = List.iter id_graph.nodes ~f:(fun id ->
    let rep_id = String.concat [(Int.to_string id); ""-rep""] |> Js.string in
    let node = object%js 
      val group = Js.string ""nodes""
      val data = object%js
        val label = Js.string """"
        val polarisation = true
        val id = rep_id
        val parent = parent
      end
    end
    in
    let added_node = cy##add (Js.Unsafe.coerce node) in
    let edge = object%js
      val data = object%js
        val source = rep_id
        val target = Int.to_string id |> Js.string
      end
    end
    in
    let added_edge = cy##add (Js.Unsafe.coerce edge) in
    let () = (Js.Unsafe.coerce added_edge)##addClass (Js.string ""compoundOut"") in
    (Js.Unsafe.coerce added_node)##addClass (Js.string ""inCompound""))
  in
  let () = List.iter id_graph.edges ~f:(fun (id1, id2) ->
    let edge = object%js
      val data = object%js
        val source = String.concat [(Int.to_string id1); ""-rep""] |> Js.string
        val target = String.concat [(Int.to_string id2); ""-rep""] |> Js.string
      end
    end
    in
    let added_edge = cy##add (Js.Unsafe.coerce edge) in
    (Js.Unsafe.coerce added_edge)##addClass (Js.string ""compoundIn""))
  in
  ()

let draw_before cy parent tl =
  let rep_id_list = List.map tl ~f:(fun t ->
    let id = Int.to_string t.Tree.id in
    let rep_id = String.concat [id; ""-rep""] |> Js.string in
    let node = object%js 
      val group = Js.string ""nodes""
      val data = object%js
        val label = Js.string """"
        val polarisation = true
        val id = rep_id
        val parent = parent
      end
    end
    in
    let added_node = cy##add (Js.Unsafe.coerce node) in
    let edge = object%js
      val data = object%js
        val source = rep_id
        val target = Js.string id
      end
    end
    in
    let added_edge = cy##add (Js.Unsafe.coerce edge) in
    let () = (Js.Unsafe.coerce added_edge)##addClass (Js.string ""compoundOut"") in
    let () = (Js.Unsafe.coerce added_node)##addClass (Js.string ""inCompound"") in
    rep_id)
  in

  let rec draw_inner il =
    match il with
    | [] -> ()
    | [_] -> ()
    | h1 :: h2 :: t ->
      let edge = object%js
        val data = object%js
          val source =  h2
          val target =  h1
        end
      end
      in
      let added_edge = cy##add (Js.Unsafe.coerce edge) in
      let () = (Js.Unsafe.coerce added_edge)##addClass (Js.string ""before"") in
      let () = if List.is_empty t then (cy##getElementById h2)##addClass (Js.string ""before-root"") in 
      draw_inner (h2 :: t)
  in
  draw_inner rep_id_list

let rec draw_tree cy (tree : Tree.tree) =
  let id = Int.to_string tree.id |> Js.string in
  let group = Js.string ""nodes"" in
  let label, polarisation, id_list, class_ =
    match tree.connective with
    | Atom atom -> Js.string atom.label, Js.bool atom.pol, None, ""atom""
    | Tensor tl ->
      let id_list = List.map tl ~f:(draw_tree cy) in
      Js.string ""⊗"", Js.bool true, Some id_list, ""tensor""
    | Par tl ->
      let id_list = List.map tl ~f:(draw_tree cy) in
      Js.string ""⅋"", Js.bool true, Some id_list, ""par""
    | Before tl ->
      let id_list = List.map tl ~f:(draw_tree cy) in
      Js.string """", Js.bool true, Some id_list, ""before""
    | Prime (_, tl) ->
      let id_list = List.map tl ~f:(draw_tree cy) in
      Js.string """", Js.bool true, Some id_list, ""prime""
  in
  let node = object%js
    val group = group
    val data = object%js
      val id = id
      val label = label
      val polarisation = polarisation
    end
  end
  in
  let added = cy##add (Js.Unsafe.coerce node) in
  let () = (Js.Unsafe.coerce added)##addClass (Js.string class_) in
  let () = 
    match id_list with
    | None -> ()
    | Some ids ->
      match tree.connective with
      | Prime (id_graph,_) -> draw_prime_graph (Js.Unsafe.coerce cy) id id_graph 
      | Before tl -> draw_before (Js.Unsafe.coerce cy) id tl
      | _ ->
        List.iter ids ~f:(fun target_id ->
          let edge = object%js 
            val data = object%js
              val source = id
              val target = target_id
            end
          end
          in
          let _ = cy##add (Js.Unsafe.coerce edge) in ())
  in    
  (Int.to_string tree.id) |> Js.string

let draw_graph ?directed cy (graph : Graph.graph) =
  Set.iter graph.nodes ~f:(fun v ->
    match v.connective with
    | Atom atom -> 
      let node = object%js
        val group = Js.string ""nodes""
        val data = object%js
          val id = Int.to_string v.id |> Js.string
          val label = Js.string atom.label
          val polarisation = Js.bool atom.pol
        end
      end
      in
      cy##add node 
    | _ -> ());
  let edge_list = Graph.edge_tuple_list ?directed:directed graph.edges in
  List.iter edge_list ~f:(fun (src, trgt) ->
    let edge = object%js
      val group = Js.string ""edges""
      val data = object%js
        val source = Int.to_string src.id |> Js.string
        val target = Int.to_string trgt.id |> Js.string
      end
    end
    in
    (Js.Unsafe.coerce cy)##add edge)",ocaml
"open Utils

external addClass : Dom.domTokenList -> string -> unit = ""add"" [@@bs.send]
external addEventListener : Dom.element -> string -> (unit -> unit) -> unit = ""addEventListener"" [@@bs.send]
external appendChild : Dom.element -> Dom.element -> unit = ""appendChild"" [@@bs.send]
external createElement : string -> Dom.element = ""createElement"" [@@bs.val][@@bs.scope ""document""]
external getClassList : Dom.element -> Dom.domTokenList = ""classList"" [@@bs.get]
external getFirstChild : Dom.element -> Dom.element Js.null = ""firstChild"" [@@bs.get]
external getStyles : Dom.element -> Dom.cssStyleDeclaration = ""style"" [@@bs.get]
external getValue : Dom.element -> string = ""value"" [@@bs.get]
external normalize : string -> string -> string = ""normalize"" [@@bs.send]
external querySelector : string -> Dom.element option = ""querySelector"" [@@bs.val][@@bs.scope ""document""][@@bs.return nullable]
external removeChild : Dom.element -> Dom.element -> unit = ""removeChild"" [@@bs.send]
external setStyle : Dom.cssStyleDeclaration -> string -> string -> unit = """" [@@bs.set_index]
external setTextContent : Dom.element -> string -> unit = ""textContent"" [@@bs.set]
external setTitle : Dom.element -> string -> unit = ""title"" [@@bs.set]
external toLowerCase : string -> string = ""toLowerCase"" [@@bs.send]

type layout = Horz | Vert
let string_of_layout = function
  | Horz -> ""horz""
  | Vert -> ""vert""

type color = string
type flex = bool
type size = float
type width = float
type help = string

type component
  = BorderBox of color * width * component
  | Box of layout * flex * component list
  | HelpText of color * size * string * help
  | Space of float
  | Text of color * size * string



let rec draw : component -> Dom.element = function
  | BorderBox(color, width, c) ->
      let ele = createElement ""div"" in
      let sty = getStyles ele in
      setStyle sty ""border-color"" color;
      setStyle sty ""border-style"" ""solid"";
      setStyle sty ""border-width"" (Js.Float.toString width ^ ""px"");
      appendChild ele (draw c);
      ele
  | Box(layout, flex, cs) ->
      let ele = createElement ""div"" in
      if flex then
        addClass (getClassList ele) ""flex"";
      addClass (getClassList ele) ""box"";
      addClass (getClassList ele) (string_of_layout layout);
      List.iter (appendChild ele % draw) cs;
      ele
  | HelpText(color, size, text, altText) ->
      let ele = createElement ""span"" in
      addClass (getClassList ele) ""help"";
      let sty = getStyles ele in
      setStyle sty ""color"" color;
      setStyle sty ""font-size"" (Js.Float.toString size ^ ""em"");
      setTextContent ele text;
      setTitle ele altText;
      ele
  | Space(size) ->
      let ele = createElement ""span"" in
      setStyle (getStyles ele) ""font-size"" (Js.Float.toString size ^ ""em"");
      setTextContent ele ""\xa0"";
      ele
  | Text(color, size, text) ->
      let ele = createElement ""span"" in
      let sty = getStyles ele in
      setStyle sty ""color"" color;
      setStyle sty ""font-size"" (Js.Float.toString size ^ ""em"");
      setTextContent ele text;
      ele

let rec removeAllChildren (ele: Dom.element) : unit =
  match Js.nullToOption (getFirstChild ele) with
  | Some child -> removeChild ele child; removeAllChildren ele
  | None -> ()

let update (c: component) (ui: Dom.element) =
  let c' = draw c in
  removeAllChildren ui;
  appendChild ui c'



let error (s: string) : component = Text(""#ff0000"", 2.0, s)

let ui_func : (Theme.t -> string -> component) ref =
  ref (fun _ _ -> error ""No ui_func set!"")

let set_func (f: Theme.t -> string -> component) : unit =
  ui_func := f

let theme : Theme.t ref = ref Theme.default

let set_theme (t: Theme.t) : unit =
  theme := t

let () =
  match querySelector ""#ui"" with
  | Some ui ->
    begin
      match querySelector ""#text"" with
      | Some ele -> addEventListener ele ""change"" (fun () ->
          let c = try
            (!ui_func) (!theme) (normalize (toLowerCase (getValue ele)) ""NFC"")
          with
            | Failure(s) -> error s
            | Js.Exn.Error e ->
              let msg = match Js.Exn.message e with
              | Some message -> error message
              | None -> error ""An unknown error occurred""
              in begin
                match Js.Exn.stack e with
                | Some stack -> Box(Vert, true, [msg; error stack])
                | None -> msg
              end
            | exc -> error (Printexc.to_string exc)
          in update c ui)
      | None -> failwith ""No #text element!""
    end
  | None -> failwith ""No #ui element!""
",ocaml
"(* Options and arguments parsing *)

open Arg

(* Todo : find a proper place to put the file *)
let _index_file_path = ref ((Sys.getcwd ())^""/opam-doc.idx"")
let _default_index_name = ref ""index.html""
let _filter_pervasives = ref false
let _clear_index = ref false
let _always_proceed = ref false
let _package_descr = ref """"
let _current_package = ref ""test""
let _base_uri = ref ""/""
let _summary = ref None

let index_file_path () = !_index_file_path
let default_index_name () = !_default_index_name
let filter_pervasives () = !_filter_pervasives
let clear_index () = !_clear_index
let always_proceed () = !_always_proceed
let package_descr () = !_package_descr
let current_package () = !_current_package
let base_uri () = !_base_uri
let summary () = !_summary

let set_current_package p = _current_package := p
let set_summary s = _summary := Some s

let options  = 
  [ (""--package"", Set_string _current_package, ""Specify the package"")
  ; (""-p"", Set_string _current_package, ""Specify the package"")
  ; (""--package-description"", Set_string _package_descr, ""Add a description to the package"")
  ; (""-descr"", Set_string _package_descr, ""Add a description to the package"")
  ; (""--base"", Set_string _base_uri, ""Specify the base url"")
  ; (""--summary"", String set_summary, ""Specify the summary page"")
  ; (""-index"", Set_string _index_file_path, ""Use a specific index file to use rather than the default one"")
  ; (""--filter-pervasives"", Set _filter_pervasives, ""Remove the 'Pervasives' label to Pervasives' references"")
  ; (""--clear-index"", Set _clear_index, ""Clear the global index before processing"")
  ; (""-y"", Set _always_proceed, ""Answer yes to all questions prompted"")
  ]

let usage = ""Usage: opam-doc [--package 'package_name'] <cm[dt] files>""


(* Html config *)

let doctype = ""<!DOCTYPE HTML>\n""
let character_encoding =
  <:html<<meta content=""text/html; charset=iso-8859-1"" http-equiv=""Content-Type"" />&>>

let default_stylesheet_css =
  let open Cow in
  <:css<

  .footer {
    color: #555555;
    border-top: 1px solid #eeeeee;
    font-size: 0.8rem;
    font-style: italic;
    padding-top: 0.4rem;
    margin-top: 1rem;
  }

  table.typetable { background: none; border: none; }
  table.typetable thead,
  table.typetable tfoot {
    background: none; font-weight: bold; }
  table.typetable thead tr th,
  table.typetable thead tr td,
  table.typetable tfoot tr th,
  table.typetable tfoot tr td {
    font-size: 1rem;
    color: #222222;
    text-align: left; }
  table.typetable tr th,
  table.typetable tr td {
    padding: 0px;
    font-size: 1rem;
    color: #222222; }
  table.typetable tr.even, table.typetable tr.alt, table.typetable tr:nth-of-type(even) {
    background: none; }
  table.typetable thead tr th,
  table.typetable tfoot tr th,
  table.typetable tbody tr td,
  table.typetable tr td,
  table.typetable tfoot tr td {
    display: table-cell;
  } 

  table.indextable { background: white; border: none; }
  table.indextable thead,
  table.indextable tfoot {
    background: white; font-weight: bold; }
  table.indextable thead tr th,
  table.indextable thead tr td,
  table.indextable tfoot tr th,
  table.indextable tfoot tr td {
    font-size: 1rem;
    color: #222222;
    text-align: left; }
  table.indextable tr th,
  table.indextable tr td {
    padding: 0.2625rem 0.225rem;
    font-size: 1rem;
    color: black; }
  table.indextable tr.even, table.indextable tr.alt, table.indextable tr:nth-of-type(even) {
    background: whitegrey; }
  table.indextable thead tr th,
  table.indextable tfoot tr th,
  table.indextable tbody tr td,
  table.indextable tr td,
  table.indextable tfoot tr td {
    display: table-cell;
  } 

  #opamdocroot .panel.callout { 
    padding: 0.5rem;
    background: #fdfdfd;
    border: none;
  }

  p { line-height: 1.1rem; margin-bottom: 0.8rem; }
  body { 
    font-family: 'Source Sans Pro', sans-serif;
    color: black;
  }
  #opamdocroot h1 {
    font-family: ""Source Sans Pro"", sans-serif;
    font-weight: bold;
    font-size: 1.6rem;
  }
  #opamdocroot h2 {
    font-family: ""Source Sans Pro"", sans-serif;
    font-weight: bold;
    font-size: 1.4rem;
  }
  #opamdocroot h3 {
    font-family: ""Source Sans Pro"", sans-serif;
    font-weight: bold;
    font-size: 1.2rem;
  }
  #opamdocroot h4 {
    font-family: ""Source Sans Pro"", sans-serif;
    font-weight: bold;
    font-size: 1.2em;
  }
  #opamdocroot h5 {
    font-family: ""Source Sans Pro"", sans-serif;
    font-weight: bold;
    font-size: 1.2rem;
  }
  #opamdocroot h6 {
    font-family: ""Source Sans Pro"", sans-serif;
    font-weight: bold;
    font-size: 1.2rem;
  }

  pre.odoccode {
    background: #eeeeee;
    border-top: 1px solid #cccccc;
    padding: 5px;
    margin-top: 10px;
  }
  .top-bar input { height: 2.1em; }
  .keyword { color: #f47421; font-weight: bold; }
  .keywordsign { color: #f47421; }
  .superscript { font-size: 4; }
  .subscript { font-size: 4; }
  .comment { color: #747474; font-style: italic; }
  .constructor { color: #15c17a; }
  .type { color: #c746cc; }
  .string { color: #09a7e2; }
  .warning { color: Red ; font-weight: bold; }
  .param_info { margin-top: 4px; margin-left: 3em; margin-right: 3em; }
  .code { color: #465F91 ; }
  .typetable { border-style: hidden; }
  .paramstable { border-style: hidden ; padding: 5pt 5pt; }
   td.typefieldcomment { font-size: smaller ;}
   div.sig_block {margin-left: 2em; }
   *:target { background: yellow; }

  pre { font-family: monospace; margin-bottom: 0.8rem; }
  #opamdocroot pre {
    white-space: pre-wrap;       /* css-3 */
    white-space: -moz-pre-wrap;  /* Mozilla, since 1999 */
    white-space: -pre-wrap;      /* Opera 4-6 */
    white-space: -o-pre-wrap;    /* Opera 7 */
    word-wrap: break-word;       /* Internet Explorer 5.5+ */
    font-weight: normal;
    color: #333333;
    font-family: monospace;
  }

  #opamdocroot code {
    font-weight: normal;
    color: #333333;
    font-family: monospace;
  }

  .deprecated {color: #888; font-style: italic; }

  ul.indexlist { margin-left: 0; padding-left: 0; }
  ul.indexlist li { list-style-type: none ; margin-left: 0; padding-left: 0; }

  .ocaml_expanded_include_0 { background-color: #FFF0F0; border-width: thin; border-style: solid; border-color: #E5E0E0;}
  .ocaml_expanded_include_1 { background-color: #F0F0FF; border-width: thin; border-style: solid; border-color: #E0E0E5;}
  .ocaml_expanded_include_2 { background-color: #F0FFF0; border-width: thin; border-style: solid; border-color: #E0E5E0;}
  .ocaml_expanded_include_3 { background-color: #FFF0FF; border-width: thin; border-style: solid; border-color: #E5E0E5;}
  .ocaml_expanded_include_4 { background-color: #FFFFF0; border-width: thin; border-style: solid; border-color: #E5E5E0;}
  .ocaml_expanded_include_5 { background-color: #F0FFFF; border-width: thin; border-style: solid; border-color: #E0E5E5;}
  .ocaml_expanded_include_6 { background-color: #F0F5F0; border-width: thin; border-style: solid; border-color: #E5E0E0;}
  pre.ocaml_include_handle { display: inline; }

  .ocaml_expander_plus {
     position: relative;
     float: left;
     width: 7px;
     height: 7px;
     background: silver;
     border-style: solid;
     border-width: 1px;
     margin: 3px;
  }
  .ocaml_expander_plus::before {
     content: '';
     position: absolute;
     left: 3px;
     top: 1px;
     width: 1px;
     height: 5px;
     background: black;
  }
  .ocaml_expander_plus::after {
     content: '';
     position: absolute;
     left: 1px;
     top: 3px;
     width: 5px;
     height: 1px;
     background: black;
  }
  .ocaml_expander_minus {
     position: relative;
     float: left;
     width: 7px;
     height: 7px;
     background: silver;
     border-style: solid;
     border-width: 1px;
     margin: 3px;
  }
  .ocaml_expander_minus:hover {
     background: grey;
  }
  .ocaml_expander_minus::after {
     content: '';
     position: absolute;
     left: 1px;
     top: 3px;
     width: 5px;
     height: 1px;
     background: black;
  }
  .ocaml_expander_disabled {
     position: relative;
     float: left;
     width: 7px;
     height: 7px;
     background: silver;
     border-style: solid;
     border-color: grey;
     border-width: 1px;
     margin: 3px;
  }
  .ocaml_expander_disabled::before {
     content: '';
     position: absolute;
     left: 3px;
     top: 1px;
     width: 1px;
     height: 5px;
     background: grey;
  }
  .ocaml_expander_disabled::after {
     content: '';
     position: absolute;
     left: 1px;
     top: 3px;
     width: 5px;
     height: 1px;
     background: grey;
  }
   >>
let default_stylesheet = Cow.Css.to_string default_stylesheet_css

(** Marks used to generate id attributes *)
type mark = Attribute | Type | Type_elt | Function | Exception | Value | Method | Title

let jquery_online_url = ""http://ajax.googleapis.com/ajax/libs/jquery/1.10.1/jquery.min.js""

let style_filename = ""style.css""

let style_url () = base_uri () ^ ""/"" ^ style_filename

let style_tag () =
  <:html<<link rel=""stylesheet"" href=""$str:style_url ()$"" type=""text/css"" />&>>

(* Config script *)

let config_tag () = 
  <:html<<script type=""text/javascript"">
var ocaml_package = '$str:current_package ()$'
var ocaml_base = '$str:base_uri ()$'
</script>&>>

(* Ajax loading *)

let script_filename = ""doc_loader.js""

let script_url () = base_uri () ^ ""/"" ^ script_filename

let script_tag () =
  <:html<<script type=""text/javascript"" src=""$str:jquery_online_url$""> </script>
<script type=""text/javascript"" src=""$str:script_url ()$""> </script>&>>

let default_script = 
""var opamdoc_contents = '#opamdocroot'

// utility - Fetch HTML from URL using ajax
function ajax(url, cont){
    console.log('AJAX request : ' + url);
    $.ajax({
        type: 'GET',
        url:url,
        async:true,
        dataType: 'html'
    }).done(function(data){
        cont($(data));
    }).fail(function(){
        console.log('AJAX request failed : ' + url);
    });
}

function isLIdent(ident) {
    var chr = ident.charAt(0);
    return (chr !== chr.toUpperCase()
            && chr === chr.toLowerCase())
}

var url_regexp = /^(.*)\/([^/]*)\/(?:#(.*))?$/

function Path(url){

    this.package = null;
    this.module = null;
    this.subnames = [];
    this.subkinds = [];

    var match = url_regexp.exec(url);

    var base = match[1];
    var package = match[2];
    var hash = match[3];

    if(base === ocaml_base) {

      this.package = package;

      if(typeof hash !== 'undefined' && hash !== '') {
          var modstring = hash;
          var names = [];
          var kinds = [];
          var done = false;
          var sep = '.'
          var i = 0;
          while(!done) {
              var dot_index = modstring.indexOf('.');
              var colon_index = modstring.indexOf(':');
              if(dot_index > 0 && (dot_index < colon_index || colon_index < 0)) {
                  names[i] = modstring.substring(0, dot_index);
                  if(sep === ':') {
                    kinds[i] = 'modtype';
                  } else if(isLIdent(names[i])) {
                    kinds[i] = 'class';
                  } else {
                    kinds[i] = 'module';
                  }
                  sep = '.';
                  modstring = modstring.substring(dot_index + 1);
              } else if(colon_index > -1) {
                  names[i] = modstring.substring(0, colon_index);
                  if(sep === ':') {
                    kinds[i] = 'modtype';
                  } else if(isLIdent(names[i])) {
                    kinds[i] = 'class';
                  } else {
                    kinds[i] = 'module';
                  }
                  sep = ':';
                  modstring = modstring.substring(colon_index + 1);
              } else {
                  names[i] = modstring;
                  if(sep === ':') {
                    kinds[i] = 'modtype';
                  } else if(isLIdent(names[i])) {
                    kinds[i] = 'class';
                  } else {
                    kinds[i] = 'module';
                  }
                  done = true;
              }
              i++;
          }
          this.module = names[0];
          if(names.length > 1) {
              this.subnames = names.splice(1);
              this.subkinds = kinds.splice(1);
          }
      }
  }
}

Path.prototype.name = function () {
    var name = null;
    if(this.package !== null) {
        name = this.package;
        if(this.module !== null) {
            name = this.module;
            if(this.subnames.length > 0){
                name += '.' + this.subnames.join('.');
            } 
        }
    }        
    return name;
}

Path.prototype.url = function () { 
    var url = null;
    if(this.package !== null) {
        url = ocaml_base + '/' + this.package;
        if(this.module !== null) {
            url += '/#' + this.module;
            for(var i = 0; i < this.subnames.length; i++) {
                if(this.subkinds[i] === 'modtype') {
                    url += ':' + this.subnames[i];
                } else {
                    url += '.' + this.subnames[i];
                }
            } 
        }
    }        
    return url;
}

function Copy(path) {
    this.package = path.package;
    this.module = path.module;
    this.subnames = path.subnames.slice(0);
    this.subkinds = path.subkinds.slice(0);
}

Copy.prototype = Path.prototype

Path.prototype.copy = function () { return new Copy(this) }

Path.prototype.extend = function (name, kind) { 
    this.subnames[this.subnames.length] = name;
    this.subkinds[this.subkinds.length] = kind;
}

Path.prototype.substitute = function (from, to) {
    if(this.package === from.package) {
        if(this.module === from.module) {
            if(this.subnames.length > from.subnames.length) {
                var equal = true;
                for(var i = 0; i < from.subnames.length; i++) {
                    if(from.subnames[i] !== this.subnames[i]) {
                        equal = false;
                    } else if(from.subkinds[i] !== this.subkinds[i]) {
                        equal = false;
                    }
                }
                if(equal) {
                    this.package = to.package;
                    this.module = to.module;
                    var subnames = to.subnames.slice(0);
                    var subkinds = to.subkinds.slice(0);
                    for(var i = from.subnames.length; i < this.subnames.length; i++) {
                        subnames[subnames.length] = this.subnames[i];
                        subkinds[subkinds.length] = this.subkinds[i];
                    }
                    this.subnames = subnames;
                    this.subkinds = subkinds;
                    return true;
                }
            }
        }
    }
    return false;
}

function Parent(path) {
    this.package = null;
    this.module = null;
    this.subnames = [];
    this.subkinds = [];

    if(path.package !== null) {
        if(path.module !== null) {
            this.package = path.package;
            if(path.subnames.length > 0) {
                this.module = path.module;
                this.subnames = path.subnames.slice(0, -1);
                this.subkinds = path.subkinds.slice(0, -1);
            }
        } 
    }
}

Parent.prototype = Path.prototype

Path.prototype.parent = function () { return new Parent(this) }

function PathVisitor(path) {
    this.path = path;
    this.subnames = path.subnames.slice(0);
    this.subkinds = path.subkinds.slice(0);
}

PathVisitor.prototype.current = function (){
    if(this.subnames.length > 0) {
        return {kind: this.subkinds[0], name: this.subnames[0]};
    } else {
        return null;
    }
}

PathVisitor.prototype.next = function (){
    if(this.subnames.length > 0) {
        this.subnames.shift();
        this.subkinds.shift();
    }
    return this;
}

PathVisitor.prototype.concat = function(pv){
    this.subnames = this.subnames.concat(pv.subnames);
    this.subkinds = this.subkinds.concat(pv.subkinds);
    this.path.subnames = this.path.subnames.concat(pv.subnames);
    this.path.subkinds = this.path.subkinds.concat(pv.subkinds);

    return this;
}


function Page(path, kind){
    this.path = path;
    this.kind = kind;
    this.alias = null;
    this.summary = null;
    this.body = null;
    this.constraints = null;
    this.typ = null;
}

Page.prototype.parent_link = function() {
    var parent = this.path.parent();
    var title = parent.name();
    var url = parent.url();
    if (title === null || url === null) {
        title = this.path.name();
        url = ocaml_base + '/';
        $('#bccurpkg').attr('class','current').html(this.path.name());
        $('#bccurpkgmod').attr('class','hide');
    } else {
        $('#bccurpkg').attr('class','').html(
          $('<a>', {title: title, href: url, text: title }));
        $('#bccurpkg').attr('class','');
        $('#bccurpkgmod').attr('class','current');
        $('#bccurpkgmod').html(this.path.name ());
    }
}

Page.prototype.title = function(){
    var name = this.path.name();
    if(this.kind === 'module') {
        fullName = 'Module ' + name;
    } else if(this.kind === 'modtype') {
        fullName = 'Module type ' + name;
    } else if(this.kind === 'class') {
        fullName = 'Class ' + name;
    } else {
        fullName = 'Package ' + name;
    }

    var alias = null;
    var sep = '';
    if(this.alias !== null) {
        if(this.path.modtype !== null) {
          sep = ' = ';
        } else {
          sep = ' : ';
        }
        alias = $('<a>', 
                  {href    : this.alias.url(),
                   text    : this.alias.name()});
    }
     
    return $('<h1>')
        .addClass('ocaml_title')
        .append(fullName + sep)
        .append(alias);
}

function display_page(page){
    page.parent_link();
    var title = page.title();
    var summary = page.summary;
    var head = $('<div>')
        .addClass('panel')
        .addClass('callout')
        .append(title)
        .append(summary);
    var rule = $('<hr/>').attr('width','100%');
    var body = $('<div>')
        .addClass('column')
        .addClass('small-12')
        .addClass('medium-11')
        .addClass('large-9')
        .addClass('ocaml_body')
        .append(page.body);

    var content = $('<div>')
        .addClass('ocaml_page')
        .append(head)
        .append(body);

    $(opamdoc_contents).html(content);
}

function show_type(typ) {
    if(typ !== null) {
        var types = $('pre > span.TYPE'+typ).filter(':visible');
        if (types.length == 0){
            types = $('pre > code > span.TYPE'+typ).filter(':visible');;
        }
        if (types.length > 0) {
            var pos = types.position().top - (window.innerHeight / 5);
            if(pos < 0) {
                pos = 0;
            }
            window.scrollTo(0, pos);
            types.css('background', 'yellow');
        }
    }
}

function load_page(page, pv, input, cont) {

    var current = pv.current();
    var data = $('> div.ocaml_content', input);

    if(current === null) {
        page.summary = $('> div.ocaml_summary', input);
        page.body = data;
        if(page.path !== pv.path) {
            page.alias = pv.path
        }
        cont(page);
    } else {

        var kind = current.kind;
        var name = current.name;

        var query = '> div.ocaml_' + kind + '[name=' + name + ']'
        var subdata = $(query, data)

        if(subdata.length === 0) {

            var try_type = (kind === 'class');

            var includes = $('> div.ocaml_include', data);

            for (var i = 0; i < includes.length; i++){

                var items = JSON.parse($(includes[i]).attr('items'));

                if (items.indexOf(name) !== -1){
                    try_type = false;

                    var pathAttr = $(includes[i]).attr('path');

                    if (typeof pathAttr === 'undefined'){
                        load_page(page, pv, includes[i], cont);
                    } else {
                        var include_path = new Path(pathAttr);
                        var include_pv = new PathVisitor(include_path);

                        var include_url = ocaml_base + '/' + include_path.package + '/' + include_path.module +'.html'
                        
                        ajax(include_url, function(data){
                            load_page(page, include_pv.concat(pv), data, cont);
                        });
                    }
                }
            }

            if(try_type) {
                var types = $('pre > span.TYPE'+name, data);
                if (types.length == 0){
                    types = $('pre > code > span.TYPE'+name, data);
                }
                if (types.length > 0){
                    page.summary = $('> div.ocaml_summary', input);
                    page.body = data;
                    page.typ = name;
                    if(page.path !== pv.path) {
                        page.alias = pv.path.parent();
                    }
                    page.path = page.path.parent();
                    cont(page);
                } else {
                    for (var i = 0; i < includes.length; i++){
                        var items = JSON.parse($(includes[i]).attr('types'));
                        if (items.indexOf(name) !== -1){
                            page.summary = $('> div.ocaml_summary', input);
                            page.body = data;
                            page.typ = name;
                            if(page.path !== pv.path) {
                                page.alias = pv.path.parent();
                            }
                            page.path = page.path.parent();
                            cont(page);
                        }
                    }
                }
            }

        } else {
            page.kind = kind;

            var pathAttr = subdata.attr('path');

            if (typeof pathAttr === 'undefined'){
                load_page(page, pv.next(), subdata, cont);
            } else {
               
                var alias_path = new Path(pathAttr);
                var alias_pv = new PathVisitor(alias_path);

                var alias_url = ocaml_base + '/' + alias_path.package + '/' + alias_path.module +'.html'

                ajax(alias_url, function(data){
                    load_page(page, alias_pv.concat(pv.next()), data, cont);
                });
            }
        }
    }
}

function load_path(path, cont) {
    if(path.module !== null) {
        var url = ocaml_base + '/' + path.package + '/' + path.module + '.html';
        ajax(url, function(data){
            var pg = new Page(path, 'module');
            var pv = new PathVisitor(path);
            
            load_page(pg, pv, data, cont);
        });
    } else {
        var url = ocaml_base + '/' + path.package + '/summary.html';
        ajax(url, function(data){
            var pg = new Page(path, 'package');
            pg.body = data;
            cont(pg);
        });
    }
}

function Group(parent, node) {
    if(typeof parent !== 'undefined' && typeof node !== 'undefined'){
        this.typ = null;
        if(parent !== null) {
            this.depth = parent.depth + 1;
            this.icount = parent.icount;
            this.auto_expand = parent.auto_expand;
            this.filters = parent.filters;
            this.current = parent.current;
            this.decorate = parent.decorate_children;
            this.decorate_children = parent.decorate_children;
        } else {
            this.depth = 0;
            this.icount = 6;
            this.auto_expand = true;
            this.filters = [];
            this.current = null;
            this.decorate = true;
            this.decorate_children = true;
        }
        this.expanded = this.auto_expand;
        this.loading = false;
        if(node !== null) {
            this.node = node;
            this.content = null;
            var pathAttr = this.node.attr('path');
            if(typeof pathAttr !== 'undefined') {
                this.path = new Path(pathAttr);
            } else {
                this.path = null;
            }
            this.handle = this.node.children();
        } else {
            this.node = null;
            this.content = null;
            this.path = null;
            this.handle = null;
        }
    }
}

Group.prototype.load_content = function(data){
    this.update_links(data);
    this.load_children(data);
    this.content = data;
}

Group.prototype.add_filter = function(from, to){
    this.filters = this.filters.slice(0);
    this.filters[this.filters.length] = { from: from, to: to };
}

Group.prototype.show_unexpanded = function(){ }

Group.prototype.show_expanded = function(){ }

Group.prototype.show_disabled = function(){ }

Group.prototype.expand = function(expand){
    if(typeof expand === 'undefined') {
        expand = ! this.expanded;
    }
    if(expand) {
        if(this.content === null) {
            if(! this.loading) {
                this.loading = true;
                var self = this;
                var load = function(page){
                    if(page.alias !== null) {
                        self.add_filter(page.alias, self.current);
                    } else {
                        self.add_filter(page.path, self.current);
                    }
                    self.load_content(page.body);
                    self.show_expanded(true);
                };
                load_path(this.path, load);
            }
        } else {
            this.show_expanded(true);
        }
    } else {
        this.show_unexpanded(true);
    }
}

Group.prototype.show = function(){
    if(this.content === null && this.path === null) {
        this.show_disabled();
    } else {
        if(this.auto_expand) {
            if(this.content === null) {
                this.loading = true;
                this.show_unexpanded(false);
                var self = this;
                var load = function(page){
                    if(page.alias !== null) {
                        self.add_filter(page.alias, self.current);
                    } else {
                        self.add_filter(page.path, self.current);
                    }
                    self.load_content(page.body);
                    self.show_expanded(false);
                    show_type(self.typ)
                };
                load_path(this.path, load);
            } else {
                this.show_expanded(false);
            }
        } else {
            this.show_unexpanded(false);
        }
    }
}

Group.prototype.update_links = function(data) {
    var links = $('a.ocaml_internal', data);
    var filters = this.filters;
    links.each(function(){
        var url = $(this).attr('href');
        var path = new Path(url);
        var changed = false;
        for(var i = 0; i < filters.length; i++) {
            if(path.substitute(filters[i].from, filters[i].to)) {
                changed = true;
                break;
            }
        }
        if(changed) {
            $(this).attr('href', path.url())
        }
    });
}

function IncludeGroup(parent, node, label, idx) {
    Group.call(this, parent, node);
    this.icount = (parent.icount + idx + 2) % 7;
    if(this.icount === parent.icount) {
        this.icount = (this.icount + 4) % 7;
    }
    if(this.depth > 4) {
        this.auto_expand = false;
    }
    this.typ = parent.typ;
    var typesAttr = JSON.parse(this.node.attr('types'));
    if (typesAttr.indexOf(this.typ) !== -1){
        this.auto_expand = true;
    }
    this.button = null;
    this.block = null;
    this.inner_block = null;
    this.summary = null;
    this.content_added = false;
    var indent = 250 - (10 * this.depth);
    var indent = 0; /* TODO anil */
    this.pindent = '+=' + indent.toString() + 'px';
    this.nindent = '-=' + indent.toString() + 'px';
    var exdent = 40 - (2 * this.depth);
    this.pexdent = '+=' + exdent.toString() + 'px';
    this.nexdent = '-=' + exdent.toString() + 'px';
}

IncludeGroup.prototype = new Group();

IncludeGroup.prototype.prepare = function(){
    if(this.decorate) {
        if(this.button === null) {
            this.button = $('<div>').addClass('ocaml_expander_plus');
            var self = this;
            this.button.click(function () { self.expand() });
        }
        if(this.block === null) {
            this.summary = this.handle.filter('div.ocaml_summary');
            this.handle = $('<div>')
                             .append(this.button)
                             .append(this.handle);
            this.inner_block = $('<div>')
                             .addClass('ocaml_expanded_include_' + this.icount)
                             .css('display', 'inline-block')
                             .css('padding-top', '3px')
                             .css('padding-right', '3px')
                             .css('padding-bottom', '3px')
                             .append(this.handle);
            this.block = $('<div>').append(this.inner_block);
            this.node.append(this.block);
        }
        if(!this.content_added && this.content !== null) {
            this.inner_block.append(this.content);
            this.content_added = true;
        }
    }
}

IncludeGroup.prototype.show_unexpanded = function(animate){
    this.prepare();
    if(this.button !== null) {
        this.button.removeClass('ocaml_expander_minus');
        this.button.addClass('ocaml_expander_plus');
    }
    if(animate) {
        if(this.content !== null) {
            this.content.hide({duration: 'fast', queue: false});
            if(this.decorate) {
                this.summary.show({duration: 'fast', queue: false});
                this.block.animate({marginLeft: '0', marginRight: '0'}, {duration: 'fast', queue: false});
                this.inner_block.animate({minWidth: '0'}, {duration: 'fast', queue: false});
                this.content.animate({marginLeft: '0', marginRight: '0'}, {duration: 'fast', queue: false});
                //this.handle.animate({fontSize : '13px'}, {duration: 'fast', queue: false});
            }
        }
    } else {
        if(this.content !== null) {
            this.content.hide();
            if(this.decorate) {
                this.summary.show();
                this.block.css('margin-left', '');
                this.block.css('margin-right', '');
                this.inner_block.css('min-width', '');
                this.content.css('margin-left', '');
                this.content.css('margin-right', '');
                //this.handle.css('font-size', '13px');
            }
        }
    }
    this.expanded = false;
}

IncludeGroup.prototype.show_expanded = function(animate){
    this.prepare();
    if(this.button !== null) {
        this.button.removeClass('ocaml_expander_plus');
        this.button.addClass('ocaml_expander_minus');
    }
    if(animate) {
        if(this.content !== null) {
            this.content.show({duration: 'fast', queue: false});
            this.summary.hide({duration: 'fast', queue: false});
            this.block.animate({marginLeft: this.nindent, marginRight: this.nexdent}, {duration: 'fast', queue: false});
            this.inner_block.animate({minWidth: '100%'}, {duration: 'fast', queue: false});
            this.content.animate({marginLeft: this.pindent, marginRight: this.pexdent}, {duration: 'fast', queue: false});
            //this.handle.animate({fontSize : '11px'}, {duration: 'fast', queue: false});
        }
    } else {
        if(this.content !== null) {
            this.content.show();
            this.summary.hide();
            this.block.css('margin-left', this.nindent);
            this.block.css('margin-right', this.nexdent);
            this.block.css('margin-top', '1rem');
            this.inner_block.css('min-width', '100%');
            this.content.css('margin-left', this.pindent);
            this.content.css('margin-right', this.pexdent);
            //this.handle.css('font-size', '11px');
        }
    }
    this.expanded = true;
}

IncludeGroup.prototype.show_disabled = function(){
    if(this.button !== null) {
        this.button.removeClass('ocaml_expander_plus');
        this.button.removeClass('ocaml_expander_minus');
        this.button.addClass('ocaml_expander_disabled');
        this.button.off('click');
    }
    if(this.content !== null) {
        this.content.hide();
    }
    this.expanded = false;
}

function SigGroup(parent, node, label, idx) {
    Group.call(this, parent, node);
    this.icount = (parent.icount - idx - 1) % 7;
    this.auto_expand = false;
    this.decorate_children = false;
    var nameAttr = this.node.attr('name');
    this.current = this.current.copy();
    this.current.extend(nameAttr, label);
    this.button = null;
    this.block = null;
    this.content_added = false;
}

SigGroup.prototype = new Group();

SigGroup.prototype.prepare = function(){
    if(this.decorate && this.button === null) {
        this.button = $('<div>').addClass('ocaml_expander_plus');
        var self = this;
        this.button.click(function () { self.expand() });
    }
    if(this.block === null) {
        this.block = $('<div>')
                         .addClass('expanding_sig')
                         .append(this.button)
                         .append(this.handle);
        this.node.append(this.block);
    }
    if(!this.content_added && this.content !== null) {
        this.content.css('margin-left', '2em');
        this.content.css('padding-left', '2em');
        this.content.css('border-left', '3px solid lightgrey');
        this.block.append(this.content);
        this.content_added = true;
    }
}

SigGroup.prototype.show_unexpanded = function(animate){
    this.prepare();
    if(this.button !== null) {
        this.button.removeClass('ocaml_expander_minus');
        this.button.addClass('ocaml_expander_plus');
    }
    if(animate) {
        if(this.content !== null) {
            this.content.hide('fast');
        }
    } else {
        if(this.content !== null) {
            this.content.hide();
        }
    }
    this.expanded = false;
}

SigGroup.prototype.show_expanded = function(animate){
    this.prepare();
    if(this.button !== null) {
        this.button.removeClass('ocaml_expander_plus');
        this.button.addClass('ocaml_expander_minus');
    }
    if(animate) {
        if(this.content !== null) {
            this.content.show('fast');
        }
    } else {
        if(this.content !== null) {
            this.content.show();
        }
    }
    this.expanded = true;
}

SigGroup.prototype.show_disabled = function(){
    this.prepare();
    if(this.button !== null) {
        this.button.removeClass('ocaml_expander_plus');
        this.button.removeClass('ocaml_expander_minus');
        this.button.addClass('ocaml_expander_disabled');
        this.button.off('click');
    }
    if(this.content !== null) {
        this.content.hide();
    }
    this.expanded = false;
}

Group.prototype.load_children = function(data, Kind, label){
    if(typeof Kind === 'undefined') {
        this.load_children(data, IncludeGroup, 'include');
        this.load_children(data, SigGroup, 'module');
        this.load_children(data, SigGroup, 'modtype');
        this.load_children(data, SigGroup, 'class');
    } else {
        var children = $('> div.ocaml_' + label, data);
        var self = this;
        children.each(function(idx) {
            var grp = new Kind(self, $(this), label, idx);
            var content = $('> div.ocaml_content', $(this));
            if(content.length > 0) {
                grp.load_content(content);
            }
            grp.show();
        });
    }
}

$(document).ready(function () {
    var url = ocaml_base + '/' + ocaml_package + '/' + location.hash;
    var p = new Path(url);
    var grp = new Group(null, null);
    load_path(p, function(page){
        grp.typ = page.typ;
        grp.current = page.path;
        if(page.alias !== null) {
          grp.add_filter(page.alias, page.path);
        }
        grp.load_content(page.body);
        display_page(page);
        show_type(page.typ);
    });
});

$(window).on('hashchange', function () {
    var url = ocaml_base + '/' + ocaml_package + '/' + location.hash;
    var p = new Path(url);
    var grp = new Group(null, null);
    load_path(p, function(page){
        grp.typ = page.typ;
        grp.current = page.path;
        if(page.alias !== null) {
          grp.add_filter(page.alias, page.path);
        }
        grp.load_content(page.body);
        display_page(page);
        scrollTo(0,0);
        show_type(page.typ);
    });
});
""
",ocaml
"module Pre = struct
  (* 和集合 *)
  let union (xs: 'a list) (ys: 'a list):'a list =
    List.filter begin fun x ->
      not (List.mem x ys)
    end xs @ ys

  (* 積集合 *)
  let intersect (xs: 'a list) (ys: 'a list): 'a list =
    List.filter begin fun x ->
      List.mem x ys
    end xs

  (* リストをセットにする。要素が１つずつにまとめる *)
  let nub (xs : 'a list): 'a list =
    List.fold_left begin fun ys y ->
      if List.mem y ys
      then ys
      else y :: ys
    end [] xs

  let show_list show sep xs =
    begin
      let rec loop xs =
        begin match xs with
          | [] -> """"
          | [x] -> show x
          | x::xs -> show x ^ sep ^ loop xs
        end
    in
      Printf.sprintf ""[%s]"" (loop xs)
    end
  let show_int_list xs =
    show_list string_of_int ""; "" xs
end

module Id = struct
  type id = string

  (* 数値に対するidを取得する *)
  let enumId (n:int) : id =
    ""v"" ^ string_of_int n
end

(* 3 Kinds *)
module Kind = struct
  type kind =
    | Star
    | Kfun of kind * kind

  let rec show (k:kind):string =
    begin match k with
      | Star -> ""*""
      | Kfun(Kfun _ as k1,k2) -> Printf.sprintf ""(%s) -> %s"" (show k1) (show k2) 
      | Kfun(k1,k2) -> Printf.sprintf ""%s -> %s"" (show k1) (show k2) 
    end

  let rec show_list (ks:kind list):string =
    Pre.show_list show "";"" ks

end

(* 4 Types *)
module Type = struct
  open Kind
  (* 型変数 *)
  type tyvar = Tyvar of Id.id * kind
  (* 型コンストラクタ *)
  type tycon = Tycon of Id.id * kind
  (* 型 *)
  type type_ =
    | TVar of tyvar
    | TCon of tycon
    | TAp of type_ * type_
    | TGen of int

  let tUnit :type_ = TCon(Tycon(""()"", Star))
  let tChar :type_ = TCon(Tycon(""Char"", Star))
  let tInt :type_ = TCon(Tycon(""Int"", Star))
  let tInteger :type_ = TCon(Tycon(""Integer"", Star))
  let tFloat :type_ = TCon(Tycon(""Float"", Star))
  let tDouble :type_ = TCon(Tycon(""Double"", Star))

  let tList :type_ = TCon(Tycon(""[]"", Kfun(Star, Star)))
  let tArrow :type_ = TCon(Tycon(""(->)"", Kfun(Star, Kfun(Star, Star))))
  let tTuple2 :type_ = TCon(Tycon(""(,)"", Kfun(Star, Kfun(Star, Star))))

  let fn (a:type_) (b:type_) :type_ = TAp(TAp(tArrow, a), b)

  let list t :type_ = TAp(tList, t)

  let tString :type_ = list tChar

  let pair a b :type_ = TAp(TAp(tTuple2, a), b)

  let tyvarKind (Tyvar(_, k)) :kind = k
  let tyconKind (Tycon(_, k)) :kind = k
  let rec typeKind t:kind =
    match t with
    | TCon tc -> tyconKind tc
    | TVar u -> tyvarKind u
    | TAp(t, _) ->
      begin match typeKind t with
        | Kfun(_, k) -> k
        | _ -> failwith ""inconsistent type""
      end
    | TGen _ -> failwith ""generic type variables have no kind""

  let rec show (t:type_): string =
    begin match t with
      | TVar(Tyvar(id,kind)) -> Printf.sprintf ""TVar(Tyvar(%s,%s))"" id (Kind.show kind)
      | TCon(Tycon(id,kind)) -> Printf.sprintf ""TCon(Tycon(%s,%s))"" id (Kind.show kind)
      | TAp(t1,t2)           -> Printf.sprintf ""TAp(%s,%s)"" (show t1) (show t2)
      | TGen(i)              -> Printf.sprintf ""TGen(%d)"" i
    end
end

(* 5 Substitutions *)
module Subst = struct
  open Type

  type subst = (tyvar * type_) list

  let nullSubst : subst = []

  let (+->) u t : subst = [(u, t)]

  (* 型変数を展開する *)
  let rec typeApply (s : subst) (t:type_):type_ = 
    begin match t with
      | TVar u as t ->
        begin try
          List.assoc u s
        with
          Not_found -> t
        end
      | TAp(l, r) -> TAp(typeApply s l, typeApply s r)
      | t -> t
    end

  let rec typeTv (t:type_):tyvar list =
    begin match t with
      | TVar u -> [u]
      | TAp(l, r) -> Pre.union (typeTv l) (typeTv r)
      | _ -> []
    end

  let listApply (apply : subst -> 'a -> 'b) (s : subst) (xs:'a list):'b list =
    List.map (apply s) xs

  let listTv (tv:'a -> tyvar list) (xs:'a list) : tyvar list =
    Pre.nub (List.concat (List.map tv xs))

  let (@@) (s1:subst) (s2 : subst) : subst =
    List.map begin fun (u, t) ->
      (u, typeApply s1 t)
    end s2 @ s1

  let merge s1 s2 : subst =
    let agree =
      let agreeOnVar v =
        typeApply s1 (TVar v) = typeApply s2 (TVar v)
      in
      List.for_all agreeOnVar (Pre.intersect (List.map fst s1) (List.map fst s2))
    in
    if agree
    then s1 @ s2
    else failwith ""substitutions do not agree""

  let show (subst:subst):string =
    Pre.show_list begin fun (Tyvar(id,kind),type_) ->
      Printf.sprintf ""Tyvar(%s,%s),%s"" id (Kind.show kind) (Type.show type_)
    end ""; "" subst

  let rec show_tyvar(tv:tyvar): string = 
    begin match tv with
      | Tyvar(id,kind) -> Printf.sprintf ""Tyvar(%s,%s)"" id (Kind.show kind)
    end

  let show_tyvar_list xs :string =
    Pre.show_list begin fun (Tyvar(id,kind)) ->
      Printf.sprintf ""Tyvar(%s,%s)"" id (Kind.show kind)
    end ""; "" xs
end

(* 6 Unification and Matching *)
module Unify = struct
  open List
  open Kind
  open Type
  open Subst
  
  let rec mgu (t1:type_) (t2:type_):subst =
    match t1, t2 with
    | TAp(l, r), TAp(l', r') ->
      let s1 = mgu l l' in
      let s2 = mgu (typeApply s1 r) (typeApply s1 r') in
      s2 @@ s1
    | TVar u, t | t, TVar u -> varBind u t
    | TCon tc1, TCon tc2 when tc1 = tc2 -> nullSubst
    | _ -> failwith ""types do not unify""

  and varBind (u:tyvar) (t:type_):subst =
    match t with
    | _ when t = TVar u                -> nullSubst
    | _ when mem u (typeTv t)          -> failwith ""occurs check fails""
    | _ when tyvarKind u <> typeKind t -> failwith ""kinds do not match""
    | _                                -> u +-> t

  let rec match_ (t1:type_) (t2:type_):subst =
    match t1, t2 with
    | TAp(l, r), TAp(l', r') ->
      let sl = match_ l l' in
      let sr = match_ r r' in
      merge sl sr
    | TVar u, t when tyvarKind u = typeKind t -> u +-> t
    | TCon tc1, TCon tc2 when tc1 = tc2 -> nullSubst
    | _ -> failwith ""types do not match""
end

(* 7 Type Classes, Predicates and Qualified Types *)
module Pred = struct
  open List
  open Kind
  open Type
  open Subst


  (* 7.1 Basic definitions *)
  type pred = IsIn of Id.id * type_

  let p (IsIn(s, t)) =
    s  ^ "" "" ^ (Type.show t)

  let ps pred =
    Pre.show_list p "", "" pred

  type 't qual = Qual of pred list * 't

  let p_qual q =
    begin match q with
      | Qual(preds,ty) -> ps preds ^ "" => "" ^ Type.show ty
    end

  let predApply (s:subst) (pred:pred):pred =
    match pred with
    | IsIn(i, t) -> IsIn(i, Subst.typeApply s t)

  let predTv (pred:pred):tyvar list =
    match pred with
    | IsIn(_, t) -> Subst.typeTv t

  let predsApply (s:subst) (xs:pred list):pred list =
    Subst.listApply predApply s xs

  let predsTv (xs:'a list) : tyvar list =
    Subst.listTv predTv xs

  let qualTypeApply (s:subst) (qual:type_ qual):type_ qual =
    match qual with
    | Qual(ps, t) -> Qual(predsApply s ps, Subst.typeApply s t)

  let qualTypeTv qual =
    match qual with
    | Qual(ps, t) ->
      Pre.union (predsTv ps) (Subst.typeTv t)

  let lift (m:type_->type_->'a) (p:pred) (p':pred):'a =
    match (p, p') with
    | IsIn(i, t), IsIn(i', t') ->
      if i = i' then m t t'
      else failwith ""classes differ""

  let mguPred = lift Unify.mgu

  let matchPred = lift Unify.match_

  type inst = pred qual

  let p_inst i =
    begin match i with
    | Qual(preds,pred) -> Printf.sprintf ""Qual(%s,%s)"" (ps preds) (p pred)
    end

  type class_ = Id.id list * inst list

  let (==>) ps p = Qual(ps, p)

  (* 7.2 Class Environments *)

  type classEnv = {
    classes : (Id.id -> class_);
    defaults : type_ list;
  }

  let initialEnv :classEnv = {
    classes = (fun i -> raise Not_found);
    defaults = [tInteger; tDouble]
  }

  let modify (ce:classEnv) i c =
    { ce with classes = fun j -> if i = j then c else ce.classes j; }

  let super (ce:classEnv) i = fst (ce.classes i)

  let insts (ce:classEnv) i = snd (ce.classes i)

  let defined (ce:classEnv) i =
    try
      ignore (ce.classes i);
      true
    with Not_found -> false

  type envTransformer = classEnv -> classEnv

  let addClass i is : envTransformer =
    fun (ce:classEnv) ->
      if defined ce i then failwith ""class already defined""
      else if exists (fun i -> not (defined ce i)) is then
        failwith ""superclass not defined""
      else modify ce i (is, [])

  let (<:>) (f : envTransformer) (g : envTransformer) : envTransformer =
    fun (ce:classEnv) -> g (f ce)

  let addCoreClasses :envTransformer =
        addClass ""Eq"" []
    <:> addClass ""Ord"" [""Eq""]
    <:> addClass ""Show"" []
    <:> addClass ""Read"" []
    <:> addClass ""Bounded"" []
    <:> addClass ""Enum"" []
    <:> addClass ""Functor"" []
    <:> addClass ""Monad"" []

  let addNumClasses :envTransformer =
        addClass ""Num"" [""Eq""; ""Show""]
    <:> addClass ""Real"" [""Num""; ""Ord""]
    <:> addClass ""Fractional"" [""Num""]
    <:> addClass ""Integral"" [""Real""; ""Enum""]
    <:> addClass ""RealFrac"" [""Real""; ""Fractional""]
    <:> addClass ""Floating"" [""Fractional""]
    <:> addClass ""RealFloat"" [""RealFrac""; ""Floating""]

  let addPreludeClasses :envTransformer =
    addCoreClasses <:> addNumClasses

  let overlap (p:pred) (q:pred) : bool =
    try
      ignore (mguPred p q);
      true
    with _ -> false

  let addInst ps (IsIn(i, _) as p) : envTransformer =
    fun (ce:classEnv) ->
      if not (defined ce i) then failwith ""no class for instance"";
      let its = insts ce i in
      let qs = map (fun (Qual(_, q)) -> q) its in
      if exists (overlap p) qs then failwith ""overlapping instance"";      
      let c = super ce i, Qual(ps, p) :: its in
      modify ce i c

  let exampleInsts : envTransformer =
        addPreludeClasses
    <:> addInst [] (IsIn(""Ord"", tUnit))
    <:> addInst [] (IsIn(""Ord"", tChar))
    <:> addInst [] (IsIn(""Ord"", tInt))
    <:> addInst [IsIn(""Ord"", TVar(Tyvar(""a"", Star)));
                 IsIn(""Ord"", TVar(Tyvar(""b"", Star)))]
                (IsIn(""Ord"", pair (TVar(Tyvar(""a"", Star)))
                                  (TVar(Tyvar(""b"", Star)))))

  (* 7.3 Entailment *)

  let rec bySuper (ce:classEnv) (IsIn(i, t) as p) =
    p :: concat (map (fun i' -> bySuper ce (IsIn(i', t))) (super ce i))

  let byInst (ce:classEnv) (IsIn(i, t) as p) =
    let tryInst (Qual(ps, h)) =
      try
       let u = matchPred h p in
       Some (map (predApply u) ps)
      with _ -> None in
    let rec msum = function
      | [] -> None
      | None :: xs -> msum xs
      | x :: _ -> x in
    msum (map tryInst (insts ce i))

  let rec entail (ce:classEnv) ps p =
    exists (mem p) (map (bySuper ce) ps) ||
    match byInst ce p with
    | None -> false
    | Some qs -> for_all (entail ce ps) qs

  (* 7.4 Context Reduction *)

  let inHnf (p:pred):bool =
    match p with
    | IsIn(_, t) ->
      let rec hnf = function
        | TVar _ -> true
        | TCon _ -> false
        | TAp(t, _) -> hnf t
        | TGen _ -> failwith ""context reduction on generic variable""
      in
      hnf t

  let rec toHnfs (ce:classEnv) ps = concat (map (toHnf ce) ps)
  and toHnf (ce:classEnv) p =
    if inHnf p then [p]
    else
      match byInst ce p with
      | None -> failwith ""context reduction""
      | Some ps -> toHnfs ce ps

  let simplify (ce:classEnv) ps =
    let rec loop rs = function
      | [] -> rs
      | p :: ps ->
        if entail ce (rs @ ps) p then loop rs ps
        else loop (p :: rs) ps in
    loop [] ps

  let reduce (ce:classEnv) ps =
    simplify ce (toHnfs ce ps)

  let scEntail (ce:classEnv) ps p =
    exists (mem p) (map (bySuper ce) ps)

end

(* 8 Type Schemes *)
module Scheme = struct

  open List
  open Kind
  open Type
  open Pred

  type scheme = Forall of kind list * type_ qual

  let show (Forall(ks, qt):scheme) =
    Printf.sprintf ""Forall(%s, %s)"" (Kind.show_list ks) (Pred.p_qual qt)

  let _ =
    let ty = TVar(Tyvar(""a"", Star)) in
    let pred = IsIn(""Num"", ty) in
    let sc = Forall([],Qual([pred],ty)) in
    Printf.printf ""scheme = %s\n"" (show sc)

  let schemeApply (s:Subst.subst) (Forall(ks, qt):scheme):scheme =
    Forall(ks, qualTypeApply s qt)

  let _ =
    let ty = TVar(Tyvar(""a"", Star)) in
    let pred = IsIn(""Num"", ty) in
    let sc = Forall([],Qual([pred],ty)) in
    let subst = [Tyvar(""a"", Star), tInt] in
    let sc = schemeApply subst sc in
    Printf.printf ""scheme = %s\n"" (show sc)

  let schemeTv (Forall(_, qt):scheme):tyvar list = qualTypeTv qt

  let _ =
    let ty = TVar(Tyvar(""a"", Star)) in
    let pred = IsIn(""Num"", ty) in
    let sc = Forall([],Qual([pred],ty)) in
    let tvs = schemeTv sc in
    Printf.printf ""tvs = %s\n"" (Subst.show_tyvar_list tvs)

  let quantify(vs:tyvar list) (qt:type_ qual):scheme =
    let vs' = filter (fun v -> mem v vs) (qualTypeTv qt) in
    let ks = map tyvarKind vs' in
    let newGen v =
      let count = ref 0 in
      let t = TGen !count in
      incr count;
      (v, t) in
    let s = map newGen vs' in
    Forall(ks, qualTypeApply s qt)

  let _ =
    let tyvar = Tyvar(""a"", Star) in
    let ty = TVar(Tyvar(""a"", Star)) in
    let pred = IsIn(""Num"", ty) in
    let qual = Qual([pred], fn ty tInt) in
    let sc = quantify [tyvar] qual in
    Printf.printf ""scheme = %s\n"" (show sc)


  let toScheme (t:type_) :scheme = Forall([], (Qual([], t)))

  let _ =
    let ty = TVar(Tyvar(""a"", Star)) in
    let sc = toScheme ty in
    Printf.printf ""scheme = %s\n"" (show sc)
end
",ocaml
"// Copyright 2015 The Shaderc Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the ""License"");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an ""AS IS"" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef COMMON_SHADERS_FOR_TESTS_H_
#define COMMON_SHADERS_FOR_TESTS_H_

#ifdef __cplusplus
extern ""C"" {
#endif

// The minimal shader, without a version directive.
const char kMinimalShaderWithoutVersion[] = ""void main(){}"";
// The minimal shader, with a version directive.
const char kMinimalShader[] =
    ""#version 140\n""
    ""void main(){}"";
const char kMinimalHlslShader[] =
    ""float4 EntryPoint(uint index : SV_VERTEXID) : SV_POSITION\n""
    ""{ return float4(1.0, 2.0, 3.0, 4.0); }"";
const char kMinimalShaderWithMacro[] =
    ""#version 140\n""
    ""#define E main\n""
    ""void E(){}\n"";

// The minimal shader that needs valueless predefinition of 'E' to compile.
const char kValuelessPredefinitionShader[] =
    ""#version 140\n""
    ""#ifdef E\n""
    ""void main(){}\n""
    ""#else\n""
    ""#error\n""
    ""#endif"";

// By default the compiler will emit a warning on line 2 complaining
// that 'float' is a deprecated attribute in version 130.  Use verison 140
// because some versions of glslang will error out for a too-low version
// when generating SPIR-V.
const char kDeprecatedAttributeShader[] =
    ""#version 400\n""
    ""layout(location = 0) attribute float x;\n""
    ""void main() {}\n"";

// By default the compiler will emit a warning as version 550 is an unknown
// version.
const char kMinimalUnknownVersionShader[] =
    ""#version 550\n""
    ""void main() {}\n"";

// gl_ClipDistance doesn't exist in es profile (at least until 3.10).
const char kCoreVertShaderWithoutVersion[] =
    ""void main() {\n""
    ""gl_ClipDistance[0] = 5.;\n""
    ""}\n"";

// Generated debug information should contain the name of the vector:
// debug_info_sample.
const char kMinimalDebugInfoShader[] =
    ""#version 140\n""
    ""void main(){\n""
    ""vec2 debug_info_sample = vec2(1.0,1.0);\n""
    ""}\n"";

// Compiler should generate two errors.
const char kTwoErrorsShader[] =
    ""#version 150\n""
    ""#error\n""
    ""#error\n""
    ""void main(){}\n"";

// Compiler should generate two warnings.
const char kTwoWarningsShader[] =
    ""#version 400\n""
    ""layout(location = 0) attribute float x;\n""
    ""layout(location = 1) attribute float y;\n""
    ""void main(){}\n"";

// A shader that compiles under OpenGL compatibility profile rules,
// but not OpenGL core profile rules.
const char kOpenGLCompatibilityFragmentShader[] =
    R""(#version 100
     uniform highp sampler2D tex;
     void main() {
       gl_FragColor = texture2D(tex, vec2(0.0,0.0));
     })"";

// A shader that compiles under OpenGL core profile rules.
const char kOpenGLVertexShader[] =
    R""(#version 330
       void main() { int t = gl_VertexID; })"";

// Empty 310 es shader. It is valid for vertex, fragment, compute shader kind.
const char kEmpty310ESShader[] =
    ""#version 310 es\n""
    ""void main() {}\n"";

// Vertex only shader.
const char kVertexOnlyShader[] =
    ""#version 310 es\n""
    ""void main() {\n""
    ""    gl_Position = vec4(1.);\n""
    ""}"";

// TessControl only shader.
const char kTessControlOnlyShader[] =
    ""#version 440 core\n""
    ""layout(vertices = 3) out;\n""
    ""void main() { }"";

// TessEvaluation only shader.
const char kTessEvaluationOnlyShader[] =
    ""#version 440 core\n""
    ""layout(triangles) in;\n""
    ""void main() { }"";

// Geometry only shader.
const char kGeometryOnlyShader[] =
    ""#version 150 core\n""
    ""layout (triangles) in;\n""
    ""layout (line_strip, max_vertices = 4) out;\n""
    ""void main() { }"";

// Vertex only shader with #pragma annotation.
const char kVertexOnlyShaderWithPragma[] =
    ""#version 310 es\n""
    ""#pragma shader_stage(vertex)\n""
    ""void main() {\n""
    ""    gl_Position = vec4(1.);\n""
    ""}"";

// Fragment only shader with #pragma annotation.
const char kFragmentOnlyShaderWithPragma[] =
    ""#version 310 es\n""
    ""#pragma shader_stage(fragment)\n""
    ""void main() {\n""
    ""    gl_FragDepth = 10.;\n""
    ""}"";

// TessControl only shader with #pragma annotation.
const char kTessControlOnlyShaderWithPragma[] =
    ""#version 440 core\n""
    ""#pragma shader_stage(tesscontrol)\n""
    ""layout(vertices = 3) out;\n""
    ""void main() { }"";

// TessEvaluation only shader with #pragma annotation.
const char kTessEvaluationOnlyShaderWithPragma[] =
    ""#version 440 core\n""
    ""#pragma shader_stage(tesseval)\n""
    ""layout(triangles) in;\n""
    ""void main() { }"";

// Geometry only shader with #pragma annotation.
const char kGeometryOnlyShaderWithPragma[] =
    ""#version 150 core\n""
    ""#pragma shader_stage(geometry)\n""
    ""layout (triangles) in;\n""
    ""layout (line_strip, max_vertices = 4) out;\n""
    ""void main() { }"";

// Compute only shader with #pragma annotation.
const char kComputeOnlyShaderWithPragma[] =
    ""#version 310 es\n""
    ""#pragma shader_stage(compute)\n""
    ""void main() {\n""
    ""    uvec3 temp = gl_WorkGroupID;\n""
    ""}"";

// NV mesh shader without #pragma.
const char kNVMeshShader[] =
    ""#version 450\n""
    ""#extension GL_NV_mesh_shader : enable\n""
    ""layout(local_size_x=8) in;\n""
    ""layout(max_vertices=5) out;\n""
    ""layout(max_primitives=10) out;\n""
    ""layout(triangles) out;\n""
    ""void main() {\n""
    ""  gl_MeshVerticesNV[gl_LocalInvocationID.x].gl_Position = vec4(0.0);\n""
    ""}\n"";

// NV mesh shader with #pragma annotation.
const char kNVMeshShaderWithPragma[] =
    ""#version 450\n""
    ""#extension GL_NV_mesh_shader : enable\n""
    ""#pragma shader_stage(mesh)\n""
    ""layout(local_size_x=8) in;\n""
    ""layout(max_vertices=5) out;\n""
    ""layout(max_primitives=10) out;\n""
    ""layout(triangles) out;\n""
    ""void main() {\n""
    ""  gl_MeshVerticesNV[gl_LocalInvocationID.x].gl_Position = vec4(0.0);\n""
    ""}\n"";

// NV task shader without #pragma annotation.
const char kNVTaskShader[] =
    ""#version 450\n""
    ""#extension GL_NV_mesh_shader : enable\n""
    ""layout(local_size_x=8) in;\n""
    ""void main() {\n""
    ""  gl_TaskCountNV = 2;\n""
    ""}\n"";

// NV task shader with #pragma annotation.
const char kNVTaskShaderWithPragma[] =
    ""#version 450\n""
    ""#extension GL_NV_mesh_shader : enable\n""
    ""#pragma shader_stage(task)\n""
    ""layout(local_size_x=8) in;\n""
    ""void main() {\n""
    ""  gl_TaskCountNV = 2;\n""
    ""}\n"";

// Vertex only shader with invalid #pragma annotation.
const char kVertexOnlyShaderWithInvalidPragma[] =
    ""#version 310 es\n""
    ""#pragma shader_stage(fragment)\n""
    ""void main() {\n""
    ""    gl_Position = vec4(1.);\n""
    ""}"";

// Parts of a valid disassembly of a minimal shader.  We only check certain
// parts since Glslang code generation changes in incidental ways.
const char* kMinimalShaderDisassemblySubstrings[] = {
    ""; SPIR-V\n""
    ""; Version: 1.0\n""
    ""; Generator: Google Shaderc over Glslang; 10\n""
    ""; Bound:"",

    ""               OpCapability Shader\n"",
    ""          %1 = OpExtInstImport \""GLSL.std.450\""\n"",
    ""               OpMemoryModel Logical GLSL450\n"",
    ""               OpReturn\n"",
    ""               OpFunctionEnd\n""};

const char* kMinimalShaderDebugInfoDisassemblySubstrings[] = {
    ""; SPIR-V\n""
    ""; Version: 1.0\n""
    ""; Generator: Google Shaderc over Glslang; 10\n""
    ""; Bound:"",

    ""               OpCapability Shader\n"",
    ""          %2 = OpExtInstImport \""GLSL.std.450\""\n"",
    ""               OpMemoryModel Logical GLSL450\n"",
    ""               OpReturn\n"",
    ""               OpFunctionEnd\n""};

const char kMinimalShaderAssembly[] = R""(
    ; SPIR-V
    ; Version: 1.0
    ; Generator: Google Shaderc over Glslang; 10
    ; Bound: 6
    ; Schema: 0

         OpCapability Shader
    %1 = OpExtInstImport ""GLSL.std.450""
         OpMemoryModel Logical GLSL450
         OpEntryPoint Vertex %4 ""main""
         OpSource ESSL 310
         OpName %4 ""main""
    %2 = OpTypeVoid
    %3 = OpTypeFunction %2
    %4 = OpFunction %2 None %3
    %5 = OpLabel
         OpReturn
         OpFunctionEnd)"";

const char kShaderWithUniformsWithoutBindings[] =
    R""(#version 450
       #extension GL_ARB_sparse_texture2 : enable
       uniform texture2D my_tex;
       uniform sampler my_sam;
       layout(rgba32f) uniform image2D my_img;
       layout(rgba32f) uniform imageBuffer my_imbuf;
       uniform block { float x; float y; } my_ubo;
       void main() {
         texture(sampler2D(my_tex,my_sam),vec2(1.0));
         vec4 t;
         sparseImageLoadARB(my_img,ivec2(0),t);
         imageLoad(my_imbuf,42);
         float x = my_ubo.x;
       })"";

// A GLSL vertex shader with a weirdly packed block.
const char kGlslShaderWeirdPacking[] =
    R""(#version 450
       layout(set=0, binding=0)
       buffer B { float x; vec3 foo; } my_ssbo;
       void main() { my_ssbo.x = 1.0; })"";

// A HLSL fragment shader with a weirdly packed block.
const char kHlslFragShaderWithRegisters[] =
    R""(Buffer<float> t4 : register(t4);
       Buffer<float> t5 : register(t5);
       float4 main() : SV_Target0 {
         return float4(t4.Load(0) + t5.Load(1));
       })"";

// A GLSL compute shader using a regular barrier.
const char kGlslShaderComputeBarrier[] =
    R""(#version 450
       void main() { barrier(); })"";

// A GLSL compute shader using the Subgroups feature.
const char kGlslShaderComputeSubgroupBarrier[] =
    R""(#version 450
       #extension GL_KHR_shader_subgroup_basic : enable
       void main() { subgroupBarrier(); })"";

// A GLSL task shader using a regular barrier.
const char kGlslShaderTaskBarrier[] =
    R""(#version 450
       #extension GL_NV_mesh_shader : enable
       layout(local_size_x = 32) in;
       void main() { barrier(); })"";

// A GLSL task shader using the Subgroups feature.
const char kGlslShaderTaskSubgroupBarrier[] =
    R""(#version 450
       #extension GL_NV_mesh_shader : enable
       #extension GL_KHR_shader_subgroup_basic : enable
       layout(local_size_x = 32) in;
       void main() { subgroupBarrier(); })"";

// A GLSL mesh shader using a regular barrier.
const char kGlslShaderMeshBarrier[] =
    R""(#version 450
       #extension GL_NV_mesh_shader : enable
       layout(local_size_x = 32) in;
       layout(max_vertices=81) out;
       layout(max_primitives=32) out;
       layout(triangles) out;
       void main() { barrier(); })"";

// A GLSL mesh shader using the Subgroups feature.
const char kGlslShaderMeshSubgroupBarrier[] =
    R""(#version 450
       #extension GL_NV_mesh_shader : enable
       #extension GL_KHR_shader_subgroup_basic : enable
       layout(local_size_x = 32) in;
       layout(max_vertices=81) out;
       layout(max_primitives=32) out;
       layout(triangles) out;
       void main() { subgroupBarrier(); })"";

const char kGlslMultipleFnShader[] =
    R""(#version 450
       layout(location=0) flat in  int inVal;
       layout(location=0)      out int outVal;
       int foo(int a) { return a; }
       void main() { outVal = foo(inVal); })"";

const char kHlslShaderWithCounterBuffer[] =
    R""(RWStructuredBuffer<uint> Ainc;
       float4 main() : SV_Target0 {
         return float4(Ainc.IncrementCounter(), 0, 0, 0);
       })"";

const char kHlslWaveActiveSumeComputeShader[] =
  R""(struct S { uint val; uint result; };

     [[vk::binding(0,0)]]
     RWStructuredBuffer<S> MyBuffer;

     [numthreads(32, 1, 1)]
     void main(uint3 id : SV_DispatchThreadID) {
       MyBuffer[id.x].result = WaveActiveSum(MyBuffer[id.x].val);
     })"";

const char kHlslMemLayoutResourceSelect[] =
    R""(cbuffer Foo { float a; float3 b; }

       [[vk::binding(0,0)]]
       Texture2D Tex;
       [[vk::binding(1,0)]]
       SamplerState Sampler1;
       [[vk::binding(2,0)]]
       SamplerState Sampler2;

       static const int val = 42;

       float4 main() : SV_Target {
         SamplerState samp;

         if (val > 5)
           samp = Sampler1;
         else
           samp = Sampler2;

         return Tex.Sample(samp, float2(0.5, 0.5)) + float4(a, b);
       })"";

const char kGlslShaderWithClamp[] =
    R""(#version 450
    layout(location=0) in vec4 i;
    layout(location=0) out vec4 o;
    void main() { o = clamp(i, vec4(0.5), vec4(1.0)); }
    )"";

#ifdef __cplusplus
}
#endif  // __cplusplus

#endif  // COMMON_SHADERS_FOR_TESTS_H_
",c++
"/**
    This code is based on the glslang_c_interface implementation by Viktor Latypov
**/

/**
BSD 2-Clause License

Copyright (c) 2019, Viktor Latypov
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS""
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**/

#ifndef C_SHADER_TYPES_H_INCLUDED
#define C_SHADER_TYPES_H_INCLUDED

#define LAST_ELEMENT_MARKER(x) x

/* EShLanguage counterpart */
typedef enum {
    GLSLANG_STAGE_VERTEX,
    GLSLANG_STAGE_TESSCONTROL,
    GLSLANG_STAGE_TESSEVALUATION,
    GLSLANG_STAGE_GEOMETRY,
    GLSLANG_STAGE_FRAGMENT,
    GLSLANG_STAGE_COMPUTE,
    GLSLANG_STAGE_RAYGEN_NV,
    GLSLANG_STAGE_INTERSECT_NV,
    GLSLANG_STAGE_ANYHIT_NV,
    GLSLANG_STAGE_CLOSESTHIT_NV,
    GLSLANG_STAGE_MISS_NV,
    GLSLANG_STAGE_CALLABLE_NV,
    GLSLANG_STAGE_TASK_NV,
    GLSLANG_STAGE_MESH_NV,
    LAST_ELEMENT_MARKER(GLSLANG_STAGE_COUNT),
} glslang_stage_t; // would be better as stage, but this is ancient now

/* EShLanguageMask counterpart */
typedef enum {
    GLSLANG_STAGE_VERTEX_MASK = (1 << GLSLANG_STAGE_VERTEX),
    GLSLANG_STAGE_TESSCONTROL_MASK = (1 << GLSLANG_STAGE_TESSCONTROL),
    GLSLANG_STAGE_TESSEVALUATION_MASK = (1 << GLSLANG_STAGE_TESSEVALUATION),
    GLSLANG_STAGE_GEOMETRY_MASK = (1 << GLSLANG_STAGE_GEOMETRY),
    GLSLANG_STAGE_FRAGMENT_MASK = (1 << GLSLANG_STAGE_FRAGMENT),
    GLSLANG_STAGE_COMPUTE_MASK = (1 << GLSLANG_STAGE_COMPUTE),
    GLSLANG_STAGE_RAYGEN_NV_MASK = (1 << GLSLANG_STAGE_RAYGEN_NV),
    GLSLANG_STAGE_INTERSECT_NV_MASK = (1 << GLSLANG_STAGE_INTERSECT_NV),
    GLSLANG_STAGE_ANYHIT_NV_MASK = (1 << GLSLANG_STAGE_ANYHIT_NV),
    GLSLANG_STAGE_CLOSESTHIT_NV_MASK = (1 << GLSLANG_STAGE_CLOSESTHIT_NV),
    GLSLANG_STAGE_MISS_NV_MASK = (1 << GLSLANG_STAGE_MISS_NV),
    GLSLANG_STAGE_CALLABLE_NV_MASK = (1 << GLSLANG_STAGE_CALLABLE_NV),
    GLSLANG_STAGE_TASK_NV_MASK = (1 << GLSLANG_STAGE_TASK_NV),
    GLSLANG_STAGE_MESH_NV_MASK = (1 << GLSLANG_STAGE_MESH_NV),
    LAST_ELEMENT_MARKER(GLSLANG_STAGE_MASK_COUNT),
} glslang_stage_mask_t;

/* EShSource counterpart */
typedef enum {
    GLSLANG_SOURCE_NONE,
    GLSLANG_SOURCE_GLSL,
    GLSLANG_SOURCE_HLSL,
    LAST_ELEMENT_MARKER(GLSLANG_SOURCE_COUNT),
} glslang_source_t;

/* EShClient counterpart */
typedef enum {
    GLSLANG_CLIENT_NONE,
    GLSLANG_CLIENT_VULKAN,
    GLSLANG_CLIENT_OPENGL,
    LAST_ELEMENT_MARKER(GLSLANG_CLIENT_COUNT),
} glslang_client_t;

/* EShTargetLanguage counterpart */
typedef enum {
    GLSLANG_TARGET_NONE,
    GLSLANG_TARGET_SPV,
    LAST_ELEMENT_MARKER(GLSLANG_TARGET_COUNT),
} glslang_target_language_t;

/* SH_TARGET_ClientVersion counterpart */
typedef enum {
    GLSLANG_TARGET_VULKAN_1_0 = (1 << 22),
    GLSLANG_TARGET_VULKAN_1_1 = (1 << 22) | (1 << 12),
    GLSLANG_TARGET_VULKAN_1_2 = (1 << 22) | (2 << 12),
    GLSLANG_TARGET_VULKAN_1_3 = (1 << 22) | (3 << 12),
    GLSLANG_TARGET_OPENGL_450 = 450,
    LAST_ELEMENT_MARKER(GLSLANG_TARGET_CLIENT_VERSION_COUNT = 5),
} glslang_target_client_version_t;

/* SH_TARGET_LanguageVersion counterpart */
typedef enum {
    GLSLANG_TARGET_SPV_1_0 = (1 << 16),
    GLSLANG_TARGET_SPV_1_1 = (1 << 16) | (1 << 8),
    GLSLANG_TARGET_SPV_1_2 = (1 << 16) | (2 << 8),
    GLSLANG_TARGET_SPV_1_3 = (1 << 16) | (3 << 8),
    GLSLANG_TARGET_SPV_1_4 = (1 << 16) | (4 << 8),
    GLSLANG_TARGET_SPV_1_5 = (1 << 16) | (5 << 8),
    GLSLANG_TARGET_SPV_1_6 = (1 << 16) | (6 << 8),
    LAST_ELEMENT_MARKER(GLSLANG_TARGET_LANGUAGE_VERSION_COUNT = 7),
} glslang_target_language_version_t;

/* EShExecutable counterpart */
typedef enum { GLSLANG_EX_VERTEX_FRAGMENT, GLSLANG_EX_FRAGMENT } glslang_executable_t;

// EShOptimizationLevel counterpart
// This enum is not used in the current C interface, but could be added at a later date.
// GLSLANG_OPT_NONE is the current default.
typedef enum {
    GLSLANG_OPT_NO_GENERATION,
    GLSLANG_OPT_NONE,
    GLSLANG_OPT_SIMPLE,
    GLSLANG_OPT_FULL,
    LAST_ELEMENT_MARKER(GLSLANG_OPT_LEVEL_COUNT),
} glslang_optimization_level_t;

/* EShTextureSamplerTransformMode counterpart */
typedef enum {
    GLSLANG_TEX_SAMP_TRANS_KEEP,
    GLSLANG_TEX_SAMP_TRANS_UPGRADE_TEXTURE_REMOVE_SAMPLER,
    LAST_ELEMENT_MARKER(GLSLANG_TEX_SAMP_TRANS_COUNT),
} glslang_texture_sampler_transform_mode_t;

/* EShMessages counterpart */
typedef enum {
    GLSLANG_MSG_DEFAULT_BIT = 0,
    GLSLANG_MSG_RELAXED_ERRORS_BIT = (1 << 0),
    GLSLANG_MSG_SUPPRESS_WARNINGS_BIT = (1 << 1),
    GLSLANG_MSG_AST_BIT = (1 << 2),
    GLSLANG_MSG_SPV_RULES_BIT = (1 << 3),
    GLSLANG_MSG_VULKAN_RULES_BIT = (1 << 4),
    GLSLANG_MSG_ONLY_PREPROCESSOR_BIT = (1 << 5),
    GLSLANG_MSG_READ_HLSL_BIT = (1 << 6),
    GLSLANG_MSG_CASCADING_ERRORS_BIT = (1 << 7),
    GLSLANG_MSG_KEEP_UNCALLED_BIT = (1 << 8),
    GLSLANG_MSG_HLSL_OFFSETS_BIT = (1 << 9),
    GLSLANG_MSG_DEBUG_INFO_BIT = (1 << 10),
    GLSLANG_MSG_HLSL_ENABLE_16BIT_TYPES_BIT = (1 << 11),
    GLSLANG_MSG_HLSL_LEGALIZATION_BIT = (1 << 12),
    GLSLANG_MSG_HLSL_DX9_COMPATIBLE_BIT = (1 << 13),
    GLSLANG_MSG_BUILTIN_SYMBOL_TABLE_BIT = (1 << 14),
    GLSLANG_MSG_ENHANCED = (1 << 15),
    LAST_ELEMENT_MARKER(GLSLANG_MSG_COUNT),
} glslang_messages_t;

/* EShReflectionOptions counterpart */
typedef enum {
    GLSLANG_REFLECTION_DEFAULT_BIT = 0,
    GLSLANG_REFLECTION_STRICT_ARRAY_SUFFIX_BIT = (1 << 0),
    GLSLANG_REFLECTION_BASIC_ARRAY_SUFFIX_BIT = (1 << 1),
    GLSLANG_REFLECTION_INTERMEDIATE_IOO_BIT = (1 << 2),
    GLSLANG_REFLECTION_SEPARATE_BUFFERS_BIT = (1 << 3),
    GLSLANG_REFLECTION_ALL_BLOCK_VARIABLES_BIT = (1 << 4),
    GLSLANG_REFLECTION_UNWRAP_IO_BLOCKS_BIT = (1 << 5),
    GLSLANG_REFLECTION_ALL_IO_VARIABLES_BIT = (1 << 6),
    GLSLANG_REFLECTION_SHARED_STD140_SSBO_BIT = (1 << 7),
    GLSLANG_REFLECTION_SHARED_STD140_UBO_BIT = (1 << 8),
    LAST_ELEMENT_MARKER(GLSLANG_REFLECTION_COUNT),
} glslang_reflection_options_t;

/* EProfile counterpart (from Versions.h) */
typedef enum {
    GLSLANG_BAD_PROFILE = 0,
    GLSLANG_NO_PROFILE = (1 << 0),
    GLSLANG_CORE_PROFILE = (1 << 1),
    GLSLANG_COMPATIBILITY_PROFILE = (1 << 2),
    GLSLANG_ES_PROFILE = (1 << 3),
    LAST_ELEMENT_MARKER(GLSLANG_PROFILE_COUNT),
} glslang_profile_t;

/* Shader options */
typedef enum {
    GLSLANG_SHADER_DEFAULT_BIT = 0,
    GLSLANG_SHADER_AUTO_MAP_BINDINGS = (1 << 0),
    GLSLANG_SHADER_AUTO_MAP_LOCATIONS = (1 << 1),
    GLSLANG_SHADER_VULKAN_RULES_RELAXED = (1 << 2),
    LAST_ELEMENT_MARKER(GLSLANG_SHADER_COUNT),
} glslang_shader_options_t;

/* TResourceType counterpart */
typedef enum {
    GLSLANG_RESOURCE_TYPE_SAMPLER,
    GLSLANG_RESOURCE_TYPE_TEXTURE,
    GLSLANG_RESOURCE_TYPE_IMAGE,
    GLSLANG_RESOURCE_TYPE_UBO,
    GLSLANG_RESOURCE_TYPE_SSBO,
    GLSLANG_RESOURCE_TYPE_UAV,
    LAST_ELEMENT_MARKER(GLSLANG_RESOURCE_TYPE_COUNT),
} glslang_resource_type_t;

#undef LAST_ELEMENT_MARKER

#endif
",c++
"/*
** Copyright (c) 2013 The Khronos Group Inc.
**
** Permission is hereby granted, free of charge, to any person obtaining a
** copy of this software and/or associated documentation files (the
** ""Materials""), to deal in the Materials without restriction, including
** without limitation the rights to use, copy, modify, merge, publish,
** distribute, sublicense, and/or sell copies of the Materials, and to
** permit persons to whom the Materials are furnished to do so, subject to
** the following conditions:
**
** The above copyright notice and this permission notice shall be included
** in all copies or substantial portions of the Materials.
**
** THE MATERIALS ARE PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND,
** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
** MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
*/

#pragma once

#define GL_FLOAT                          0x1406
#define GL_FLOAT_VEC2                     0x8B50
#define GL_FLOAT_VEC3                     0x8B51
#define GL_FLOAT_VEC4                     0x8B52

#define GL_DOUBLE                         0x140A
#define GL_DOUBLE_VEC2                    0x8FFC
#define GL_DOUBLE_VEC3                    0x8FFD
#define GL_DOUBLE_VEC4                    0x8FFE

#define GL_INT                            0x1404
#define GL_INT_VEC2                       0x8B53
#define GL_INT_VEC3                       0x8B54
#define GL_INT_VEC4                       0x8B55

#define GL_UNSIGNED_INT                   0x1405
#define GL_UNSIGNED_INT_VEC2              0x8DC6
#define GL_UNSIGNED_INT_VEC3              0x8DC7
#define GL_UNSIGNED_INT_VEC4              0x8DC8

#define GL_INT64_ARB                      0x140E
#define GL_INT64_VEC2_ARB                 0x8FE9
#define GL_INT64_VEC3_ARB                 0x8FEA
#define GL_INT64_VEC4_ARB                 0x8FEB

#define GL_UNSIGNED_INT64_ARB             0x140F
#define GL_UNSIGNED_INT64_VEC2_ARB        0x8FF5
#define GL_UNSIGNED_INT64_VEC3_ARB        0x8FF6
#define GL_UNSIGNED_INT64_VEC4_ARB        0x8FF7
#define GL_UNSIGNED_INT16_VEC2_NV         0x8FF1
#define GL_UNSIGNED_INT16_VEC3_NV         0x8FF2
#define GL_UNSIGNED_INT16_VEC4_NV         0x8FF3

#define GL_INT16_NV                       0x8FE4
#define GL_INT16_VEC2_NV                  0x8FE5
#define GL_INT16_VEC3_NV                  0x8FE6
#define GL_INT16_VEC4_NV                  0x8FE7

#define GL_BOOL                           0x8B56
#define GL_BOOL_VEC2                      0x8B57
#define GL_BOOL_VEC3                      0x8B58
#define GL_BOOL_VEC4                      0x8B59

#define GL_FLOAT_MAT2                     0x8B5A
#define GL_FLOAT_MAT3                     0x8B5B
#define GL_FLOAT_MAT4                     0x8B5C
#define GL_FLOAT_MAT2x3                   0x8B65
#define GL_FLOAT_MAT2x4                   0x8B66
#define GL_FLOAT_MAT3x2                   0x8B67
#define GL_FLOAT_MAT3x4                   0x8B68
#define GL_FLOAT_MAT4x2                   0x8B69
#define GL_FLOAT_MAT4x3                   0x8B6A

#define GL_DOUBLE_MAT2                    0x8F46
#define GL_DOUBLE_MAT3                    0x8F47
#define GL_DOUBLE_MAT4                    0x8F48
#define GL_DOUBLE_MAT2x3                  0x8F49
#define GL_DOUBLE_MAT2x4                  0x8F4A
#define GL_DOUBLE_MAT3x2                  0x8F4B
#define GL_DOUBLE_MAT3x4                  0x8F4C
#define GL_DOUBLE_MAT4x2                  0x8F4D
#define GL_DOUBLE_MAT4x3                  0x8F4E

// Those constants are borrowed from extension NV_gpu_shader5
#define GL_FLOAT16_NV                     0x8FF8
#define GL_FLOAT16_VEC2_NV                0x8FF9
#define GL_FLOAT16_VEC3_NV                0x8FFA
#define GL_FLOAT16_VEC4_NV                0x8FFB

#define GL_FLOAT16_MAT2_AMD               0x91C5
#define GL_FLOAT16_MAT3_AMD               0x91C6
#define GL_FLOAT16_MAT4_AMD               0x91C7
#define GL_FLOAT16_MAT2x3_AMD             0x91C8
#define GL_FLOAT16_MAT2x4_AMD             0x91C9
#define GL_FLOAT16_MAT3x2_AMD             0x91CA
#define GL_FLOAT16_MAT3x4_AMD             0x91CB
#define GL_FLOAT16_MAT4x2_AMD             0x91CC
#define GL_FLOAT16_MAT4x3_AMD             0x91CD

#define GL_SAMPLER_1D                     0x8B5D
#define GL_SAMPLER_2D                     0x8B5E
#define GL_SAMPLER_3D                     0x8B5F
#define GL_SAMPLER_CUBE                   0x8B60
#define GL_SAMPLER_BUFFER                 0x8DC2
#define GL_SAMPLER_1D_ARRAY               0x8DC0
#define GL_SAMPLER_2D_ARRAY               0x8DC1
#define GL_SAMPLER_1D_ARRAY_SHADOW        0x8DC3
#define GL_SAMPLER_2D_ARRAY_SHADOW        0x8DC4
#define GL_SAMPLER_CUBE_SHADOW            0x8DC5
#define GL_SAMPLER_1D_SHADOW              0x8B61
#define GL_SAMPLER_2D_SHADOW              0x8B62
#define GL_SAMPLER_2D_RECT                0x8B63
#define GL_SAMPLER_2D_RECT_SHADOW         0x8B64
#define GL_SAMPLER_2D_MULTISAMPLE         0x9108
#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY   0x910B
#define GL_SAMPLER_CUBE_MAP_ARRAY         0x900C
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW  0x900D
#define GL_SAMPLER_CUBE_MAP_ARRAY_ARB     0x900C
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB 0x900D

#define GL_FLOAT16_SAMPLER_1D_AMD                       0x91CE
#define GL_FLOAT16_SAMPLER_2D_AMD                       0x91CF
#define GL_FLOAT16_SAMPLER_3D_AMD                       0x91D0
#define GL_FLOAT16_SAMPLER_CUBE_AMD                     0x91D1
#define GL_FLOAT16_SAMPLER_2D_RECT_AMD                  0x91D2
#define GL_FLOAT16_SAMPLER_1D_ARRAY_AMD                 0x91D3
#define GL_FLOAT16_SAMPLER_2D_ARRAY_AMD                 0x91D4
#define GL_FLOAT16_SAMPLER_CUBE_MAP_ARRAY_AMD           0x91D5
#define GL_FLOAT16_SAMPLER_BUFFER_AMD                   0x91D6
#define GL_FLOAT16_SAMPLER_2D_MULTISAMPLE_AMD           0x91D7
#define GL_FLOAT16_SAMPLER_2D_MULTISAMPLE_ARRAY_AMD     0x91D8

#define GL_FLOAT16_SAMPLER_1D_SHADOW_AMD                0x91D9
#define GL_FLOAT16_SAMPLER_2D_SHADOW_AMD                0x91DA
#define GL_FLOAT16_SAMPLER_2D_RECT_SHADOW_AMD           0x91DB
#define GL_FLOAT16_SAMPLER_1D_ARRAY_SHADOW_AMD          0x91DC
#define GL_FLOAT16_SAMPLER_2D_ARRAY_SHADOW_AMD          0x91DD
#define GL_FLOAT16_SAMPLER_CUBE_SHADOW_AMD              0x91DE
#define GL_FLOAT16_SAMPLER_CUBE_MAP_ARRAY_SHADOW_AMD    0x91DF

#define GL_FLOAT16_IMAGE_1D_AMD                         0x91E0
#define GL_FLOAT16_IMAGE_2D_AMD                         0x91E1
#define GL_FLOAT16_IMAGE_3D_AMD                         0x91E2
#define GL_FLOAT16_IMAGE_2D_RECT_AMD                    0x91E3
#define GL_FLOAT16_IMAGE_CUBE_AMD                       0x91E4
#define GL_FLOAT16_IMAGE_1D_ARRAY_AMD                   0x91E5
#define GL_FLOAT16_IMAGE_2D_ARRAY_AMD                   0x91E6
#define GL_FLOAT16_IMAGE_CUBE_MAP_ARRAY_AMD             0x91E7
#define GL_FLOAT16_IMAGE_BUFFER_AMD                     0x91E8
#define GL_FLOAT16_IMAGE_2D_MULTISAMPLE_AMD             0x91E9
#define GL_FLOAT16_IMAGE_2D_MULTISAMPLE_ARRAY_AMD       0x91EA

#define GL_INT_SAMPLER_1D                 0x8DC9
#define GL_INT_SAMPLER_2D                 0x8DCA
#define GL_INT_SAMPLER_3D                 0x8DCB
#define GL_INT_SAMPLER_CUBE               0x8DCC
#define GL_INT_SAMPLER_1D_ARRAY           0x8DCE
#define GL_INT_SAMPLER_2D_ARRAY           0x8DCF
#define GL_INT_SAMPLER_2D_RECT            0x8DCD
#define GL_INT_SAMPLER_BUFFER             0x8DD0
#define GL_INT_SAMPLER_2D_MULTISAMPLE     0x9109
#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910C
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY     0x900E
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB 0x900E

#define GL_UNSIGNED_INT_SAMPLER_1D        0x8DD1
#define GL_UNSIGNED_INT_SAMPLER_2D        0x8DD2
#define GL_UNSIGNED_INT_SAMPLER_3D        0x8DD3
#define GL_UNSIGNED_INT_SAMPLER_CUBE      0x8DD4
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY  0x8DD6
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY  0x8DD7
#define GL_UNSIGNED_INT_SAMPLER_2D_RECT   0x8DD5
#define GL_UNSIGNED_INT_SAMPLER_BUFFER    0x8DD8
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910D
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY 0x900F
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB 0x900F
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE 0x910A

#define GL_IMAGE_1D                       0x904C
#define GL_IMAGE_2D                       0x904D
#define GL_IMAGE_3D                       0x904E
#define GL_IMAGE_2D_RECT                  0x904F
#define GL_IMAGE_CUBE                     0x9050
#define GL_IMAGE_BUFFER                   0x9051
#define GL_IMAGE_1D_ARRAY                 0x9052
#define GL_IMAGE_2D_ARRAY                 0x9053
#define GL_IMAGE_CUBE_MAP_ARRAY           0x9054
#define GL_IMAGE_2D_MULTISAMPLE           0x9055
#define GL_IMAGE_2D_MULTISAMPLE_ARRAY     0x9056
#define GL_INT_IMAGE_1D                   0x9057
#define GL_INT_IMAGE_2D                   0x9058
#define GL_INT_IMAGE_3D                   0x9059
#define GL_INT_IMAGE_2D_RECT              0x905A
#define GL_INT_IMAGE_CUBE                 0x905B
#define GL_INT_IMAGE_BUFFER               0x905C
#define GL_INT_IMAGE_1D_ARRAY             0x905D
#define GL_INT_IMAGE_2D_ARRAY             0x905E
#define GL_INT_IMAGE_CUBE_MAP_ARRAY       0x905F
#define GL_INT_IMAGE_2D_MULTISAMPLE       0x9060
#define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061
#define GL_UNSIGNED_INT_IMAGE_1D          0x9062
#define GL_UNSIGNED_INT_IMAGE_2D          0x9063
#define GL_UNSIGNED_INT_IMAGE_3D          0x9064
#define GL_UNSIGNED_INT_IMAGE_2D_RECT     0x9065
#define GL_UNSIGNED_INT_IMAGE_CUBE        0x9066
#define GL_UNSIGNED_INT_IMAGE_BUFFER      0x9067
#define GL_UNSIGNED_INT_IMAGE_1D_ARRAY    0x9068
#define GL_UNSIGNED_INT_IMAGE_2D_ARRAY    0x9069
#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C

#define GL_UNSIGNED_INT_ATOMIC_COUNTER    0x92DB
",c++
"/*
** Copyright (c) 2014-2016 The Khronos Group Inc.
**
** Permission is hereby granted, free of charge, to any person obtaining a copy
** of this software and/or associated documentation files (the ""Materials""),
** to deal in the Materials without restriction, including without limitation
** the rights to use, copy, modify, merge, publish, distribute, sublicense,
** and/or sell copies of the Materials, and to permit persons to whom the
** Materials are furnished to do so, subject to the following conditions:
**
** The above copyright notice and this permission notice shall be included in
** all copies or substantial portions of the Materials.
**
** MODIFICATIONS TO THIS FILE MAY MEAN IT NO LONGER ACCURATELY REFLECTS KHRONOS
** STANDARDS. THE UNMODIFIED, NORMATIVE VERSIONS OF KHRONOS SPECIFICATIONS AND
** HEADER INFORMATION ARE LOCATED AT https://www.khronos.org/registry/
**
** THE MATERIALS ARE PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS
** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
** THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
** LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
** FROM,OUT OF OR IN CONNECTION WITH THE MATERIALS OR THE USE OR OTHER DEALINGS
** IN THE MATERIALS.
*/

#ifndef GLSLextEXT_H
#define GLSLextEXT_H

static const int GLSLextEXTVersion = 100;
static const int GLSLextEXTRevision = 2;

static const char* const E_SPV_EXT_shader_stencil_export        = ""SPV_EXT_shader_stencil_export"";
static const char* const E_SPV_EXT_shader_viewport_index_layer  = ""SPV_EXT_shader_viewport_index_layer"";
static const char* const E_SPV_EXT_fragment_fully_covered = ""SPV_EXT_fragment_fully_covered"";
static const char* const E_SPV_EXT_fragment_invocation_density = ""SPV_EXT_fragment_invocation_density"";
static const char* const E_SPV_EXT_demote_to_helper_invocation = ""SPV_EXT_demote_to_helper_invocation"";
static const char* const E_SPV_EXT_shader_atomic_float_add = ""SPV_EXT_shader_atomic_float_add"";
static const char* const E_SPV_EXT_shader_atomic_float16_add = ""SPV_EXT_shader_atomic_float16_add"";
static const char* const E_SPV_EXT_shader_atomic_float_min_max = ""SPV_EXT_shader_atomic_float_min_max"";
static const char* const E_SPV_EXT_shader_image_int64 = ""SPV_EXT_shader_image_int64"";

#endif  // #ifndef GLSLextEXT_H
",c++
"//
// Copyright (C) 2002-2005  3Dlabs Inc. Ltd.
// Copyright (C) 2013 LunarG, Inc.
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
//    Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//
//    Redistributions in binary form must reproduce the above
//    copyright notice, this list of conditions and the following
//    disclaimer in the documentation and/or other materials provided
//    with the distribution.
//
//    Neither the name of 3Dlabs Inc. Ltd. nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
// COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
// ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//

#ifndef _RESOURCE_LIMITS_INCLUDED_
#define _RESOURCE_LIMITS_INCLUDED_

struct TLimits {
    bool nonInductiveForLoops;
    bool whileLoops;
    bool doWhileLoops;
    bool generalUniformIndexing;
    bool generalAttributeMatrixVectorIndexing;
    bool generalVaryingIndexing;
    bool generalSamplerIndexing;
    bool generalVariableIndexing;
    bool generalConstantMatrixVectorIndexing;
};

struct TBuiltInResource {
    int maxLights;
    int maxClipPlanes;
    int maxTextureUnits;
    int maxTextureCoords;
    int maxVertexAttribs;
    int maxVertexUniformComponents;
    int maxVaryingFloats;
    int maxVertexTextureImageUnits;
    int maxCombinedTextureImageUnits;
    int maxTextureImageUnits;
    int maxFragmentUniformComponents;
    int maxDrawBuffers;
    int maxVertexUniformVectors;
    int maxVaryingVectors;
    int maxFragmentUniformVectors;
    int maxVertexOutputVectors;
    int maxFragmentInputVectors;
    int minProgramTexelOffset;
    int maxProgramTexelOffset;
    int maxClipDistances;
    int maxComputeWorkGroupCountX;
    int maxComputeWorkGroupCountY;
    int maxComputeWorkGroupCountZ;
    int maxComputeWorkGroupSizeX;
    int maxComputeWorkGroupSizeY;
    int maxComputeWorkGroupSizeZ;
    int maxComputeUniformComponents;
    int maxComputeTextureImageUnits;
    int maxComputeImageUniforms;
    int maxComputeAtomicCounters;
    int maxComputeAtomicCounterBuffers;
    int maxVaryingComponents;
    int maxVertexOutputComponents;
    int maxGeometryInputComponents;
    int maxGeometryOutputComponents;
    int maxFragmentInputComponents;
    int maxImageUnits;
    int maxCombinedImageUnitsAndFragmentOutputs;
    int maxCombinedShaderOutputResources;
    int maxImageSamples;
    int maxVertexImageUniforms;
    int maxTessControlImageUniforms;
    int maxTessEvaluationImageUniforms;
    int maxGeometryImageUniforms;
    int maxFragmentImageUniforms;
    int maxCombinedImageUniforms;
    int maxGeometryTextureImageUnits;
    int maxGeometryOutputVertices;
    int maxGeometryTotalOutputComponents;
    int maxGeometryUniformComponents;
    int maxGeometryVaryingComponents;
    int maxTessControlInputComponents;
    int maxTessControlOutputComponents;
    int maxTessControlTextureImageUnits;
    int maxTessControlUniformComponents;
    int maxTessControlTotalOutputComponents;
    int maxTessEvaluationInputComponents;
    int maxTessEvaluationOutputComponents;
    int maxTessEvaluationTextureImageUnits;
    int maxTessEvaluationUniformComponents;
    int maxTessPatchComponents;
    int maxPatchVertices;
    int maxTessGenLevel;
    int maxViewports;
    int maxVertexAtomicCounters;
    int maxTessControlAtomicCounters;
    int maxTessEvaluationAtomicCounters;
    int maxGeometryAtomicCounters;
    int maxFragmentAtomicCounters;
    int maxCombinedAtomicCounters;
    int maxAtomicCounterBindings;
    int maxVertexAtomicCounterBuffers;
    int maxTessControlAtomicCounterBuffers;
    int maxTessEvaluationAtomicCounterBuffers;
    int maxGeometryAtomicCounterBuffers;
    int maxFragmentAtomicCounterBuffers;
    int maxCombinedAtomicCounterBuffers;
    int maxAtomicCounterBufferSize;
    int maxTransformFeedbackBuffers;
    int maxTransformFeedbackInterleavedComponents;
    int maxCullDistances;
    int maxCombinedClipAndCullDistances;
    int maxSamples;
    int maxMeshOutputVerticesNV;
    int maxMeshOutputPrimitivesNV;
    int maxMeshWorkGroupSizeX_NV;
    int maxMeshWorkGroupSizeY_NV;
    int maxMeshWorkGroupSizeZ_NV;
    int maxTaskWorkGroupSizeX_NV;
    int maxTaskWorkGroupSizeY_NV;
    int maxTaskWorkGroupSizeZ_NV;
    int maxMeshViewCountNV;
    int maxDualSourceDrawBuffersEXT;

    TLimits limits;
};

#endif // _RESOURCE_LIMITS_INCLUDED_
",c++
"// Copyright 2018 The Shaderc Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the ""License"");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an ""AS IS"" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef SHADERC_STATUS_H_
#define SHADERC_STATUS_H_

#ifdef __cplusplus
extern ""C"" {
#endif

// Indicate the status of a compilation.
typedef enum {
  shaderc_compilation_status_success = 0,
  shaderc_compilation_status_invalid_stage = 1,  // error stage deduction
  shaderc_compilation_status_compilation_error = 2,
  shaderc_compilation_status_internal_error = 3,  // unexpected failure
  shaderc_compilation_status_null_result_object = 4,
  shaderc_compilation_status_invalid_assembly = 5,
  shaderc_compilation_status_validation_error = 6,
  shaderc_compilation_status_transformation_error = 7,
  shaderc_compilation_status_configuration_error = 8,
} shaderc_compilation_status;

#ifdef __cplusplus
}
#endif  // __cplusplus

#endif  // SHADERC_STATUS_H_
",c++
"        u = g_nDataIdx;
",c++
"// Copyright 2016 The Shaderc Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the ""License"");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an ""AS IS"" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include ""shaderc/shaderc.h""
#include <assert.h>
#include <string.h>

// Because we want to test this as a plain old C file, we cannot use
// gtest, so just run a simple smoke test.

int main() {
  const char* test_program =
      ""#version 310 es\n""
      ""layout(location = 0) in highp vec4 vtxColor;\n""
      ""layout(location = 0) out highp vec4 outColor;\n""
      ""void main() {\n""
      ""  outColor = vtxColor;""
      ""}\n"";
  shaderc_compiler_t compiler;
  shaderc_compilation_result_t result;
  shaderc_compile_options_t options;

  compiler = shaderc_compiler_initialize();
  options = shaderc_compile_options_initialize();
  shaderc_compile_options_add_macro_definition(options, ""FOO"", 3, ""1"", 1);
  result = shaderc_compile_into_spv(
      compiler, test_program, strlen(test_program),
      shaderc_glsl_fragment_shader, ""a.glsl"", ""main"", options);

  assert(result);

  if (shaderc_result_get_compilation_status(result) !=
      shaderc_compilation_status_success) {
    // Early exit on failure.
    return -1;
  }
  shaderc_result_release(result);
  shaderc_compile_options_release(options);
  shaderc_compiler_release(compiler);

  return 0;
}

",c++
"/* A Bison parser, made by GNU Bison 3.7.4.  */

/* Bison interface for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2020 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
   especially those whose name start with YY_ or yy_.  They are
   private implementation details that can be changed or removed.  */

#ifndef YY_YY_MACHINEINDEPENDENT_GLSLANG_TAB_CPP_H_INCLUDED
# define YY_YY_MACHINEINDEPENDENT_GLSLANG_TAB_CPP_H_INCLUDED
/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 1
#endif
#if YYDEBUG
extern int yydebug;
#endif

/* Token kinds.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
  enum yytokentype
  {
    YYEMPTY = -2,
    YYEOF = 0,                     /* ""end of file""  */
    YYerror = 256,                 /* error  */
    YYUNDEF = 257,                 /* ""invalid token""  */
    CONST = 258,                   /* CONST  */
    BOOL = 259,                    /* BOOL  */
    INT = 260,                     /* INT  */
    UINT = 261,                    /* UINT  */
    FLOAT = 262,                   /* FLOAT  */
    BVEC2 = 263,                   /* BVEC2  */
    BVEC3 = 264,                   /* BVEC3  */
    BVEC4 = 265,                   /* BVEC4  */
    IVEC2 = 266,                   /* IVEC2  */
    IVEC3 = 267,                   /* IVEC3  */
    IVEC4 = 268,                   /* IVEC4  */
    UVEC2 = 269,                   /* UVEC2  */
    UVEC3 = 270,                   /* UVEC3  */
    UVEC4 = 271,                   /* UVEC4  */
    VEC2 = 272,                    /* VEC2  */
    VEC3 = 273,                    /* VEC3  */
    VEC4 = 274,                    /* VEC4  */
    MAT2 = 275,                    /* MAT2  */
    MAT3 = 276,                    /* MAT3  */
    MAT4 = 277,                    /* MAT4  */
    MAT2X2 = 278,                  /* MAT2X2  */
    MAT2X3 = 279,                  /* MAT2X3  */
    MAT2X4 = 280,                  /* MAT2X4  */
    MAT3X2 = 281,                  /* MAT3X2  */
    MAT3X3 = 282,                  /* MAT3X3  */
    MAT3X4 = 283,                  /* MAT3X4  */
    MAT4X2 = 284,                  /* MAT4X2  */
    MAT4X3 = 285,                  /* MAT4X3  */
    MAT4X4 = 286,                  /* MAT4X4  */
    SAMPLER2D = 287,               /* SAMPLER2D  */
    SAMPLER3D = 288,               /* SAMPLER3D  */
    SAMPLERCUBE = 289,             /* SAMPLERCUBE  */
    SAMPLER2DSHADOW = 290,         /* SAMPLER2DSHADOW  */
    SAMPLERCUBESHADOW = 291,       /* SAMPLERCUBESHADOW  */
    SAMPLER2DARRAY = 292,          /* SAMPLER2DARRAY  */
    SAMPLER2DARRAYSHADOW = 293,    /* SAMPLER2DARRAYSHADOW  */
    ISAMPLER2D = 294,              /* ISAMPLER2D  */
    ISAMPLER3D = 295,              /* ISAMPLER3D  */
    ISAMPLERCUBE = 296,            /* ISAMPLERCUBE  */
    ISAMPLER2DARRAY = 297,         /* ISAMPLER2DARRAY  */
    USAMPLER2D = 298,              /* USAMPLER2D  */
    USAMPLER3D = 299,              /* USAMPLER3D  */
    USAMPLERCUBE = 300,            /* USAMPLERCUBE  */
    USAMPLER2DARRAY = 301,         /* USAMPLER2DARRAY  */
    SAMPLER = 302,                 /* SAMPLER  */
    SAMPLERSHADOW = 303,           /* SAMPLERSHADOW  */
    TEXTURE2D = 304,               /* TEXTURE2D  */
    TEXTURE3D = 305,               /* TEXTURE3D  */
    TEXTURECUBE = 306,             /* TEXTURECUBE  */
    TEXTURE2DARRAY = 307,          /* TEXTURE2DARRAY  */
    ITEXTURE2D = 308,              /* ITEXTURE2D  */
    ITEXTURE3D = 309,              /* ITEXTURE3D  */
    ITEXTURECUBE = 310,            /* ITEXTURECUBE  */
    ITEXTURE2DARRAY = 311,         /* ITEXTURE2DARRAY  */
    UTEXTURE2D = 312,              /* UTEXTURE2D  */
    UTEXTURE3D = 313,              /* UTEXTURE3D  */
    UTEXTURECUBE = 314,            /* UTEXTURECUBE  */
    UTEXTURE2DARRAY = 315,         /* UTEXTURE2DARRAY  */
    ATTRIBUTE = 316,               /* ATTRIBUTE  */
    VARYING = 317,                 /* VARYING  */
    FLOAT16_T = 318,               /* FLOAT16_T  */
    FLOAT32_T = 319,               /* FLOAT32_T  */
    DOUBLE = 320,                  /* DOUBLE  */
    FLOAT64_T = 321,               /* FLOAT64_T  */
    INT64_T = 322,                 /* INT64_T  */
    UINT64_T = 323,                /* UINT64_T  */
    INT32_T = 324,                 /* INT32_T  */
    UINT32_T = 325,                /* UINT32_T  */
    INT16_T = 326,                 /* INT16_T  */
    UINT16_T = 327,                /* UINT16_T  */
    INT8_T = 328,                  /* INT8_T  */
    UINT8_T = 329,                 /* UINT8_T  */
    I64VEC2 = 330,                 /* I64VEC2  */
    I64VEC3 = 331,                 /* I64VEC3  */
    I64VEC4 = 332,                 /* I64VEC4  */
    U64VEC2 = 333,                 /* U64VEC2  */
    U64VEC3 = 334,                 /* U64VEC3  */
    U64VEC4 = 335,                 /* U64VEC4  */
    I32VEC2 = 336,                 /* I32VEC2  */
    I32VEC3 = 337,                 /* I32VEC3  */
    I32VEC4 = 338,                 /* I32VEC4  */
    U32VEC2 = 339,                 /* U32VEC2  */
    U32VEC3 = 340,                 /* U32VEC3  */
    U32VEC4 = 341,                 /* U32VEC4  */
    I16VEC2 = 342,                 /* I16VEC2  */
    I16VEC3 = 343,                 /* I16VEC3  */
    I16VEC4 = 344,                 /* I16VEC4  */
    U16VEC2 = 345,                 /* U16VEC2  */
    U16VEC3 = 346,                 /* U16VEC3  */
    U16VEC4 = 347,                 /* U16VEC4  */
    I8VEC2 = 348,                  /* I8VEC2  */
    I8VEC3 = 349,                  /* I8VEC3  */
    I8VEC4 = 350,                  /* I8VEC4  */
    U8VEC2 = 351,                  /* U8VEC2  */
    U8VEC3 = 352,                  /* U8VEC3  */
    U8VEC4 = 353,                  /* U8VEC4  */
    DVEC2 = 354,                   /* DVEC2  */
    DVEC3 = 355,                   /* DVEC3  */
    DVEC4 = 356,                   /* DVEC4  */
    DMAT2 = 357,                   /* DMAT2  */
    DMAT3 = 358,                   /* DMAT3  */
    DMAT4 = 359,                   /* DMAT4  */
    F16VEC2 = 360,                 /* F16VEC2  */
    F16VEC3 = 361,                 /* F16VEC3  */
    F16VEC4 = 362,                 /* F16VEC4  */
    F16MAT2 = 363,                 /* F16MAT2  */
    F16MAT3 = 364,                 /* F16MAT3  */
    F16MAT4 = 365,                 /* F16MAT4  */
    F32VEC2 = 366,                 /* F32VEC2  */
    F32VEC3 = 367,                 /* F32VEC3  */
    F32VEC4 = 368,                 /* F32VEC4  */
    F32MAT2 = 369,                 /* F32MAT2  */
    F32MAT3 = 370,                 /* F32MAT3  */
    F32MAT4 = 371,                 /* F32MAT4  */
    F64VEC2 = 372,                 /* F64VEC2  */
    F64VEC3 = 373,                 /* F64VEC3  */
    F64VEC4 = 374,                 /* F64VEC4  */
    F64MAT2 = 375,                 /* F64MAT2  */
    F64MAT3 = 376,                 /* F64MAT3  */
    F64MAT4 = 377,                 /* F64MAT4  */
    DMAT2X2 = 378,                 /* DMAT2X2  */
    DMAT2X3 = 379,                 /* DMAT2X3  */
    DMAT2X4 = 380,                 /* DMAT2X4  */
    DMAT3X2 = 381,                 /* DMAT3X2  */
    DMAT3X3 = 382,                 /* DMAT3X3  */
    DMAT3X4 = 383,                 /* DMAT3X4  */
    DMAT4X2 = 384,                 /* DMAT4X2  */
    DMAT4X3 = 385,                 /* DMAT4X3  */
    DMAT4X4 = 386,                 /* DMAT4X4  */
    F16MAT2X2 = 387,               /* F16MAT2X2  */
    F16MAT2X3 = 388,               /* F16MAT2X3  */
    F16MAT2X4 = 389,               /* F16MAT2X4  */
    F16MAT3X2 = 390,               /* F16MAT3X2  */
    F16MAT3X3 = 391,               /* F16MAT3X3  */
    F16MAT3X4 = 392,               /* F16MAT3X4  */
    F16MAT4X2 = 393,               /* F16MAT4X2  */
    F16MAT4X3 = 394,               /* F16MAT4X3  */
    F16MAT4X4 = 395,               /* F16MAT4X4  */
    F32MAT2X2 = 396,               /* F32MAT2X2  */
    F32MAT2X3 = 397,               /* F32MAT2X3  */
    F32MAT2X4 = 398,               /* F32MAT2X4  */
    F32MAT3X2 = 399,               /* F32MAT3X2  */
    F32MAT3X3 = 400,               /* F32MAT3X3  */
    F32MAT3X4 = 401,               /* F32MAT3X4  */
    F32MAT4X2 = 402,               /* F32MAT4X2  */
    F32MAT4X3 = 403,               /* F32MAT4X3  */
    F32MAT4X4 = 404,               /* F32MAT4X4  */
    F64MAT2X2 = 405,               /* F64MAT2X2  */
    F64MAT2X3 = 406,               /* F64MAT2X3  */
    F64MAT2X4 = 407,               /* F64MAT2X4  */
    F64MAT3X2 = 408,               /* F64MAT3X2  */
    F64MAT3X3 = 409,               /* F64MAT3X3  */
    F64MAT3X4 = 410,               /* F64MAT3X4  */
    F64MAT4X2 = 411,               /* F64MAT4X2  */
    F64MAT4X3 = 412,               /* F64MAT4X3  */
    F64MAT4X4 = 413,               /* F64MAT4X4  */
    ATOMIC_UINT = 414,             /* ATOMIC_UINT  */
    ACCSTRUCTNV = 415,             /* ACCSTRUCTNV  */
    ACCSTRUCTEXT = 416,            /* ACCSTRUCTEXT  */
    RAYQUERYEXT = 417,             /* RAYQUERYEXT  */
    FCOOPMATNV = 418,              /* FCOOPMATNV  */
    ICOOPMATNV = 419,              /* ICOOPMATNV  */
    UCOOPMATNV = 420,              /* UCOOPMATNV  */
    SAMPLERCUBEARRAY = 421,        /* SAMPLERCUBEARRAY  */
    SAMPLERCUBEARRAYSHADOW = 422,  /* SAMPLERCUBEARRAYSHADOW  */
    ISAMPLERCUBEARRAY = 423,       /* ISAMPLERCUBEARRAY  */
    USAMPLERCUBEARRAY = 424,       /* USAMPLERCUBEARRAY  */
    SAMPLER1D = 425,               /* SAMPLER1D  */
    SAMPLER1DARRAY = 426,          /* SAMPLER1DARRAY  */
    SAMPLER1DARRAYSHADOW = 427,    /* SAMPLER1DARRAYSHADOW  */
    ISAMPLER1D = 428,              /* ISAMPLER1D  */
    SAMPLER1DSHADOW = 429,         /* SAMPLER1DSHADOW  */
    SAMPLER2DRECT = 430,           /* SAMPLER2DRECT  */
    SAMPLER2DRECTSHADOW = 431,     /* SAMPLER2DRECTSHADOW  */
    ISAMPLER2DRECT = 432,          /* ISAMPLER2DRECT  */
    USAMPLER2DRECT = 433,          /* USAMPLER2DRECT  */
    SAMPLERBUFFER = 434,           /* SAMPLERBUFFER  */
    ISAMPLERBUFFER = 435,          /* ISAMPLERBUFFER  */
    USAMPLERBUFFER = 436,          /* USAMPLERBUFFER  */
    SAMPLER2DMS = 437,             /* SAMPLER2DMS  */
    ISAMPLER2DMS = 438,            /* ISAMPLER2DMS  */
    USAMPLER2DMS = 439,            /* USAMPLER2DMS  */
    SAMPLER2DMSARRAY = 440,        /* SAMPLER2DMSARRAY  */
    ISAMPLER2DMSARRAY = 441,       /* ISAMPLER2DMSARRAY  */
    USAMPLER2DMSARRAY = 442,       /* USAMPLER2DMSARRAY  */
    SAMPLEREXTERNALOES = 443,      /* SAMPLEREXTERNALOES  */
    SAMPLEREXTERNAL2DY2YEXT = 444, /* SAMPLEREXTERNAL2DY2YEXT  */
    ISAMPLER1DARRAY = 445,         /* ISAMPLER1DARRAY  */
    USAMPLER1D = 446,              /* USAMPLER1D  */
    USAMPLER1DARRAY = 447,         /* USAMPLER1DARRAY  */
    F16SAMPLER1D = 448,            /* F16SAMPLER1D  */
    F16SAMPLER2D = 449,            /* F16SAMPLER2D  */
    F16SAMPLER3D = 450,            /* F16SAMPLER3D  */
    F16SAMPLER2DRECT = 451,        /* F16SAMPLER2DRECT  */
    F16SAMPLERCUBE = 452,          /* F16SAMPLERCUBE  */
    F16SAMPLER1DARRAY = 453,       /* F16SAMPLER1DARRAY  */
    F16SAMPLER2DARRAY = 454,       /* F16SAMPLER2DARRAY  */
    F16SAMPLERCUBEARRAY = 455,     /* F16SAMPLERCUBEARRAY  */
    F16SAMPLERBUFFER = 456,        /* F16SAMPLERBUFFER  */
    F16SAMPLER2DMS = 457,          /* F16SAMPLER2DMS  */
    F16SAMPLER2DMSARRAY = 458,     /* F16SAMPLER2DMSARRAY  */
    F16SAMPLER1DSHADOW = 459,      /* F16SAMPLER1DSHADOW  */
    F16SAMPLER2DSHADOW = 460,      /* F16SAMPLER2DSHADOW  */
    F16SAMPLER1DARRAYSHADOW = 461, /* F16SAMPLER1DARRAYSHADOW  */
    F16SAMPLER2DARRAYSHADOW = 462, /* F16SAMPLER2DARRAYSHADOW  */
    F16SAMPLER2DRECTSHADOW = 463,  /* F16SAMPLER2DRECTSHADOW  */
    F16SAMPLERCUBESHADOW = 464,    /* F16SAMPLERCUBESHADOW  */
    F16SAMPLERCUBEARRAYSHADOW = 465, /* F16SAMPLERCUBEARRAYSHADOW  */
    IMAGE1D = 466,                 /* IMAGE1D  */
    IIMAGE1D = 467,                /* IIMAGE1D  */
    UIMAGE1D = 468,                /* UIMAGE1D  */
    IMAGE2D = 469,                 /* IMAGE2D  */
    IIMAGE2D = 470,                /* IIMAGE2D  */
    UIMAGE2D = 471,                /* UIMAGE2D  */
    IMAGE3D = 472,                 /* IMAGE3D  */
    IIMAGE3D = 473,                /* IIMAGE3D  */
    UIMAGE3D = 474,                /* UIMAGE3D  */
    IMAGE2DRECT = 475,             /* IMAGE2DRECT  */
    IIMAGE2DRECT = 476,            /* IIMAGE2DRECT  */
    UIMAGE2DRECT = 477,            /* UIMAGE2DRECT  */
    IMAGECUBE = 478,               /* IMAGECUBE  */
    IIMAGECUBE = 479,              /* IIMAGECUBE  */
    UIMAGECUBE = 480,              /* UIMAGECUBE  */
    IMAGEBUFFER = 481,             /* IMAGEBUFFER  */
    IIMAGEBUFFER = 482,            /* IIMAGEBUFFER  */
    UIMAGEBUFFER = 483,            /* UIMAGEBUFFER  */
    IMAGE1DARRAY = 484,            /* IMAGE1DARRAY  */
    IIMAGE1DARRAY = 485,           /* IIMAGE1DARRAY  */
    UIMAGE1DARRAY = 486,           /* UIMAGE1DARRAY  */
    IMAGE2DARRAY = 487,            /* IMAGE2DARRAY  */
    IIMAGE2DARRAY = 488,           /* IIMAGE2DARRAY  */
    UIMAGE2DARRAY = 489,           /* UIMAGE2DARRAY  */
    IMAGECUBEARRAY = 490,          /* IMAGECUBEARRAY  */
    IIMAGECUBEARRAY = 491,         /* IIMAGECUBEARRAY  */
    UIMAGECUBEARRAY = 492,         /* UIMAGECUBEARRAY  */
    IMAGE2DMS = 493,               /* IMAGE2DMS  */
    IIMAGE2DMS = 494,              /* IIMAGE2DMS  */
    UIMAGE2DMS = 495,              /* UIMAGE2DMS  */
    IMAGE2DMSARRAY = 496,          /* IMAGE2DMSARRAY  */
    IIMAGE2DMSARRAY = 497,         /* IIMAGE2DMSARRAY  */
    UIMAGE2DMSARRAY = 498,         /* UIMAGE2DMSARRAY  */
    F16IMAGE1D = 499,              /* F16IMAGE1D  */
    F16IMAGE2D = 500,              /* F16IMAGE2D  */
    F16IMAGE3D = 501,              /* F16IMAGE3D  */
    F16IMAGE2DRECT = 502,          /* F16IMAGE2DRECT  */
    F16IMAGECUBE = 503,            /* F16IMAGECUBE  */
    F16IMAGE1DARRAY = 504,         /* F16IMAGE1DARRAY  */
    F16IMAGE2DARRAY = 505,         /* F16IMAGE2DARRAY  */
    F16IMAGECUBEARRAY = 506,       /* F16IMAGECUBEARRAY  */
    F16IMAGEBUFFER = 507,          /* F16IMAGEBUFFER  */
    F16IMAGE2DMS = 508,            /* F16IMAGE2DMS  */
    F16IMAGE2DMSARRAY = 509,       /* F16IMAGE2DMSARRAY  */
    I64IMAGE1D = 510,              /* I64IMAGE1D  */
    U64IMAGE1D = 511,              /* U64IMAGE1D  */
    I64IMAGE2D = 512,              /* I64IMAGE2D  */
    U64IMAGE2D = 513,              /* U64IMAGE2D  */
    I64IMAGE3D = 514,              /* I64IMAGE3D  */
    U64IMAGE3D = 515,              /* U64IMAGE3D  */
    I64IMAGE2DRECT = 516,          /* I64IMAGE2DRECT  */
    U64IMAGE2DRECT = 517,          /* U64IMAGE2DRECT  */
    I64IMAGECUBE = 518,            /* I64IMAGECUBE  */
    U64IMAGECUBE = 519,            /* U64IMAGECUBE  */
    I64IMAGEBUFFER = 520,          /* I64IMAGEBUFFER  */
    U64IMAGEBUFFER = 521,          /* U64IMAGEBUFFER  */
    I64IMAGE1DARRAY = 522,         /* I64IMAGE1DARRAY  */
    U64IMAGE1DARRAY = 523,         /* U64IMAGE1DARRAY  */
    I64IMAGE2DARRAY = 524,         /* I64IMAGE2DARRAY  */
    U64IMAGE2DARRAY = 525,         /* U64IMAGE2DARRAY  */
    I64IMAGECUBEARRAY = 526,       /* I64IMAGECUBEARRAY  */
    U64IMAGECUBEARRAY = 527,       /* U64IMAGECUBEARRAY  */
    I64IMAGE2DMS = 528,            /* I64IMAGE2DMS  */
    U64IMAGE2DMS = 529,            /* U64IMAGE2DMS  */
    I64IMAGE2DMSARRAY = 530,       /* I64IMAGE2DMSARRAY  */
    U64IMAGE2DMSARRAY = 531,       /* U64IMAGE2DMSARRAY  */
    TEXTURECUBEARRAY = 532,        /* TEXTURECUBEARRAY  */
    ITEXTURECUBEARRAY = 533,       /* ITEXTURECUBEARRAY  */
    UTEXTURECUBEARRAY = 534,       /* UTEXTURECUBEARRAY  */
    TEXTURE1D = 535,               /* TEXTURE1D  */
    ITEXTURE1D = 536,              /* ITEXTURE1D  */
    UTEXTURE1D = 537,              /* UTEXTURE1D  */
    TEXTURE1DARRAY = 538,          /* TEXTURE1DARRAY  */
    ITEXTURE1DARRAY = 539,         /* ITEXTURE1DARRAY  */
    UTEXTURE1DARRAY = 540,         /* UTEXTURE1DARRAY  */
    TEXTURE2DRECT = 541,           /* TEXTURE2DRECT  */
    ITEXTURE2DRECT = 542,          /* ITEXTURE2DRECT  */
    UTEXTURE2DRECT = 543,          /* UTEXTURE2DRECT  */
    TEXTUREBUFFER = 544,           /* TEXTUREBUFFER  */
    ITEXTUREBUFFER = 545,          /* ITEXTUREBUFFER  */
    UTEXTUREBUFFER = 546,          /* UTEXTUREBUFFER  */
    TEXTURE2DMS = 547,             /* TEXTURE2DMS  */
    ITEXTURE2DMS = 548,            /* ITEXTURE2DMS  */
    UTEXTURE2DMS = 549,            /* UTEXTURE2DMS  */
    TEXTURE2DMSARRAY = 550,        /* TEXTURE2DMSARRAY  */
    ITEXTURE2DMSARRAY = 551,       /* ITEXTURE2DMSARRAY  */
    UTEXTURE2DMSARRAY = 552,       /* UTEXTURE2DMSARRAY  */
    F16TEXTURE1D = 553,            /* F16TEXTURE1D  */
    F16TEXTURE2D = 554,            /* F16TEXTURE2D  */
    F16TEXTURE3D = 555,            /* F16TEXTURE3D  */
    F16TEXTURE2DRECT = 556,        /* F16TEXTURE2DRECT  */
    F16TEXTURECUBE = 557,          /* F16TEXTURECUBE  */
    F16TEXTURE1DARRAY = 558,       /* F16TEXTURE1DARRAY  */
    F16TEXTURE2DARRAY = 559,       /* F16TEXTURE2DARRAY  */
    F16TEXTURECUBEARRAY = 560,     /* F16TEXTURECUBEARRAY  */
    F16TEXTUREBUFFER = 561,        /* F16TEXTUREBUFFER  */
    F16TEXTURE2DMS = 562,          /* F16TEXTURE2DMS  */
    F16TEXTURE2DMSARRAY = 563,     /* F16TEXTURE2DMSARRAY  */
    SUBPASSINPUT = 564,            /* SUBPASSINPUT  */
    SUBPASSINPUTMS = 565,          /* SUBPASSINPUTMS  */
    ISUBPASSINPUT = 566,           /* ISUBPASSINPUT  */
    ISUBPASSINPUTMS = 567,         /* ISUBPASSINPUTMS  */
    USUBPASSINPUT = 568,           /* USUBPASSINPUT  */
    USUBPASSINPUTMS = 569,         /* USUBPASSINPUTMS  */
    F16SUBPASSINPUT = 570,         /* F16SUBPASSINPUT  */
    F16SUBPASSINPUTMS = 571,       /* F16SUBPASSINPUTMS  */
    SPIRV_INSTRUCTION = 572,       /* SPIRV_INSTRUCTION  */
    SPIRV_EXECUTION_MODE = 573,    /* SPIRV_EXECUTION_MODE  */
    SPIRV_EXECUTION_MODE_ID = 574, /* SPIRV_EXECUTION_MODE_ID  */
    SPIRV_DECORATE = 575,          /* SPIRV_DECORATE  */
    SPIRV_DECORATE_ID = 576,       /* SPIRV_DECORATE_ID  */
    SPIRV_DECORATE_STRING = 577,   /* SPIRV_DECORATE_STRING  */
    SPIRV_TYPE = 578,              /* SPIRV_TYPE  */
    SPIRV_STORAGE_CLASS = 579,     /* SPIRV_STORAGE_CLASS  */
    SPIRV_BY_REFERENCE = 580,      /* SPIRV_BY_REFERENCE  */
    SPIRV_LITERAL = 581,           /* SPIRV_LITERAL  */
    LEFT_OP = 582,                 /* LEFT_OP  */
    RIGHT_OP = 583,                /* RIGHT_OP  */
    INC_OP = 584,                  /* INC_OP  */
    DEC_OP = 585,                  /* DEC_OP  */
    LE_OP = 586,                   /* LE_OP  */
    GE_OP = 587,                   /* GE_OP  */
    EQ_OP = 588,                   /* EQ_OP  */
    NE_OP = 589,                   /* NE_OP  */
    AND_OP = 590,                  /* AND_OP  */
    OR_OP = 591,                   /* OR_OP  */
    XOR_OP = 592,                  /* XOR_OP  */
    MUL_ASSIGN = 593,              /* MUL_ASSIGN  */
    DIV_ASSIGN = 594,              /* DIV_ASSIGN  */
    ADD_ASSIGN = 595,              /* ADD_ASSIGN  */
    MOD_ASSIGN = 596,              /* MOD_ASSIGN  */
    LEFT_ASSIGN = 597,             /* LEFT_ASSIGN  */
    RIGHT_ASSIGN = 598,            /* RIGHT_ASSIGN  */
    AND_ASSIGN = 599,              /* AND_ASSIGN  */
    XOR_ASSIGN = 600,              /* XOR_ASSIGN  */
    OR_ASSIGN = 601,               /* OR_ASSIGN  */
    SUB_ASSIGN = 602,              /* SUB_ASSIGN  */
    STRING_LITERAL = 603,          /* STRING_LITERAL  */
    LEFT_PAREN = 604,              /* LEFT_PAREN  */
    RIGHT_PAREN = 605,             /* RIGHT_PAREN  */
    LEFT_BRACKET = 606,            /* LEFT_BRACKET  */
    RIGHT_BRACKET = 607,           /* RIGHT_BRACKET  */
    LEFT_BRACE = 608,              /* LEFT_BRACE  */
    RIGHT_BRACE = 609,             /* RIGHT_BRACE  */
    DOT = 610,                     /* DOT  */
    COMMA = 611,                   /* COMMA  */
    COLON = 612,                   /* COLON  */
    EQUAL = 613,                   /* EQUAL  */
    SEMICOLON = 614,               /* SEMICOLON  */
    BANG = 615,                    /* BANG  */
    DASH = 616,                    /* DASH  */
    TILDE = 617,                   /* TILDE  */
    PLUS = 618,                    /* PLUS  */
    STAR = 619,                    /* STAR  */
    SLASH = 620,                   /* SLASH  */
    PERCENT = 621,                 /* PERCENT  */
    LEFT_ANGLE = 622,              /* LEFT_ANGLE  */
    RIGHT_ANGLE = 623,             /* RIGHT_ANGLE  */
    VERTICAL_BAR = 624,            /* VERTICAL_BAR  */
    CARET = 625,                   /* CARET  */
    AMPERSAND = 626,               /* AMPERSAND  */
    QUESTION = 627,                /* QUESTION  */
    INVARIANT = 628,               /* INVARIANT  */
    HIGH_PRECISION = 629,          /* HIGH_PRECISION  */
    MEDIUM_PRECISION = 630,        /* MEDIUM_PRECISION  */
    LOW_PRECISION = 631,           /* LOW_PRECISION  */
    PRECISION = 632,               /* PRECISION  */
    PACKED = 633,                  /* PACKED  */
    RESOURCE = 634,                /* RESOURCE  */
    SUPERP = 635,                  /* SUPERP  */
    FLOATCONSTANT = 636,           /* FLOATCONSTANT  */
    INTCONSTANT = 637,             /* INTCONSTANT  */
    UINTCONSTANT = 638,            /* UINTCONSTANT  */
    BOOLCONSTANT = 639,            /* BOOLCONSTANT  */
    IDENTIFIER = 640,              /* IDENTIFIER  */
    TYPE_NAME = 641,               /* TYPE_NAME  */
    CENTROID = 642,                /* CENTROID  */
    IN = 643,                      /* IN  */
    OUT = 644,                     /* OUT  */
    INOUT = 645,                   /* INOUT  */
    STRUCT = 646,                  /* STRUCT  */
    VOID = 647,                    /* VOID  */
    WHILE = 648,                   /* WHILE  */
    BREAK = 649,                   /* BREAK  */
    CONTINUE = 650,                /* CONTINUE  */
    DO = 651,                      /* DO  */
    ELSE = 652,                    /* ELSE  */
    FOR = 653,                     /* FOR  */
    IF = 654,                      /* IF  */
    DISCARD = 655,                 /* DISCARD  */
    RETURN = 656,                  /* RETURN  */
    SWITCH = 657,                  /* SWITCH  */
    CASE = 658,                    /* CASE  */
    DEFAULT = 659,                 /* DEFAULT  */
    TERMINATE_INVOCATION = 660,    /* TERMINATE_INVOCATION  */
    TERMINATE_RAY = 661,           /* TERMINATE_RAY  */
    IGNORE_INTERSECTION = 662,     /* IGNORE_INTERSECTION  */
    UNIFORM = 663,                 /* UNIFORM  */
    SHARED = 664,                  /* SHARED  */
    BUFFER = 665,                  /* BUFFER  */
    FLAT = 666,                    /* FLAT  */
    SMOOTH = 667,                  /* SMOOTH  */
    LAYOUT = 668,                  /* LAYOUT  */
    DOUBLECONSTANT = 669,          /* DOUBLECONSTANT  */
    INT16CONSTANT = 670,           /* INT16CONSTANT  */
    UINT16CONSTANT = 671,          /* UINT16CONSTANT  */
    FLOAT16CONSTANT = 672,         /* FLOAT16CONSTANT  */
    INT32CONSTANT = 673,           /* INT32CONSTANT  */
    UINT32CONSTANT = 674,          /* UINT32CONSTANT  */
    INT64CONSTANT = 675,           /* INT64CONSTANT  */
    UINT64CONSTANT = 676,          /* UINT64CONSTANT  */
    SUBROUTINE = 677,              /* SUBROUTINE  */
    DEMOTE = 678,                  /* DEMOTE  */
    PAYLOADNV = 679,               /* PAYLOADNV  */
    PAYLOADINNV = 680,             /* PAYLOADINNV  */
    HITATTRNV = 681,               /* HITATTRNV  */
    CALLDATANV = 682,              /* CALLDATANV  */
    CALLDATAINNV = 683,            /* CALLDATAINNV  */
    PAYLOADEXT = 684,              /* PAYLOADEXT  */
    PAYLOADINEXT = 685,            /* PAYLOADINEXT  */
    HITATTREXT = 686,              /* HITATTREXT  */
    CALLDATAEXT = 687,             /* CALLDATAEXT  */
    CALLDATAINEXT = 688,           /* CALLDATAINEXT  */
    PATCH = 689,                   /* PATCH  */
    SAMPLE = 690,                  /* SAMPLE  */
    NONUNIFORM = 691,              /* NONUNIFORM  */
    COHERENT = 692,                /* COHERENT  */
    VOLATILE = 693,                /* VOLATILE  */
    RESTRICT = 694,                /* RESTRICT  */
    READONLY = 695,                /* READONLY  */
    WRITEONLY = 696,               /* WRITEONLY  */
    DEVICECOHERENT = 697,          /* DEVICECOHERENT  */
    QUEUEFAMILYCOHERENT = 698,     /* QUEUEFAMILYCOHERENT  */
    WORKGROUPCOHERENT = 699,       /* WORKGROUPCOHERENT  */
    SUBGROUPCOHERENT = 700,        /* SUBGROUPCOHERENT  */
    NONPRIVATE = 701,              /* NONPRIVATE  */
    SHADERCALLCOHERENT = 702,      /* SHADERCALLCOHERENT  */
    NOPERSPECTIVE = 703,           /* NOPERSPECTIVE  */
    EXPLICITINTERPAMD = 704,       /* EXPLICITINTERPAMD  */
    PERVERTEXNV = 705,             /* PERVERTEXNV  */
    PERPRIMITIVENV = 706,          /* PERPRIMITIVENV  */
    PERVIEWNV = 707,               /* PERVIEWNV  */
    PERTASKNV = 708,               /* PERTASKNV  */
    PRECISE = 709                  /* PRECISE  */
  };
  typedef enum yytokentype yytoken_kind_t;
#endif

/* Value type.  */
#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
union YYSTYPE
{
#line 97 ""MachineIndependent/glslang.y""

    struct {
        glslang::TSourceLoc loc;
        union {
            glslang::TString *string;
            int i;
            unsigned int u;
            long long i64;
            unsigned long long u64;
            bool b;
            double d;
        };
        glslang::TSymbol* symbol;
    } lex;
    struct {
        glslang::TSourceLoc loc;
        glslang::TOperator op;
        union {
            TIntermNode* intermNode;
            glslang::TIntermNodePair nodePair;
            glslang::TIntermTyped* intermTypedNode;
            glslang::TAttributes* attributes;
            glslang::TSpirvRequirement* spirvReq;
            glslang::TSpirvInstruction* spirvInst;
            glslang::TSpirvTypeParameters* spirvTypeParams;
        };
        union {
            glslang::TPublicType type;
            glslang::TFunction* function;
            glslang::TParameter param;
            glslang::TTypeLoc typeLine;
            glslang::TTypeList* typeList;
            glslang::TArraySizes* arraySizes;
            glslang::TIdentifierList* identifierList;
        };
        glslang::TArraySizes* typeParameters;
    } interm;

#line 557 ""MachineIndependent/glslang_tab.cpp.h""

};
typedef union YYSTYPE YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define YYSTYPE_IS_DECLARED 1
#endif



int yyparse (glslang::TParseContext* pParseContext);

#endif /* !YY_YY_MACHINEINDEPENDENT_GLSLANG_TAB_CPP_H_INCLUDED  */
",c++
"#include ""parent.h""

float4 i3;
",c++
"// Copyright 2015 The Shaderc Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the ""License"");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an ""AS IS"" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef LIBSHADERC_UTIL_UNIVERSAL_UNISTD_H_
#define LIBSHADERC_UTIL_UNIVERSAL_UNISTD_H_

#ifndef _MSC_VER
#include <unistd.h>
#else
// Minimal set of <unistd> needed to compile on windows.

#include <io.h>
#define access _access

// https://msdn.microsoft.com/en-us/library/1w06ktdy.aspx
// Defines these constants.
#define R_OK 4
#define W_OK 2
#endif //_MSC_VER

#endif // LIBSHADERC_UTIL_UNIVERSAL_UNISTD_H_
",c++
"#include <stdio.h>
#include <stdlib.h>
#include ""ml.h""

int  iunique(int y[], int n, int **values)
     /*
       extract unique values from a vector y of n integers.
       
       Return value: the number of unique values on success, 0 otherwise.
     */
{
  int nvalues=1;
  int i,j;
  int addclass;
  int *indx;

  if(!(*values=ivector(1))){
    fprintf(stderr,""iunique: out of memory\n"");
    return 0;
  }
    
  (*values)[0]=y[0];
  for(i=1;i<n;i++){
    addclass=1;
    for(j=0;j<nvalues;j++)
      if((*values)[j]==y[i])
        addclass=0;
    if(addclass){
      if(!(*values=(int*)realloc(*values,(nvalues+1)*sizeof(int)))){
	fprintf(stderr,""iunique: out of memory\n"");
	return 0;
      }
      (*values)[nvalues++]=y[i];
    }
  }

  if(!(indx=ivector(nvalues))){
    fprintf(stderr,""iunique: out of memory\n"");
    return 0;
  }

  isort(*values,indx,nvalues,SORT_ASCENDING);

  if(free_ivector(indx)!=0){
    fprintf(stderr,""iunique: free_ivector error\n"");
    return 0;
  }

  return nvalues;
}


int  dunique(double y[], int n, double **values)
     /*
       extract unique values from a vector y of n doubles.
       
       Return value: the number of unique values on success, 0 otherwise.
     */
{
  int nvalues=1;
  int i,j;
  int addclass;
  int *indx;

  if(!(*values=dvector(1))){
    fprintf(stderr,""dunique: out of memory\n"");
    return 0;
  }
    
  (*values)[0]=y[0];
  for(i=1;i<n;i++){
    addclass=1;
    for(j=0;j<nvalues;j++)
      if((*values)[j]==y[i])
        addclass=0;
    if(addclass){
      if(!(*values=(double*)realloc(*values,(nvalues+1)*sizeof(double)))){
	fprintf(stderr,""dunique: out of memory\n"");
	return 0;
      }
      (*values)[nvalues++]=y[i];
    }
  }

  if(!(indx=ivector(nvalues))){
    fprintf(stderr,""iunique: out of memory\n"");
    return 0;
  }

  dsort(*values,indx,nvalues,SORT_ASCENDING);

  if(free_ivector(indx)!=0){
    fprintf(stderr,""iunique: free_ivector error\n"");
    return 0;
  }

  return nvalues;
}
",c++
"/**
    This code is based on the glslang_c_interface implementation by Viktor Latypov
**/

/**
BSD 2-Clause License

Copyright (c) 2019, Viktor Latypov
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS""
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**/

#ifndef GLSLANG_C_IFACE_H_INCLUDED
#define GLSLANG_C_IFACE_H_INCLUDED

#include <stdbool.h>
#include <stdlib.h>

#include ""glslang_c_shader_types.h""

typedef struct glslang_shader_s glslang_shader_t;
typedef struct glslang_program_s glslang_program_t;

/* TLimits counterpart */
typedef struct glslang_limits_s {
    bool non_inductive_for_loops;
    bool while_loops;
    bool do_while_loops;
    bool general_uniform_indexing;
    bool general_attribute_matrix_vector_indexing;
    bool general_varying_indexing;
    bool general_sampler_indexing;
    bool general_variable_indexing;
    bool general_constant_matrix_vector_indexing;
} glslang_limits_t;

/* TBuiltInResource counterpart */
typedef struct glslang_resource_s {
    int max_lights;
    int max_clip_planes;
    int max_texture_units;
    int max_texture_coords;
    int max_vertex_attribs;
    int max_vertex_uniform_components;
    int max_varying_floats;
    int max_vertex_texture_image_units;
    int max_combined_texture_image_units;
    int max_texture_image_units;
    int max_fragment_uniform_components;
    int max_draw_buffers;
    int max_vertex_uniform_vectors;
    int max_varying_vectors;
    int max_fragment_uniform_vectors;
    int max_vertex_output_vectors;
    int max_fragment_input_vectors;
    int min_program_texel_offset;
    int max_program_texel_offset;
    int max_clip_distances;
    int max_compute_work_group_count_x;
    int max_compute_work_group_count_y;
    int max_compute_work_group_count_z;
    int max_compute_work_group_size_x;
    int max_compute_work_group_size_y;
    int max_compute_work_group_size_z;
    int max_compute_uniform_components;
    int max_compute_texture_image_units;
    int max_compute_image_uniforms;
    int max_compute_atomic_counters;
    int max_compute_atomic_counter_buffers;
    int max_varying_components;
    int max_vertex_output_components;
    int max_geometry_input_components;
    int max_geometry_output_components;
    int max_fragment_input_components;
    int max_image_units;
    int max_combined_image_units_and_fragment_outputs;
    int max_combined_shader_output_resources;
    int max_image_samples;
    int max_vertex_image_uniforms;
    int max_tess_control_image_uniforms;
    int max_tess_evaluation_image_uniforms;
    int max_geometry_image_uniforms;
    int max_fragment_image_uniforms;
    int max_combined_image_uniforms;
    int max_geometry_texture_image_units;
    int max_geometry_output_vertices;
    int max_geometry_total_output_components;
    int max_geometry_uniform_components;
    int max_geometry_varying_components;
    int max_tess_control_input_components;
    int max_tess_control_output_components;
    int max_tess_control_texture_image_units;
    int max_tess_control_uniform_components;
    int max_tess_control_total_output_components;
    int max_tess_evaluation_input_components;
    int max_tess_evaluation_output_components;
    int max_tess_evaluation_texture_image_units;
    int max_tess_evaluation_uniform_components;
    int max_tess_patch_components;
    int max_patch_vertices;
    int max_tess_gen_level;
    int max_viewports;
    int max_vertex_atomic_counters;
    int max_tess_control_atomic_counters;
    int max_tess_evaluation_atomic_counters;
    int max_geometry_atomic_counters;
    int max_fragment_atomic_counters;
    int max_combined_atomic_counters;
    int max_atomic_counter_bindings;
    int max_vertex_atomic_counter_buffers;
    int max_tess_control_atomic_counter_buffers;
    int max_tess_evaluation_atomic_counter_buffers;
    int max_geometry_atomic_counter_buffers;
    int max_fragment_atomic_counter_buffers;
    int max_combined_atomic_counter_buffers;
    int max_atomic_counter_buffer_size;
    int max_transform_feedback_buffers;
    int max_transform_feedback_interleaved_components;
    int max_cull_distances;
    int max_combined_clip_and_cull_distances;
    int max_samples;
    int max_mesh_output_vertices_nv;
    int max_mesh_output_primitives_nv;
    int max_mesh_work_group_size_x_nv;
    int max_mesh_work_group_size_y_nv;
    int max_mesh_work_group_size_z_nv;
    int max_task_work_group_size_x_nv;
    int max_task_work_group_size_y_nv;
    int max_task_work_group_size_z_nv;
    int max_mesh_view_count_nv;
    int maxDualSourceDrawBuffersEXT;

    glslang_limits_t limits;
} glslang_resource_t;

typedef struct glslang_input_s {
    glslang_source_t language;
    glslang_stage_t stage;
    glslang_client_t client;
    glslang_target_client_version_t client_version;
    glslang_target_language_t target_language;
    glslang_target_language_version_t target_language_version;
    /** Shader source code */
    const char* code;
    int default_version;
    glslang_profile_t default_profile;
    int force_default_version_and_profile;
    int forward_compatible;
    glslang_messages_t messages;
    const glslang_resource_t* resource;
} glslang_input_t;

/* Inclusion result structure allocated by C include_local/include_system callbacks */
typedef struct glsl_include_result_s {
    /* Header file name or NULL if inclusion failed */
    const char* header_name;

    /* Header contents or NULL */
    const char* header_data;
    size_t header_length;

} glsl_include_result_t;

/* Callback for local file inclusion */
typedef glsl_include_result_t* (*glsl_include_local_func)(void* ctx, const char* header_name, const char* includer_name,
                                                          size_t include_depth);

/* Callback for system file inclusion */
typedef glsl_include_result_t* (*glsl_include_system_func)(void* ctx, const char* header_name,
                                                           const char* includer_name, size_t include_depth);

/* Callback for include result destruction */
typedef int (*glsl_free_include_result_func)(void* ctx, glsl_include_result_t* result);

/* Collection of callbacks for GLSL preprocessor */
typedef struct glsl_include_callbacks_s {
    glsl_include_system_func include_system;
    glsl_include_local_func include_local;
    glsl_free_include_result_func free_include_result;
} glsl_include_callbacks_t;

#ifdef __cplusplus
extern ""C"" {
#endif

#ifdef GLSLANG_IS_SHARED_LIBRARY
    #ifdef _WIN32
        #ifdef GLSLANG_EXPORTING
            #define GLSLANG_EXPORT __declspec(dllexport)
        #else
            #define GLSLANG_EXPORT __declspec(dllimport)
        #endif
    #elif __GNUC__ >= 4
        #define GLSLANG_EXPORT __attribute__((visibility(""default"")))
    #endif
#endif // GLSLANG_IS_SHARED_LIBRARY

#ifndef GLSLANG_EXPORT
#define GLSLANG_EXPORT
#endif

GLSLANG_EXPORT int glslang_initialize_process();
GLSLANG_EXPORT void glslang_finalize_process();

GLSLANG_EXPORT glslang_shader_t* glslang_shader_create(const glslang_input_t* input);
GLSLANG_EXPORT void glslang_shader_delete(glslang_shader_t* shader);
GLSLANG_EXPORT void glslang_shader_shift_binding(glslang_shader_t* shader, glslang_resource_type_t res, unsigned int base);
GLSLANG_EXPORT void glslang_shader_shift_binding_for_set(glslang_shader_t* shader, glslang_resource_type_t res, unsigned int base, unsigned int set);
GLSLANG_EXPORT void glslang_shader_set_options(glslang_shader_t* shader, int options); // glslang_shader_options_t
GLSLANG_EXPORT void glslang_shader_set_glsl_version(glslang_shader_t* shader, int version);
GLSLANG_EXPORT int glslang_shader_preprocess(glslang_shader_t* shader, const glslang_input_t* input);
GLSLANG_EXPORT int glslang_shader_parse(glslang_shader_t* shader, const glslang_input_t* input);
GLSLANG_EXPORT const char* glslang_shader_get_preprocessed_code(glslang_shader_t* shader);
GLSLANG_EXPORT const char* glslang_shader_get_info_log(glslang_shader_t* shader);
GLSLANG_EXPORT const char* glslang_shader_get_info_debug_log(glslang_shader_t* shader);

GLSLANG_EXPORT glslang_program_t* glslang_program_create();
GLSLANG_EXPORT void glslang_program_delete(glslang_program_t* program);
GLSLANG_EXPORT void glslang_program_add_shader(glslang_program_t* program, glslang_shader_t* shader);
GLSLANG_EXPORT int glslang_program_link(glslang_program_t* program, int messages); // glslang_messages_t
GLSLANG_EXPORT int glslang_program_map_io(glslang_program_t* program);
GLSLANG_EXPORT void glslang_program_SPIRV_generate(glslang_program_t* program, glslang_stage_t stage);
GLSLANG_EXPORT size_t glslang_program_SPIRV_get_size(glslang_program_t* program);
GLSLANG_EXPORT void glslang_program_SPIRV_get(glslang_program_t* program, unsigned int*);
GLSLANG_EXPORT unsigned int* glslang_program_SPIRV_get_ptr(glslang_program_t* program);
GLSLANG_EXPORT const char* glslang_program_SPIRV_get_messages(glslang_program_t* program);
GLSLANG_EXPORT const char* glslang_program_get_info_log(glslang_program_t* program);
GLSLANG_EXPORT const char* glslang_program_get_info_debug_log(glslang_program_t* program);

#ifdef __cplusplus
}
#endif

#endif /* #ifdef GLSLANG_C_IFACE_INCLUDED */
",c++
"// Max External: startup.c
// T.Place - 9/4/2001, 1/8/2002
// A simple Max object to put all tap.tools' objects into the new object list & post some info

#include ""ext.h""				// Required for all Max external objects

void *this_class;			// Required. Global pointing to this class 

typedef struct startup		// Data structure for this object 
{
	Object	p_ob;		// Must always be the first field; used by Max 
} Startup;

		
// Prototypes for methods: need a method for each incoming message
void	*startup_new(long value);			// object creation method  
void	startup_free(Startup *startup);	// free method

/*********************************************************/
//Main() Function

void main(void)			//main receives a copy of the Max function macros table 
{	
	// set up our class: create a class definition 
	setup((t_messlist **)&this_class, (method)startup_new, (method)startup_free, (short)sizeof(Startup), 0L, A_DEFLONG, 0);

	addmess((method)inspector_open, ""info"", A_CANT, 0);		// bind method for opening the license window

	finder_addclass(""SuperCollider Lib"", ""sc.CombN"");
	finder_addclass(""SuperCollider Lib"", ""sc.LFPulse"");
	finder_addclass(""SuperCollider Lib"", ""sc.LFSaw"");
	finder_addclass(""SuperCollider Lib"", ""sc.midicps"");
	finder_addclass(""SuperCollider Lib"", ""sc.SinOsc"");
	finder_addclass(""SuperCollider Lib"", ""sc.WhiteNoise"");
	finder_addclass(""SuperCollider Lib"", ""sc.Xline"");
	
//	finder_addclass(""Tap.Tools"", ""tap.metro"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.prime"");
	finder_addclass(""Tap.Tools"", ""tap.random"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.sieve"");					// add object to new-object list

	finder_addclass(""Tap.Tools"", ""tap.1pole-lp~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.allpole~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.anticlick~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.auto_thru~"");			// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.avg~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.bink~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.crossfade~"");			// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.decibels~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.diff~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.elixir~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.fft-list~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.fft-normalize~"");			// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.lp-comb~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.lpc~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.noise~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.pan~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.polar~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.quantize~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.radians~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.rms~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.scale~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.sift~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.split~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.typecheck~"");			// add object to new-object list

	finder_addclass(""Tap.Tools"", ""tap.5comb~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.adapt~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.decay_calc"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.deviate~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.fft~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.filterbank~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.gate~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.ifft~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.Lchange"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.limiter~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.loadbang"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.normalizer~"");			// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.nr~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.shift~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.sustain~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.thru~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.verb~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.vocoder~"");				// add object to new-object list	
	finder_addclass(""Tap.Tools"", ""tap.vocoderlite~"");			// add object to new-object list	
	
	post(""Tap.Tools MSP"");						// Print to the Max Window...
	post(""    Objects for Max/MSP by Tim Place"");
	post(""    Version 0.95"");
	post(""    Copyright � 1999-2002 by Silicon Prairie Intermedia"");
	post(""    http://www.sp-intermedia.com"");
	post(""    Use \""Get Info\"" on any object to view its license"");
}


/*********************************************************/
//Object Creation Function

void *startup_new(long value)
{
	Startup *startup;
	startup = (Startup *)newobject(this_class);	// create the new instance and return a pointer to it 
	return(startup);						// must return a pointer to the new instance 
}


/*********************************************************/
//Bound to input Functions

// free method
void startup_free(Startup *startup)
{
	notify_free((t_object *)startup);
}",c++
"float4 p2;
",c++
"float4 p1;

#include ""local.h""
#include ""remote.h""
",c++
"#ifndef _PCH_H
#define _PCH_H
//
// Copyright (C) 2018 The Khronos Group Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
//    Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//
//    Redistributions in binary form must reproduce the above
//    copyright notice, this list of conditions and the following
//    disclaimer in the documentation and/or other materials provided
//    with the distribution.
//
//    Neither the name of 3Dlabs Inc. Ltd. nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
// COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
// ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//

#include ""TestFixture.h""

#endif /* _PCH_H */
",c++
"// Copyright 2015 The Shaderc Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the ""License"");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an ""AS IS"" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef SHADERC_SHADERC_H_
#define SHADERC_SHADERC_H_

#ifdef __cplusplus
extern ""C"" {
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

#include ""shaderc/env.h""
#include ""shaderc/status.h""
#include ""shaderc/visibility.h""

// Source language kind.
typedef enum {
  shaderc_source_language_glsl,
  shaderc_source_language_hlsl,
} shaderc_source_language;

typedef enum {
  // Forced shader kinds. These shader kinds force the compiler to compile the
  // source code as the specified kind of shader.
  shaderc_vertex_shader,
  shaderc_fragment_shader,
  shaderc_compute_shader,
  shaderc_geometry_shader,
  shaderc_tess_control_shader,
  shaderc_tess_evaluation_shader,

  shaderc_glsl_vertex_shader = shaderc_vertex_shader,
  shaderc_glsl_fragment_shader = shaderc_fragment_shader,
  shaderc_glsl_compute_shader = shaderc_compute_shader,
  shaderc_glsl_geometry_shader = shaderc_geometry_shader,
  shaderc_glsl_tess_control_shader = shaderc_tess_control_shader,
  shaderc_glsl_tess_evaluation_shader = shaderc_tess_evaluation_shader,

  // Deduce the shader kind from #pragma annotation in the source code. Compiler
  // will emit error if #pragma annotation is not found.
  shaderc_glsl_infer_from_source,
  // Default shader kinds. Compiler will fall back to compile the source code as
  // the specified kind of shader when #pragma annotation is not found in the
  // source code.
  shaderc_glsl_default_vertex_shader,
  shaderc_glsl_default_fragment_shader,
  shaderc_glsl_default_compute_shader,
  shaderc_glsl_default_geometry_shader,
  shaderc_glsl_default_tess_control_shader,
  shaderc_glsl_default_tess_evaluation_shader,
  shaderc_spirv_assembly,
  shaderc_raygen_shader,
  shaderc_anyhit_shader,
  shaderc_closesthit_shader,
  shaderc_miss_shader,
  shaderc_intersection_shader,
  shaderc_callable_shader,
  shaderc_glsl_raygen_shader = shaderc_raygen_shader,
  shaderc_glsl_anyhit_shader = shaderc_anyhit_shader,
  shaderc_glsl_closesthit_shader = shaderc_closesthit_shader,
  shaderc_glsl_miss_shader = shaderc_miss_shader,
  shaderc_glsl_intersection_shader = shaderc_intersection_shader,
  shaderc_glsl_callable_shader = shaderc_callable_shader,
  shaderc_glsl_default_raygen_shader,
  shaderc_glsl_default_anyhit_shader,
  shaderc_glsl_default_closesthit_shader,
  shaderc_glsl_default_miss_shader,
  shaderc_glsl_default_intersection_shader,
  shaderc_glsl_default_callable_shader,
  shaderc_task_shader,
  shaderc_mesh_shader,
  shaderc_glsl_task_shader = shaderc_task_shader,
  shaderc_glsl_mesh_shader = shaderc_mesh_shader,
  shaderc_glsl_default_task_shader,
  shaderc_glsl_default_mesh_shader,
} shaderc_shader_kind;

typedef enum {
  shaderc_profile_none,  // Used if and only if GLSL version did not specify
                         // profiles.
  shaderc_profile_core,
  shaderc_profile_compatibility,  // Disabled. This generates an error
  shaderc_profile_es,
} shaderc_profile;

// Optimization level.
typedef enum {
  shaderc_optimization_level_zero,  // no optimization
  shaderc_optimization_level_size,  // optimize towards reducing code size
  shaderc_optimization_level_performance,  // optimize towards performance
} shaderc_optimization_level;

// Resource limits.
typedef enum {
  shaderc_limit_max_lights,
  shaderc_limit_max_clip_planes,
  shaderc_limit_max_texture_units,
  shaderc_limit_max_texture_coords,
  shaderc_limit_max_vertex_attribs,
  shaderc_limit_max_vertex_uniform_components,
  shaderc_limit_max_varying_floats,
  shaderc_limit_max_vertex_texture_image_units,
  shaderc_limit_max_combined_texture_image_units,
  shaderc_limit_max_texture_image_units,
  shaderc_limit_max_fragment_uniform_components,
  shaderc_limit_max_draw_buffers,
  shaderc_limit_max_vertex_uniform_vectors,
  shaderc_limit_max_varying_vectors,
  shaderc_limit_max_fragment_uniform_vectors,
  shaderc_limit_max_vertex_output_vectors,
  shaderc_limit_max_fragment_input_vectors,
  shaderc_limit_min_program_texel_offset,
  shaderc_limit_max_program_texel_offset,
  shaderc_limit_max_clip_distances,
  shaderc_limit_max_compute_work_group_count_x,
  shaderc_limit_max_compute_work_group_count_y,
  shaderc_limit_max_compute_work_group_count_z,
  shaderc_limit_max_compute_work_group_size_x,
  shaderc_limit_max_compute_work_group_size_y,
  shaderc_limit_max_compute_work_group_size_z,
  shaderc_limit_max_compute_uniform_components,
  shaderc_limit_max_compute_texture_image_units,
  shaderc_limit_max_compute_image_uniforms,
  shaderc_limit_max_compute_atomic_counters,
  shaderc_limit_max_compute_atomic_counter_buffers,
  shaderc_limit_max_varying_components,
  shaderc_limit_max_vertex_output_components,
  shaderc_limit_max_geometry_input_components,
  shaderc_limit_max_geometry_output_components,
  shaderc_limit_max_fragment_input_components,
  shaderc_limit_max_image_units,
  shaderc_limit_max_combined_image_units_and_fragment_outputs,
  shaderc_limit_max_combined_shader_output_resources,
  shaderc_limit_max_image_samples,
  shaderc_limit_max_vertex_image_uniforms,
  shaderc_limit_max_tess_control_image_uniforms,
  shaderc_limit_max_tess_evaluation_image_uniforms,
  shaderc_limit_max_geometry_image_uniforms,
  shaderc_limit_max_fragment_image_uniforms,
  shaderc_limit_max_combined_image_uniforms,
  shaderc_limit_max_geometry_texture_image_units,
  shaderc_limit_max_geometry_output_vertices,
  shaderc_limit_max_geometry_total_output_components,
  shaderc_limit_max_geometry_uniform_components,
  shaderc_limit_max_geometry_varying_components,
  shaderc_limit_max_tess_control_input_components,
  shaderc_limit_max_tess_control_output_components,
  shaderc_limit_max_tess_control_texture_image_units,
  shaderc_limit_max_tess_control_uniform_components,
  shaderc_limit_max_tess_control_total_output_components,
  shaderc_limit_max_tess_evaluation_input_components,
  shaderc_limit_max_tess_evaluation_output_components,
  shaderc_limit_max_tess_evaluation_texture_image_units,
  shaderc_limit_max_tess_evaluation_uniform_components,
  shaderc_limit_max_tess_patch_components,
  shaderc_limit_max_patch_vertices,
  shaderc_limit_max_tess_gen_level,
  shaderc_limit_max_viewports,
  shaderc_limit_max_vertex_atomic_counters,
  shaderc_limit_max_tess_control_atomic_counters,
  shaderc_limit_max_tess_evaluation_atomic_counters,
  shaderc_limit_max_geometry_atomic_counters,
  shaderc_limit_max_fragment_atomic_counters,
  shaderc_limit_max_combined_atomic_counters,
  shaderc_limit_max_atomic_counter_bindings,
  shaderc_limit_max_vertex_atomic_counter_buffers,
  shaderc_limit_max_tess_control_atomic_counter_buffers,
  shaderc_limit_max_tess_evaluation_atomic_counter_buffers,
  shaderc_limit_max_geometry_atomic_counter_buffers,
  shaderc_limit_max_fragment_atomic_counter_buffers,
  shaderc_limit_max_combined_atomic_counter_buffers,
  shaderc_limit_max_atomic_counter_buffer_size,
  shaderc_limit_max_transform_feedback_buffers,
  shaderc_limit_max_transform_feedback_interleaved_components,
  shaderc_limit_max_cull_distances,
  shaderc_limit_max_combined_clip_and_cull_distances,
  shaderc_limit_max_samples,
} shaderc_limit;

// Uniform resource kinds.
// In Vulkan, uniform resources are bound to the pipeline via descriptors
// with numbered bindings and sets.
typedef enum {
  // Image and image buffer.
  shaderc_uniform_kind_image,
  // Pure sampler.
  shaderc_uniform_kind_sampler,
  // Sampled texture in GLSL, and Shader Resource View in HLSL.
  shaderc_uniform_kind_texture,
  // Uniform Buffer Object (UBO) in GLSL.  Cbuffer in HLSL.
  shaderc_uniform_kind_buffer,
  // Shader Storage Buffer Object (SSBO) in GLSL.
  shaderc_uniform_kind_storage_buffer,
  // Unordered Access View, in HLSL.  (Writable storage image or storage
  // buffer.)
  shaderc_uniform_kind_unordered_access_view,
} shaderc_uniform_kind;

// Usage examples:
//
// Aggressively release compiler resources, but spend time in initialization
// for each new use.
//      shaderc_compiler_t compiler = shaderc_compiler_initialize();
//      shaderc_compilation_result_t result = shaderc_compile_into_spv(
//          compiler, ""#version 450\nvoid main() {}"", 27,
//          shaderc_glsl_vertex_shader, ""main.vert"", ""main"", nullptr);
//      // Do stuff with compilation results.
//      shaderc_result_release(result);
//      shaderc_compiler_release(compiler);
//
// Keep the compiler object around for a long time, but pay for extra space
// occupied.
//      shaderc_compiler_t compiler = shaderc_compiler_initialize();
//      // On the same, other or multiple simultaneous threads.
//      shaderc_compilation_result_t result = shaderc_compile_into_spv(
//          compiler, ""#version 450\nvoid main() {}"", 27,
//          shaderc_glsl_vertex_shader, ""main.vert"", ""main"", nullptr);
//      // Do stuff with compilation results.
//      shaderc_result_release(result);
//      // Once no more compilations are to happen.
//      shaderc_compiler_release(compiler);

// An opaque handle to an object that manages all compiler state.
typedef struct shaderc_compiler* shaderc_compiler_t;

// Returns a shaderc_compiler_t that can be used to compile modules.
// A return of NULL indicates that there was an error initializing the compiler.
// Any function operating on shaderc_compiler_t must offer the basic
// thread-safety guarantee.
// [http://herbsutter.com/2014/01/13/gotw-95-solution-thread-safety-and-synchronization/]
// That is: concurrent invocation of these functions on DIFFERENT objects needs
// no synchronization; concurrent invocation of these functions on the SAME
// object requires synchronization IF AND ONLY IF some of them take a non-const
// argument.
SHADERC_EXPORT shaderc_compiler_t shaderc_compiler_initialize(void);

// Releases the resources held by the shaderc_compiler_t.
// After this call it is invalid to make any future calls to functions
// involving this shaderc_compiler_t.
SHADERC_EXPORT void shaderc_compiler_release(shaderc_compiler_t);

// An opaque handle to an object that manages options to a single compilation
// result.
typedef struct shaderc_compile_options* shaderc_compile_options_t;

// Returns a default-initialized shaderc_compile_options_t that can be used
// to modify the functionality of a compiled module.
// A return of NULL indicates that there was an error initializing the options.
// Any function operating on shaderc_compile_options_t must offer the
// basic thread-safety guarantee.
SHADERC_EXPORT shaderc_compile_options_t
    shaderc_compile_options_initialize(void);

// Returns a copy of the given shaderc_compile_options_t.
// If NULL is passed as the parameter the call is the same as
// shaderc_compile_options_init.
SHADERC_EXPORT shaderc_compile_options_t shaderc_compile_options_clone(
    const shaderc_compile_options_t options);

// Releases the compilation options. It is invalid to use the given
// shaderc_compile_options_t object in any future calls. It is safe to pass
// NULL to this function, and doing such will have no effect.
SHADERC_EXPORT void shaderc_compile_options_release(
    shaderc_compile_options_t options);

// Adds a predefined macro to the compilation options. This has the same
// effect as passing -Dname=value to the command-line compiler.  If value
// is NULL, it has the same effect as passing -Dname to the command-line
// compiler. If a macro definition with the same name has previously been
// added, the value is replaced with the new value. The macro name and
// value are passed in with char pointers, which point to their data, and
// the lengths of their data. The strings that the name and value pointers
// point to must remain valid for the duration of the call, but can be
// modified or deleted after this function has returned. In case of adding
// a valueless macro, the value argument should be a null pointer or the
// value_length should be 0u.
SHADERC_EXPORT void shaderc_compile_options_add_macro_definition(
    shaderc_compile_options_t options, const char* name, size_t name_length,
    const char* value, size_t value_length);

// Sets the source language.  The default is GLSL.
SHADERC_EXPORT void shaderc_compile_options_set_source_language(
    shaderc_compile_options_t options, shaderc_source_language lang);

// Sets the compiler mode to generate debug information in the output.
SHADERC_EXPORT void shaderc_compile_options_set_generate_debug_info(
    shaderc_compile_options_t options);

// Sets the compiler optimization level to the given level. Only the last one
// takes effect if multiple calls of this function exist.
SHADERC_EXPORT void shaderc_compile_options_set_optimization_level(
    shaderc_compile_options_t options, shaderc_optimization_level level);

// Forces the GLSL language version and profile to a given pair. The version
// number is the same as would appear in the #version annotation in the source.
// Version and profile specified here overrides the #version annotation in the
// source. Use profile: 'shaderc_profile_none' for GLSL versions that do not
// define profiles, e.g. versions below 150.
SHADERC_EXPORT void shaderc_compile_options_set_forced_version_profile(
    shaderc_compile_options_t options, int version, shaderc_profile profile);

// Source text inclusion via #include is supported with a pair of callbacks
// to an ""includer"" on the client side.  The first callback processes an
// inclusion request, and returns an include result.  The includer owns
// the contents of the result, and those contents must remain valid until the
// second callback is invoked to release the result.  Both callbacks take a
// user_data argument to specify the client context.
// To return an error, set the source_name to an empty string and put your
// error message in content.

// An include result.
typedef struct shaderc_include_result {
  // The name of the source file.  The name should be fully resolved
  // in the sense that it should be a unique name in the context of the
  // includer.  For example, if the includer maps source names to files in
  // a filesystem, then this name should be the absolute path of the file.
  // For a failed inclusion, this string is empty.
  const char* source_name;
  size_t source_name_length;
  // The text contents of the source file in the normal case.
  // For a failed inclusion, this contains the error message.
  const char* content;
  size_t content_length;
  // User data to be passed along with this request.
  void* user_data;
} shaderc_include_result;

// The kinds of include requests.
enum shaderc_include_type {
  shaderc_include_type_relative,  // E.g. #include ""source""
  shaderc_include_type_standard   // E.g. #include <source>
};

// An includer callback type for mapping an #include request to an include
// result.  The user_data parameter specifies the client context.  The
// requested_source parameter specifies the name of the source being requested.
// The type parameter specifies the kind of inclusion request being made.
// The requesting_source parameter specifies the name of the source containing
// the #include request.  The includer owns the result object and its contents,
// and both must remain valid until the release callback is called on the result
// object.
typedef shaderc_include_result* (*shaderc_include_resolve_fn)(
    void* user_data, const char* requested_source, int type,
    const char* requesting_source, size_t include_depth);

// An includer callback type for destroying an include result.
typedef void (*shaderc_include_result_release_fn)(
    void* user_data, shaderc_include_result* include_result);

// Sets includer callback functions.
SHADERC_EXPORT void shaderc_compile_options_set_include_callbacks(
    shaderc_compile_options_t options, shaderc_include_resolve_fn resolver,
    shaderc_include_result_release_fn result_releaser, void* user_data);

// Sets the compiler mode to suppress warnings, overriding warnings-as-errors
// mode. When both suppress-warnings and warnings-as-errors modes are
// turned on, warning messages will be inhibited, and will not be emitted
// as error messages.
SHADERC_EXPORT void shaderc_compile_options_set_suppress_warnings(
    shaderc_compile_options_t options);

// Sets the target shader environment, affecting which warnings or errors will
// be issued.  The version will be for distinguishing between different versions
// of the target environment.  The version value should be either 0 or
// a value listed in shaderc_env_version.  The 0 value maps to Vulkan 1.0 if
// |target| is Vulkan, and it maps to OpenGL 4.5 if |target| is OpenGL.
SHADERC_EXPORT void shaderc_compile_options_set_target_env(
    shaderc_compile_options_t options,
    shaderc_target_env target,
    uint32_t version);

// Sets the target SPIR-V version. The generated module will use this version
// of SPIR-V.  Each target environment determines what versions of SPIR-V
// it can consume.  Defaults to the highest version of SPIR-V 1.0 which is
// required to be supported by the target environment.  E.g. Default to SPIR-V
// 1.0 for Vulkan 1.0 and SPIR-V 1.3 for Vulkan 1.1.
SHADERC_EXPORT void shaderc_compile_options_set_target_spirv(
    shaderc_compile_options_t options, shaderc_spirv_version version);

// Sets the compiler mode to treat all warnings as errors. Note the
// suppress-warnings mode overrides this option, i.e. if both
// warning-as-errors and suppress-warnings modes are set, warnings will not
// be emitted as error messages.
SHADERC_EXPORT void shaderc_compile_options_set_warnings_as_errors(
    shaderc_compile_options_t options);

// Sets a resource limit.
SHADERC_EXPORT void shaderc_compile_options_set_limit(
    shaderc_compile_options_t options, shaderc_limit limit, int value);

// Sets whether the compiler should automatically assign bindings to uniforms
// that aren't already explicitly bound in the shader source.
SHADERC_EXPORT void shaderc_compile_options_set_auto_bind_uniforms(
    shaderc_compile_options_t options, bool auto_bind);

// Sets whether the compiler should automatically remove sampler variables
// and convert image variables to combined image-sampler variables.
SHADERC_EXPORT void shaderc_compile_options_set_auto_combined_image_sampler(
    shaderc_compile_options_t options, bool upgrade);

// Sets whether the compiler should use HLSL IO mapping rules for bindings.
// Defaults to false.
SHADERC_EXPORT void shaderc_compile_options_set_hlsl_io_mapping(
    shaderc_compile_options_t options, bool hlsl_iomap);

// Sets whether the compiler should determine block member offsets using HLSL
// packing rules instead of standard GLSL rules.  Defaults to false.  Only
// affects GLSL compilation.  HLSL rules are always used when compiling HLSL.
SHADERC_EXPORT void shaderc_compile_options_set_hlsl_offsets(
    shaderc_compile_options_t options, bool hlsl_offsets);

// Sets the base binding number used for for a uniform resource type when
// automatically assigning bindings.  For GLSL compilation, sets the lowest
// automatically assigned number.  For HLSL compilation, the regsiter number
// assigned to the resource is added to this specified base.
SHADERC_EXPORT void shaderc_compile_options_set_binding_base(
    shaderc_compile_options_t options,
    shaderc_uniform_kind kind,
    uint32_t base);

// Like shaderc_compile_options_set_binding_base, but only takes effect when
// compiling a given shader stage.  The stage is assumed to be one of vertex,
// fragment, tessellation evaluation, tesselation control, geometry, or compute.
SHADERC_EXPORT void shaderc_compile_options_set_binding_base_for_stage(
    shaderc_compile_options_t options, shaderc_shader_kind shader_kind,
    shaderc_uniform_kind kind, uint32_t base);

// Sets whether the compiler should automatically assign locations to
// uniform variables that don't have explicit locations in the shader source.
SHADERC_EXPORT void shaderc_compile_options_set_auto_map_locations(
    shaderc_compile_options_t options, bool auto_map);

// Sets a descriptor set and binding for an HLSL register in the given stage.
// This method keeps a copy of the string data.
SHADERC_EXPORT void shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage(
    shaderc_compile_options_t options, shaderc_shader_kind shader_kind,
    const char* reg, const char* set, const char* binding);

// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage,
// but affects all shader stages.
SHADERC_EXPORT void shaderc_compile_options_set_hlsl_register_set_and_binding(
    shaderc_compile_options_t options, const char* reg, const char* set,
    const char* binding);

// Sets whether the compiler should enable extension
// SPV_GOOGLE_hlsl_functionality1.
SHADERC_EXPORT void shaderc_compile_options_set_hlsl_functionality1(
    shaderc_compile_options_t options, bool enable);

// Sets whether the compiler should invert position.Y output in vertex shader.
SHADERC_EXPORT void shaderc_compile_options_set_invert_y(
    shaderc_compile_options_t options, bool enable);

// Sets whether the compiler generates code for max and min builtins which,
// if given a NaN operand, will return the other operand. Similarly, the clamp
// builtin will favour the non-NaN operands, as if clamp were implemented
// as a composition of max and min.
SHADERC_EXPORT void shaderc_compile_options_set_nan_clamp(
    shaderc_compile_options_t options, bool enable);

// An opaque handle to the results of a call to any shaderc_compile_into_*()
// function.
typedef struct shaderc_compilation_result* shaderc_compilation_result_t;

// Takes a GLSL source string and the associated shader kind, input file
// name, compiles it according to the given additional_options. If the shader
// kind is not set to a specified kind, but shaderc_glslc_infer_from_source,
// the compiler will try to deduce the shader kind from the source
// string and a failure in deducing will generate an error. Currently only
// #pragma annotation is supported. If the shader kind is set to one of the
// default shader kinds, the compiler will fall back to the default shader
// kind in case it failed to deduce the shader kind from source string.
// The input_file_name is a null-termintated string. It is used as a tag to
// identify the source string in cases like emitting error messages. It
// doesn't have to be a 'file name'.
// The source string will be compiled into SPIR-V binary and a
// shaderc_compilation_result will be returned to hold the results.
// The entry_point_name null-terminated string defines the name of the entry
// point to associate with this GLSL source. If the additional_options
// parameter is not null, then the compilation is modified by any options
// present.  May be safely called from multiple threads without explicit
// synchronization. If there was failure in allocating the compiler object,
// null will be returned.
SHADERC_EXPORT shaderc_compilation_result_t shaderc_compile_into_spv(
    const shaderc_compiler_t compiler, const char* source_text,
    size_t source_text_size, shaderc_shader_kind shader_kind,
    const char* input_file_name, const char* entry_point_name,
    const shaderc_compile_options_t additional_options);

// Like shaderc_compile_into_spv, but the result contains SPIR-V assembly text
// instead of a SPIR-V binary module.  The SPIR-V assembly syntax is as defined
// by the SPIRV-Tools open source project.
SHADERC_EXPORT shaderc_compilation_result_t shaderc_compile_into_spv_assembly(
    const shaderc_compiler_t compiler, const char* source_text,
    size_t source_text_size, shaderc_shader_kind shader_kind,
    const char* input_file_name, const char* entry_point_name,
    const shaderc_compile_options_t additional_options);

// Like shaderc_compile_into_spv, but the result contains preprocessed source
// code instead of a SPIR-V binary module
SHADERC_EXPORT shaderc_compilation_result_t shaderc_compile_into_preprocessed_text(
    const shaderc_compiler_t compiler, const char* source_text,
    size_t source_text_size, shaderc_shader_kind shader_kind,
    const char* input_file_name, const char* entry_point_name,
    const shaderc_compile_options_t additional_options);

// Takes an assembly string of the format defined in the SPIRV-Tools project
// (https://github.com/KhronosGroup/SPIRV-Tools/blob/master/syntax.md),
// assembles it into SPIR-V binary and a shaderc_compilation_result will be
// returned to hold the results.
// The assembling will pick options suitable for assembling specified in the
// additional_options parameter.
// May be safely called from multiple threads without explicit synchronization.
// If there was failure in allocating the compiler object, null will be
// returned.
SHADERC_EXPORT shaderc_compilation_result_t shaderc_assemble_into_spv(
    const shaderc_compiler_t compiler, const char* source_assembly,
    size_t source_assembly_size,
    const shaderc_compile_options_t additional_options);

// The following functions, operating on shaderc_compilation_result_t objects,
// offer only the basic thread-safety guarantee.

// Releases the resources held by the result object. It is invalid to use the
// result object for any further operations.
SHADERC_EXPORT void shaderc_result_release(shaderc_compilation_result_t result);

// Returns the number of bytes of the compilation output data in a result
// object.
SHADERC_EXPORT size_t shaderc_result_get_length(const shaderc_compilation_result_t result);

// Returns the number of warnings generated during the compilation.
SHADERC_EXPORT size_t shaderc_result_get_num_warnings(
    const shaderc_compilation_result_t result);

// Returns the number of errors generated during the compilation.
SHADERC_EXPORT size_t shaderc_result_get_num_errors(const shaderc_compilation_result_t result);

// Returns the compilation status, indicating whether the compilation succeeded,
// or failed due to some reasons, like invalid shader stage or compilation
// errors.
SHADERC_EXPORT shaderc_compilation_status shaderc_result_get_compilation_status(
    const shaderc_compilation_result_t);

// Returns a pointer to the start of the compilation output data bytes, either
// SPIR-V binary or char string. When the source string is compiled into SPIR-V
// binary, this is guaranteed to be castable to a uint32_t*. If the result
// contains assembly text or preprocessed source text, the pointer will point to
// the resulting array of characters.
SHADERC_EXPORT const char* shaderc_result_get_bytes(const shaderc_compilation_result_t result);

// Returns a null-terminated string that contains any error messages generated
// during the compilation.
SHADERC_EXPORT const char* shaderc_result_get_error_message(
    const shaderc_compilation_result_t result);

// Provides the version & revision of the SPIR-V which will be produced
SHADERC_EXPORT void shaderc_get_spv_version(unsigned int* version, unsigned int* revision);

// Parses the version and profile from a given null-terminated string
// containing both version and profile, like: '450core'. Returns false if
// the string can not be parsed. Returns true when the parsing succeeds. The
// parsed version and profile are returned through arguments.
SHADERC_EXPORT bool shaderc_parse_version_profile(const char* str, int* version,
                                   shaderc_profile* profile);

#ifdef __cplusplus
}
#endif  // __cplusplus

#endif  // SHADERC_SHADERC_H_
",c++
"/*
** Copyright (c) 2014-2016 The Khronos Group Inc.
**
** Permission is hereby granted, free of charge, to any person obtaining a copy
** of this software and/or associated documentation files (the ""Materials""),
** to deal in the Materials without restriction, including without limitation
** the rights to use, copy, modify, merge, publish, distribute, sublicense,
** and/or sell copies of the Materials, and to permit persons to whom the
** Materials are furnished to do so, subject to the following conditions:
**
** The above copyright notice and this permission notice shall be included in
** all copies or substantial portions of the Materials.
**
** MODIFICATIONS TO THIS FILE MAY MEAN IT NO LONGER ACCURATELY REFLECTS KHRONOS
** STANDARDS. THE UNMODIFIED, NORMATIVE VERSIONS OF KHRONOS SPECIFICATIONS AND
** HEADER INFORMATION ARE LOCATED AT https://www.khronos.org/registry/ 
**
** THE MATERIALS ARE PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS
** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
** THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
** LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
** FROM,OUT OF OR IN CONNECTION WITH THE MATERIALS OR THE USE OR OTHER DEALINGS
** IN THE MATERIALS.
*/

#ifndef GLSLstd450_H
#define GLSLstd450_H

static const int GLSLstd450Version = 100;
static const int GLSLstd450Revision = 1;

enum GLSLstd450 {
    GLSLstd450Bad = 0,              // Don't use

    GLSLstd450Round = 1,
    GLSLstd450RoundEven = 2,
    GLSLstd450Trunc = 3,
    GLSLstd450FAbs = 4,
    GLSLstd450SAbs = 5,
    GLSLstd450FSign = 6,
    GLSLstd450SSign = 7,
    GLSLstd450Floor = 8,
    GLSLstd450Ceil = 9,
    GLSLstd450Fract = 10,

    GLSLstd450Radians = 11,
    GLSLstd450Degrees = 12,
    GLSLstd450Sin = 13,
    GLSLstd450Cos = 14,
    GLSLstd450Tan = 15,
    GLSLstd450Asin = 16,
    GLSLstd450Acos = 17,
    GLSLstd450Atan = 18,
    GLSLstd450Sinh = 19,
    GLSLstd450Cosh = 20,
    GLSLstd450Tanh = 21,
    GLSLstd450Asinh = 22,
    GLSLstd450Acosh = 23,
    GLSLstd450Atanh = 24,
    GLSLstd450Atan2 = 25,

    GLSLstd450Pow = 26,
    GLSLstd450Exp = 27,
    GLSLstd450Log = 28,
    GLSLstd450Exp2 = 29,
    GLSLstd450Log2 = 30,
    GLSLstd450Sqrt = 31,
    GLSLstd450InverseSqrt = 32,

    GLSLstd450Determinant = 33,
    GLSLstd450MatrixInverse = 34,

    GLSLstd450Modf = 35,            // second operand needs an OpVariable to write to
    GLSLstd450ModfStruct = 36,      // no OpVariable operand
    GLSLstd450FMin = 37,
    GLSLstd450UMin = 38,
    GLSLstd450SMin = 39,
    GLSLstd450FMax = 40,
    GLSLstd450UMax = 41,
    GLSLstd450SMax = 42,
    GLSLstd450FClamp = 43,
    GLSLstd450UClamp = 44,
    GLSLstd450SClamp = 45,
    GLSLstd450FMix = 46,
    GLSLstd450IMix = 47,            // Reserved
    GLSLstd450Step = 48,
    GLSLstd450SmoothStep = 49,

    GLSLstd450Fma = 50,
    GLSLstd450Frexp = 51,            // second operand needs an OpVariable to write to
    GLSLstd450FrexpStruct = 52,      // no OpVariable operand
    GLSLstd450Ldexp = 53,

    GLSLstd450PackSnorm4x8 = 54,
    GLSLstd450PackUnorm4x8 = 55,
    GLSLstd450PackSnorm2x16 = 56,
    GLSLstd450PackUnorm2x16 = 57,
    GLSLstd450PackHalf2x16 = 58,
    GLSLstd450PackDouble2x32 = 59,
    GLSLstd450UnpackSnorm2x16 = 60,
    GLSLstd450UnpackUnorm2x16 = 61,
    GLSLstd450UnpackHalf2x16 = 62,
    GLSLstd450UnpackSnorm4x8 = 63,
    GLSLstd450UnpackUnorm4x8 = 64,
    GLSLstd450UnpackDouble2x32 = 65,

    GLSLstd450Length = 66,
    GLSLstd450Distance = 67,
    GLSLstd450Cross = 68,
    GLSLstd450Normalize = 69,
    GLSLstd450FaceForward = 70,
    GLSLstd450Reflect = 71,
    GLSLstd450Refract = 72,

    GLSLstd450FindILsb = 73,
    GLSLstd450FindSMsb = 74,
    GLSLstd450FindUMsb = 75,

    GLSLstd450InterpolateAtCentroid = 76,
    GLSLstd450InterpolateAtSample = 77,
    GLSLstd450InterpolateAtOffset = 78,

    GLSLstd450NMin = 79,
    GLSLstd450NMax = 80,
    GLSLstd450NClamp = 81,

    GLSLstd450Count
};

#endif  // #ifndef GLSLstd450_H
",c++
"float4 i4;
",c++
"float4 i2;

#include ""foo.h""
",c++
"// Copyright 2015 The Shaderc Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the ""License"");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an ""AS IS"" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef LIBSHADERC_UTIL_SRC_DEATH_TEST_H
#define LIBSHADERC_UTIL_SRC_DEATH_TEST_H

#ifdef NDEBUG
#define EXPECT_DEBUG_DEATH_IF_SUPPORTED(statement, regexp)
#else
#define EXPECT_DEBUG_DEATH_IF_SUPPORTED(statement, regexp) \
  EXPECT_DEATH_IF_SUPPORTED(statement, regexp)
#endif

#endif  // LIBSHADERC_UTIL_SRC_DEATH_TEST_H
",c++
"// Copyright 2018 The Shaderc Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the ""License"");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an ""AS IS"" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef SHADERC_ENV_H_
#define SHADERC_ENV_H_

#include <stdint.h>

#ifdef __cplusplus
extern ""C"" {
#endif

typedef enum {
  shaderc_target_env_vulkan,  // SPIR-V under Vulkan semantics
  shaderc_target_env_opengl,  // SPIR-V under OpenGL semantics
  // NOTE: SPIR-V code generation is not supported for shaders under OpenGL
  // compatibility profile.
  shaderc_target_env_opengl_compat,  // SPIR-V under OpenGL semantics,
                                     // including compatibility profile
                                     // functions
  shaderc_target_env_webgpu,         // Deprecated, SPIR-V under WebGPU
                                     // semantics
  shaderc_target_env_default = shaderc_target_env_vulkan
} shaderc_target_env;

typedef enum {
  // For Vulkan, use Vulkan's mapping of version numbers to integers.
  // See vulkan.h
  shaderc_env_version_vulkan_1_0 = ((1u << 22)),
  shaderc_env_version_vulkan_1_1 = ((1u << 22) | (1 << 12)),
  shaderc_env_version_vulkan_1_2 = ((1u << 22) | (2 << 12)),
  shaderc_env_version_vulkan_1_3 = ((1u << 22) | (3 << 12)),
  // For OpenGL, use the number from #version in shaders.
  // TODO(dneto): Currently no difference between OpenGL 4.5 and 4.6.
  // See glslang/Standalone/Standalone.cpp
  // TODO(dneto): Glslang doesn't accept a OpenGL client version of 460.
  shaderc_env_version_opengl_4_5 = 450,
  shaderc_env_version_webgpu,  // Deprecated, WebGPU env never defined versions
} shaderc_env_version;

// The known versions of SPIR-V.
typedef enum {
  // Use the values used for word 1 of a SPIR-V binary:
  // - bits 24 to 31: zero
  // - bits 16 to 23: major version number
  // - bits 8 to 15: minor version number
  // - bits 0 to 7: zero
  shaderc_spirv_version_1_0 = 0x010000u,
  shaderc_spirv_version_1_1 = 0x010100u,
  shaderc_spirv_version_1_2 = 0x010200u,
  shaderc_spirv_version_1_3 = 0x010300u,
  shaderc_spirv_version_1_4 = 0x010400u,
  shaderc_spirv_version_1_5 = 0x010500u,
  shaderc_spirv_version_1_6 = 0x010600u
} shaderc_spirv_version;

#ifdef __cplusplus
}
#endif  // __cplusplus

#endif  // SHADERC_ENV_H_
",c++
"#include ""parentBad""
",c++
"// Copyright 2018 The Shaderc Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the ""License"");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an ""AS IS"" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef SHADERC_VISIBILITY_H_
#define SHADERC_VISIBILITY_H_

// SHADERC_EXPORT tags symbol that will be exposed by the shared libraries.
#if defined(SHADERC_SHAREDLIB)
#if defined(_WIN32)
#if defined(SHADERC_IMPLEMENTATION)
#define SHADERC_EXPORT __declspec(dllexport)
#else
#define SHADERC_EXPORT __declspec(dllimport)
#endif
#else
#if defined(SHADERC_IMPLEMENTATION)
#define SHADERC_EXPORT __attribute__((visibility(""default"")))
#else
#define SHADERC_EXPORT
#endif
#endif
#else
#define SHADERC_EXPORT
#endif

#endif  // SHADERC_VISIBILITY_H_
",c++
"float4 p3;
",c++
"class_list = []

print('Welcome to the class list program.')

addClass = input('Would you like to add a class? Please enter Y or N: ')

while addClass == 'Y' or addClass == 'y':
    x = input('Please enter a class name to add to the list: ')
    class_list.append(x)
    addClass = input('Add another class? Enter Y or N: ')

    if addClass == 'N' or addClass == 'n':
        print('Thank you for using this program. Here is a list of classes you entered: ')
        for e in class_list:
            print(e)
    else: # double check if this should be elif
        addClass = input('That is not a valid input, please enter Y or N: ')
        # TO ADD: if N, still print the list
        if addClass == 'N' or addClass == 'n':
            print('Thank you for using this program. Here is a list of classes you entered: ')
            for e in class_list:
                print(e)
        elif addClass == 'Y' or addClass == 'y':
            x = input('Please enter a class name to add to the list: ')
            

else: # this may have to be moved into the while loop
    print('It appears you have not entered a class. Thank you for using this program.')


",python
"import pytest

from ClassCreator import *

# Class

def test_class():
   c = Class()
   c.setKey(""PHIL 204"")
   c.setCourseName(""Introduction to the Philosophy of Science"")
   c.setUnits(4)
   object = c.getClass()
   assert object['courseKey'] == ""PHIL 204""
   assert object['courseName'] == ""Introduction to the Philosophy of Science""
   assert object['units'] == 4
   

def test_class_completion():
   c = Class()
   print(c.isCompleted)
   assert c.isCompleted == False
   c.complete()
   assert c.isCompleted == True
   

def test_classes_different():
   c1 = Class()
   c1.setKey(""ART 101"")
   c1.setCourseName(""Art History"")
   c1.setUnits(3)
   c2 = Class()
   c2.setKey(""BUS 101"")
   c2.setCourseName(""Business Accounting"")
   c2.setUnits(5)
   assert c1.courseKey != c2.courseKey
   assert c1.courseName != c2.courseName
   assert c1.units != c2.units
   assert c1 != c2


# ClassList

def test_classlist_add_single_class():
   c = Class()
   class_list = ClassList()
   class_list.addClass(c)
   assert isinstance(class_list.classes[0], Class)
   assert len(class_list.classes) == 1
   assert isinstance(class_list, ClassList)


# ClassList

def test_classlist_add_single_class2():
   c = Class()
   class_list = ClassList()
   class_list.addClass(c)
   assert isinstance(class_list.classes[0], Class)
   assert len(class_list.classes) == 1


def test_classlist_add_three_classes():
   class_list = ClassList()
   for i in range(0, 3):
      c = Class()
      class_list.addClass(c)
      assert len(class_list.classes) == i + 1


def test_classlist_add_three_classes2():
   c1 = Class()
   class_list = ClassList()
   class_list.addClass(c1)
   assert len(class_list.classes) == 1
   c2 = Class()
   class_list.addClass(c2)
   print(type(class_list))
   assert len(class_list.classes) == 2
   c3 = Class()
   class_list.addClass(c3)
   assert len(class_list.classes) == 3


def test_classlist_completion1():
   class_lists = ClassList()
   c1 = Class()
   c2 = Class()
   c3 = Class()

   c1.complete()

   class_lists.addClass(c1)
   class_lists.addClass(c2)
   class_lists.addClass(c3)

   assert class_lists.checkCompletion() == False


def test_classlist_completion2():
   class_lists1 = ClassList()
   c1 = Class()
   c2 = Class()
   c3 = Class()

   c3.complete()

   class_lists1.addClass(c1)
   class_lists1.addClass(c2)
   class_lists1.addClass(c3)

   assert class_lists1.checkCompletion() == False


def test_classlist_completion3():

   class_lists2 = ClassList()
   c1 = Class()
   c2 = Class()
   c3 = Class()

   c1.complete()
   c2.complete()
   c3.complete()

   class_lists2.addClass(c1)
   class_lists2.addClass(c2)
   class_lists2.addClass(c3)
   print(""running comp3"")
   assert class_lists2.checkCompletion() == True


def test_classlist_newempty():
   asdf = ClassList()
   assert len(asdf.classes) == 0",python
"#! /usr/bin/env python

# Copyright 2012 Tom SF Haines

# Licensed under the Apache License, Version 2.0 (the ""License""); you may not use this file except in compliance with the License. You may obtain a copy of the License at

#   http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.



import df

from utils import doc_gen



# Setup...
doc = doc_gen.DocGen('df', 'Decision Forests', 'Extensive random forests implimentation')
doc.addFile('readme.txt', 'Overview')


# Classes...
doc.addClass(df.DF)
doc.addClass(df.ExemplarSet)
doc.addClass(df.MatrixES)
doc.addClass(df.MatrixGrow)
doc.addClass(df.Goal)
doc.addClass(df.Classification)
doc.addClass(df.DensityGaussian)
doc.addClass(df.Pruner)
doc.addClass(df.PruneCap)
doc.addClass(df.Test)
doc.addClass(df.AxisSplit)
doc.addClass(df.LinearSplit)
doc.addClass(df.DiscreteBucket)
doc.addClass(df.Generator)
doc.addClass(df.MergeGen)
doc.addClass(df.RandomGen)
doc.addClass(df.AxisMedianGen)
doc.addClass(df.LinearMedianGen)
doc.addClass(df.AxisRandomGen)
doc.addClass(df.LinearRandomGen)
doc.addClass(df.DiscreteRandomGen)
doc.addClass(df.AxisClassifyGen)
doc.addClass(df.LinearClassifyGen)
doc.addClass(df.DiscreteClassifyGen)
doc.addClass(df.SVMClassifyGen)
doc.addClass(df.Node)
",python
"import unittest
from ClassCollection import ClassCollection

# Todo
# Check if the classes exist in the classCollection (helper?)
# Check if relationship already exists (helper?)
# if it does, error
# if not, add parameter pair to the relationshipCollection

class RelationshipTest(unittest.TestCase):
    def testAddRelationshipNoFirstClass(self):
        collection = ClassCollection()
        collection.addClass(""foo"")
        self.assertRaises(KeyError, collection.addRelationship, ""bar"", ""foo"", ""aggregation"")

    def testAddRelationshipNoSecondClass(self):
        collection = ClassCollection()
        collection.addClass(""bar"")
        self.assertRaises(KeyError, collection.addRelationship, ""bar"", ""foo"", ""aggregation"")
    
    def testAddRelationshipNeitherClassExist(self):
        collection = ClassCollection()
        self.assertRaises(KeyError, collection.addRelationship, ""bar"", ""foo"", ""aggregation"")

    # Adding a relationship that already exists
    def testAddRelationshipAlreadyExists(self):
        collection = ClassCollection()
        collection.addClass(""foo"")
        collection.addClass(""bar"")
        collection.addRelationship(""bar"", ""foo"", ""aggregation"")
        self.assertRaises(KeyError, collection.addRelationship, ""bar"", ""foo"", ""aggregation"")

    def testRelationshipAddedSuccesfully(self):
        collection = ClassCollection()
        collection.addClass(""foo"")
        collection.addClass(""bar"")
        collection.addRelationship(""foo"", ""bar"", ""realization"")
        self.assertIsNotNone(collection.getRelationship(""foo"", ""bar""))

    def testDeleteRelationshipNoFirstClass(self):
        collection = ClassCollection()
        collection.addClass(""foo"")
        self.assertRaises(KeyError, collection.deleteRelationship, ""bar"", ""foo"")

    def testDeleteRelationshipNoSecondClass(self):
        collection = ClassCollection()
        collection.addClass(""bar"")
        self.assertRaises(KeyError, collection.deleteRelationship, ""bar"", ""foo"")
    
    def testDeleteRelationshipNeitherClassExist(self):
        collection = ClassCollection()
        self.assertRaises(KeyError, collection.deleteRelationship, ""bar"", ""foo"")

    def testRelationshipDeletedSuccesfully(self):
        collection = ClassCollection()
        collection.addClass(""foo"")
        collection.addClass(""bar"")
        collection.addRelationship(""foo"", ""bar"", ""inheritance"")
        collection.deleteRelationship(""foo"", ""bar"")
        self.assertNotIn((""foo"", ""bar""), collection.relationshipDict)
        self.assertRaises(KeyError, collection.deleteRelationship, ""foo"", ""bar"")

    def testRenameRelationship(self):
        collection = ClassCollection()
        collection.addClass(""foo"")
        collection.addClass(""bar"")
        collection.addRelationship(""foo"", ""bar"", ""inheritance"")
        collection.renameRelationship(""foo"", ""bar"", ""composition"")
        self.assertEquals(""composition"",collection.relationshipDict[(""foo"", ""bar"")].typ)
        
if __name__ == '__main__':
    unittest.main()
    ",python
"from classes.OnlineClassroom.createPost import post


class addclasspostAdapter(post):
    def __init__(self,addclass):
        self.addclass=addclass
    def getposttext(self):
        return ""next class about "" +self.addclass.details+"" will be held on ""+ self.addclass.starttime+"" to "" +self.addclass.endtime
    def getpostfile(self):
        return """"
    def getauthor(self):
        return self.addclass.author
    def get_course_id(self):
        return self.addclass.course_id",python
"
def main(j, args, params, tags, tasklet):

    page = args.page
    params.extend(args)
    page.addHTMLHeader('''<link rel=""shortcut icon"" type=""image/png"" href=""/system/.files/img/favicon.png"">''')
    page.addCSS('/jslib/bootstrap/css/bootstrap-3-3-1.min.css')
    page.addCSS('/jslib/flatui/css/flat-ui.css')
    page.addCSS('/jslib/new-ui/new-ui.css')
    page.addCSS('/jslib/new-ui/oocss.css')

    page.addJS('/jslib/jquery/jquery-2.0.3.min.js')
    page.addJS('/jslib/jquery/jquery-migrate-1.2.1.js')
    page.addJS('/jslib/old/jquery.cookie.js')
    page.addJS('/jslib/bootstrap/js/bootstrap-3-3-2.min.js')

    page.addJS(jsContent='''
        $( function () {
        $('body').addClass('flatTheme');
        // fix firefox elements size on windows
        var operatingSystem = navigator.platform;
        if(operatingSystem.indexOf('Win') >= 0 && $.browser.mozilla == true){
            $('body').addClass('fixFirefoxSizing');
        }else{
            $('body').addClass('removeTransform');
        }

        $('link[href=""/jslib/old/bootstrap/css/bootstrap.css""]').remove();
        $('link[href=""/jslib/old/bootstrap/css/bootstrap-responsive.css""]').remove();
        $('link[href=""/jslib/old/breadcrumbs/breadcrumbs.css""]').remove();
        $('link[href=""/jslib/swagger/css/reset.css""]').remove();


        $('.nav-collapse.collapse').removeClass('nav-collapse').addClass('navbar-collapse');
        $('.btn.btn-navbar').replaceWith('<button type=""button"" class=""navbar-toggle collapsed"" data-toggle=""collapse"" data-target="".nav-collapse"" aria-expanded=""false"">' +
            '<span class=""sr-only"">Toggle navigation</span>' +
            '<span class=""icon-bar""></span>' +
            '<span class=""icon-bar""></span>' +
            '<span class=""icon-bar""></span>' +
          '</button>'
        );
        $('.brand').removeClass('brand').addClass('navbar-brand');
        $('.navbar-inner').addClass('navbar-form');
        $('.search-query').addClass('form-control');
        $('.newBreadcrumbArrow').removeClass('newBreadcrumbArrow separator').addClass('fui-arrow-right');

        $('.span1').removeClass('span1').addClass('col-md-1');
        $('.span2').removeClass('span2').addClass('col-md-2');
        $('.span3').removeClass('span3').addClass('col-md-3');
        $('.span4').removeClass('span4').addClass('col-md-4');
        $('.span5').removeClass('span5').addClass('col-md-5');
        $('.span6').removeClass('span6').addClass('col-md-6');
        $('.span7').removeClass('span7').addClass('col-md-7');
        $('.span8').removeClass('span8').addClass('col-md-8');
        $('.span9').removeClass('span9').addClass('col-md-9');
        $('.span10').removeClass('span10').addClass('col-md-10');
        $('.span11').removeClass('spa11').addClass('col-md-11');
        $('.span12').removeClass('span12').addClass('col-md-12');

        var toggles = document.querySelectorAll("".c-hamburger"");
        for (var i = toggles.length - 1; i >= 0; i--) {
            var toggle = toggles[i];
            toggleHandler(toggle);
        };
        function toggleHandler(toggle) {
            toggle.addEventListener( ""click"", function(e) {
              e.preventDefault();
              (this.classList.contains(""is-active"") === true) ? this.classList.remove(""is-active"") : this.classList.add(""is-active"");
              $('.page-content').find('.sidebar-nav').toggleClass('hide');
              $('.page-content').find('.content').toggleClass('less-wide');
              $('.page-content').find('.navigation').toggleClass('wide-sidebar');
            });
        }

    });
     ''')

    page.removeJS('/jslib/old/jquery-latest.js')
    page.removeJS('/jslib/old/bootstrap/js/bootstrap.js')
    page.removeJS('/jslib/old/jquery.cookie.js')

    page.addCSS('/system/.files/css/flatTheme.css')

    params.result = page

    return params


def match(j, args, params, tags, tasklet):
    return True
",python
"from plone.app.discussion.browser.comments import CommentForm
import logging

logger = logging.getLogger('Comment Form Patch')

def updateActions(self):
    super(CommentForm, self).updateActions()
    self.actions['cancel'].addClass(""standalone"")
    self.actions['cancel'].addClass(""hide"")
    self.actions['cancel'].addClass(""button"")
    self.actions['cancel'].addClass(""tiny"")
    self.actions['cancel'].addClass(""radius"")
    self.actions['comment'].addClass(""context"")
    self.actions['comment'].addClass(""button"")
    self.actions['comment'].addClass(""tiny"")
    self.actions['comment'].addClass(""radius"")

CommentForm.updateActions = updateActions
logger.info(""Patching plone.app.discussion.browser.comments.CommentForm.updateActions"")
",python
"import unittest
from ClassCollection import ClassCollection
from Class import Class

class ClassTests(unittest.TestCase):

    # Checks if class is in the ClassDict
    def testAddClass(self):
        collection = ClassCollection() 
        collection.addClass(""A"")
        self.assertIsNotNone( collection.getClass(""A""))

    # Checks if a class is successfully deleted
    def testDeleteClass(self):
        collection = ClassCollection()
        collection.addClass(""A"")
        #collection.addAttribute(""A"", ""count"")
        collection.deleteClass(""A"")
        self.assertRaises(KeyError, collection.getClass, ""A"")

     # Checks if a class is successfully deleted
    def testRenameClass(self):
        collection = ClassCollection()
        collection.addClass(""A"")
        collection.renameClass(""A"",""B"")
        self.assertIsNotNone(collection.getClass(""B""))
    #rename Class with attributes. Ensure there is no leftover Class
    def testRenameClassComplex(self):
        collection = ClassCollection()
        collection.addClass(""A"")
        collection.renameClass(""A"",""B"")
      #  collection.addAttribute(""B"", ""count"")
        self.assertRaises(KeyError, collection.deleteClass, ""A"")
        self.assertIsNotNone( collection.getClass(""B""))
        collection.deleteClass(""B"")
        self.assertRaises(KeyError, collection.getClass, ""A"")
        self.assertRaises(KeyError, collection.getClass, ""B"")

    #Ensure relations are also removed when a class is removed
    def testDeleteClassWithRelationship(self):
        collection = ClassCollection()
        collection.addClass(""A"")
        collection.addClass(""B"")
        collection.addRelationship(""A"", ""B"", ""composition"")
        collection.deleteClass(""A"")
        self.assertRaises(KeyError, collection.getClass, ""A"")
        self.assertIsNotNone( collection.getClass(""B""))
        self.assertEqual( collection.relationshipDict, {})

    #test error on adding duplicate classes
    def testAddDuplicateClass(self):
        collection = ClassCollection()
        collection.addClass(""A"")
        self.assertRaises(KeyError, collection.addClass, ""A"")
    
    #test error on removing nonexisted classes
    def testRemoveNonExistentClass(self):
        collection = ClassCollection()
        self.assertRaises(KeyError, collection.deleteClass, ""A"")

    #test error on renaming duplicate classes
    def testRenameDuplicateClass(self):
        collection = ClassCollection()
        collection.addClass(""A"")
        collection.addClass(""B"")
        self.assertRaises(KeyError, collection.renameClass, ""A"", ""B"")

    #test error on removing nonexisted classes
    def testRenameNonExistentClass(self):
        collection = ClassCollection()
        collection.addClass(""A"")
        self.assertRaises(KeyError, collection.renameClass, ""C"", ""D"")

    def testDeleteClassWithRelationshipandField(self):
        collection = ClassCollection()
        collection.addClass(""A"")
        collection.addClass(""B"")
        collection.addField(""A"", ""name"", ""String"")
        collection.addField(""B"", ""name"", ""String"")
        collection.addRelationship(""A"", ""B"", ""composition"")
        collection.deleteClass(""A"")
        collection.deleteClass(""B"")
        #Ok as long as there are no errors

if __name__ == '__main__':
    unittest.main()
",python
"import ast

def createSampleV2(rep):
  f1 = ast.File(""Class1"")
  rep.addFile(f1)
  n1 = ast.Namespace(""ConsoleApplication1"")
  f1.addNamespace(n1)
  c1 = ast.Cl(""Class1"")
  n1.addClass(c1)
  s=ast.Type(""string［］"")
  mod = ast.Modifier()
  mod.access=""public""
  m = ast.Method()
  m.name=""setState""
  m.setModifiers(mod)
  m.setReturnType(s)
  c1.addMethod(m)
  
  f2 = ast.File(""Class2"")
  rep.addFile(f2)
  n1 = ast.Namespace(""ConsoleApplication1"")
  f2.addNamespace(n1)
  c2 = ast.Cl(""Class2"")
  e1 = ast.Type(""Class1"")
  c2.setExtend(e1)
  n1.addClass(c2)
  
  f3 = ast.File(""Class3"")
  rep.addFile(f3)
  n1 = ast.Namespace(""ConsoleApplication1"")
  f3.addNamespace(n1)
  c3 = ast.Cl(""Class3"")
  e2 = ast.Type(""Class2"")
  c3.setExtend(e2)
  n1.addClass(c3)
  
  f4 = ast.File(""Class4"")
  rep.addFile(f4)
  n1 = ast.Namespace(""ConsoleApplication1"")
  f4.addNamespace(n1)
  in1 = ast.Namespace(""Inner1"")
  n1.addNamespace(in1)
  c4 = ast.Cl(""Class4"")
  e3 = ast.Type(""Class3"")
  c4.setExtend(e3)
  in1.addClass(c4)

  f5 = ast.File(""Class5"")
  rep.addFile(f5)
  n1 = ast.Namespace(""ConsoleApplication1"")
  f5.addNamespace(n1)
  in2 = ast.Namespace(""Inner2"")
  u1=ast.Using(""Inner1"")
  in2.addUsing(u1)
  n1.addNamespace(in2)
  c5 = ast.Cl(""Class5"")
  e4 = ast.Type(""Class4"")
  c5.setExtend(e4)
  in2.addClass(c5)
  in3 = ast.Namespace(""Inner3"")
  in2.addNamespace(in3)
  c6 = ast.Cl(""Class6"")
  e4 = ast.Type(""Class4"")
  c6.setExtend(e4)
  in3.addClass(c6)
  in4 = ast.Namespace(""Inner4"")
  in3.addNamespace(in4)
  c7 = ast.Cl(""Class7"")
  e1 = ast.Type(""Class1"")
  c7.setExtend(e1)
  in4.addClass(c7)
  
  f6 = ast.File(""Class6"")
  rep.addFile(f6)
  n1 = ast.Namespace(""ConsoleApplication1"")
  f6.addNamespace(n1)
  u1=ast.Using(""Inner6.Inner7.Inner8"")
  n1.addUsing(u1)
  in12 = ast.Namespace(""Inner12"")
  n1.addNamespace(in12)
  u611=ast.Using(""Inner6.Inner7.Inner8.Inner9.Inner10.Inner11"")
  in12.addUsing(u611)
  u9=ast.Using(""Inner9"")
  in12.addUsing(u9)
  c7 = ast.Cl(""Class7"")
  i1 = ast.Type(""Interface1"")
  c7.addImplement(i1)
  in12.addClass(c7)
  
  fi1 = ast.File(""Interface1"")
  rep.addFile(fi1)
  n1 = ast.Namespace(""ConsoleApplication1"")
  fi1.addNamespace(n1)
  n6 = ast.Namespace(""Inner6"")
  n1.addNamespace(n6)
  n7 = ast.Namespace(""Inner7"")
  n6.addNamespace(n7)
  n8 = ast.Namespace(""Inner8"")
  n7.addNamespace(n8)
  n9 = ast.Namespace(""Inner9"")
  n8.addNamespace(n9)
  n10 = ast.Namespace(""Inner10"")
  n9.addNamespace(n10)
  n11 = ast.Namespace(""Inner11"")
  n10.addNamespace(n11)  
  i1=ast.Iface(""Interface1"")
  n11.addInterface(i1)
  mod = ast.Modifier()
  mod.access=""public""
  m = ast.Method()
  m.name=""hello""
  m.setModifiers(mod)
  m.setReturnType(ast.Type(""string""))
  i1.addMethod(m)
  
  
    
  f7 = ast.File(""Class7"")
  rep.addFile(f7)
  n1 = ast.Namespace(""ConsoleApplication1"")
  f7.addNamespace(n1)
  c8 = ast.Cl(""Class8"")
  e7 = ast.Type(""Inner12.Class7"")
  c8.setExtend(e7)
  n1.addClass(c8)
  
  f9 = ast.File(""Class9"")
  rep.addFile(f9)
  n1 = ast.Namespace(""ConsoleApplication1"")
  f9.addNamespace(n1)
  n15 = ast.Namespace(""Inner15"")
  n1.addNamespace(n15)
  n16 = ast.Namespace(""Inner16"")
  n15.addNamespace(n16)
  c9 = ast.Cl(""Class9"")
  n16.addClass(c9)
  
  f10 = ast.File(""Class10"")
  rep.addFile(f10)
  n1 = ast.Namespace(""ConsoleApplication1"")
  f10.addNamespace(n1)
  n15 = ast.Namespace(""Inner15"")
  n1.addNamespace(n15)
  

  c10 = ast.Cl(""Class10"")
  e169 = ast.Type(""Inner16.Class9"")
  c10.setExtend(e169)
  n15.addClass(c10)
  
  n17 = ast.Namespace(""Inner17"")
  n15.addNamespace(n17)
  u16=ast.Using(""Inner16"")
  n17.addUsing(u16)
  c12 = ast.Cl(""Class12"")
  e9 = ast.Type(""Class9"")
  c12.setExtend(e9)
  n17.addClass(c12)
  
  n18 = ast.Namespace(""Inner18"")
  n1.addNamespace(n18)
  u15=ast.Using(""Inner15"")
  n18.addUsing(u15)
  n19 = ast.Namespace(""Inner19"")
  n18.addNamespace(n19)
  u1516=ast.Using(""Inner15.Inner16"")
  n19.addUsing(u1516)
  c12 = ast.Cl(""Class12"")
  e9 = ast.Type(""Class9"")
  c12.setExtend(e9)
  n19.addClass(c12)
  
def createSample(rep):
  #rep = Representation()
  intrn = ast.Modifier()
  publ = ast.Modifier()
  publ.setPublic()
  priv = ast.Modifier()
  priv.setPrivate()
  prot = ast.Modifier()
  prot.setProtected()
  void = ast.Type(""Void"")
  
  basicFunctions = ast.File(""BasicFunctions"")
  rep.addFile(basicFunctions)
  
  breathing = ast.Namespace(""Breathing"")
  basicFunctions.addNamespace(breathing)
  
  breath = ast.Iface(""Breath"")
  breathing.addInterface(breath)
  lungs = ast.Type(""Lungs"")
  lungsA = ast.Attr(""lungs"",lungs,priv)
  breath.addAttribute(lungsA)
  respire = ast.Method(""respire"",void,priv)
  breath.addMethod(respire)

  eating = ast.Namespace(""Eating"")
  basicFunctions.addNamespace(eating)
  eat = ast.Iface(""Eat"")
  eating.addInterface(eat)
  mouth = ast.Type(""Mouth"")
  mouthA = ast.Attr(""mouth"",mouth,prot)
  energy = ast.Type(""Energy"")
  consume = ast.Method(""consume"",energy,priv)
  meal = ast.Type(""Meal"")
  food = ast.Parameter(meal,""food"")
  consume.addParameter(food)
  eat.addMethod(consume)
  eat.addAttribute(mouthA)
  body = ast.Type(""Body"")
  bodyA = ast.Attr(""body"",body,prot)
  eat.addAttribute(bodyA)

  
  liveFunctions = ast.File(""LiveFunctions"")
  rep.addFile(liveFunctions)
  usingBreathing = ast.Using(""Breathing"")
  liveFunctions.addUsing(usingBreathing)
  usingEating = ast.Using(""Eating"")
  liveFunctions.addUsing(usingEating)
  living = ast.Namespace(""Living"")
  
  liveFunctions.addNamespace(living)
  live = ast.Iface(""Live"")
  living.addInterface(live)
  breathT = ast.Type(""Breath"")
  eatT = ast.Type(""Eat"")
  live.addExtend(breathT)
  live.addExtend(eatT)
  exist = ast.Method(""exist"",void,priv)
  live.addMethod(exist)

  
  biteFile = ast.File(""Bite"")
  rep.addFile(biteFile)
  biteNamespace = ast.Namespace(""Bite"")
  biteFile.addNamespace(biteNamespace);
  bite = ast.Iface(""Bite"")
  biteNamespace.addInterface(bite)
  teeth = ast.Type(""Teeth"")
  teethA = ast.Attr(""teeth"",teeth,priv)
  bite.addAttribute(teethA)
  hurt = ast.Type(""Hurt"")
  attack = ast.Method(""attack"",hurt,prot)
  attack.isAbstract(True)
  bite.addMethod(attack)

  familiarFile = ast.File(""Familiar"")
  rep.addFile(familiarFile)
  familiar = ast.Iface(""Familiar"")
  familarNamespace = ast.Namespace(""Familiar"")
  familiarFile.addNamespace(familarNamespace)
  familarNamespace.addInterface(familiar)
  cares = ast.Method(""cares"",void,intrn)
  cares.isAbstract(True)
  familiar.addMethod(cares)

  animalFile = ast.File(""Animal"")
  rep.addFile(animalFile)
  usingLiving = ast.Using(""Living"")
  
  animalFile.addUsing(usingLiving)
  animal = ast.Cl(""Animal"")
  animalFile.addClass(animal)
  bone = ast.Type(""Bone"")
  boneA = ast.Attr(""bone"",bone,publ)
  animal.addAttribute(boneA)
  liveT = ast.Type(""Live"")
  animal.addImplement(liveT)
  move = ast.Method(""move"",void,prot)
  animal.addMethod(move)
  animal.isAbstract(True)

  
  petFile = ast.File(""Pet"")
  petNamespace = ast.Namespace(""Pet"")
  familiarNT = ast.Using(""Familiar"")
  petNamespace.addUsing(familiarNT)
  petFile.addNamespace(petNamespace)
  rep.addFile(petFile)
  animalT = ast.Type(""Animal"")
  
  pet = ast.Cl(""Pet"")
  petNamespace.addClass(pet)
  pet.setExtend(animalT)
  pet.addImplement(familiar)
  pet.isAbstract(True)
  friendliness = ast.Type(""Friendliness"")
  friendlinessA = ast.Attr(""friendliness"",friendliness,publ)
  pet.addMethod(cares)
  pet.addAttribute(friendlinessA)

  wildFile = ast.File(""Wild"")
  wildNamespace = ast.Namespace(""Wild"")
  wildFile.addNamespace(wildNamespace)
  rep.addFile(wildFile)  
  wild = ast.Cl(""Wild"")
  wildNamespace.addClass(wild)
  usingBite = ast.Using(""Bite"")
  wildNamespace.addUsing(usingBite)
  wild.setExtend(animalT)
  biteT = ast.Type(""Bite"")
  wild.addImplement(biteT)
  wild.isAbstract(True)
  wildness = ast.Type(""Wildness"")
  wildnessA = ast.Attr(""wildness"",wildness,publ)
  wild.addAttribute(wildnessA)
  wild.addMethod(attack)

  dogFile = ast.File(""Dog"")
  rep.addFile(dogFile)
  usingPet = ast.Using(""Pet"")
  dogFile.addUsing(usingPet)
  dog = ast.Cl(""Dog"")
  dogFile.addClass(dog)
  petT= ast.Type(""Pet"")
  dog.setExtend(petT)
  caresImpl = ast.Method(""cares"",void,intrn)
  dog.addMethod(caresImpl)
  huntCat = ast.Method(""huntCat"", void, prot)
  catT = ast.Type(""Cat"")
  catP = ast.Parameter(catT,""cat"")
  huntCat.addParameter(catP)
  energyT = ast.Type(""Energy"")
  energyP = ast.Parameter(energyT,""energy"")
  huntCat.addParameter(energyP)
  dog.addMethod(huntCat)

  catFile = ast.File(""Cat"")
  rep.addFile(catFile)
  usingPetC = ast.Using(""Pet"")
  catFile.addUsing(usingPetC)
  cat = ast.Cl(""Cat"")
  catFile.addClass(cat)
  cat.setExtend(petT)
  cat.addMethod(caresImpl)
  mouw = ast.Method(""mouw"",void,prot)
  cat.addMethod(mouw)

  cowFile = ast.File(""Cow"")
  rep.addFile(cowFile)
  usingPetCow = ast.Using(""Pet"")
  cowFile.addUsing(usingPetCow)  
  cow = ast.Cl(""Cow"")
  cowFile.addClass(cow)
  cow.setExtend(petT)
  milk = ast.Type(""Milk"")
  milkA = ast.Attr(""milk"",milk,intrn)
  cow.addAttribute(milkA)
  cow.addMethod(caresImpl)
  giveMilk = ast.Method(""giveMilk"",milk,publ)
  cow.addMethod(giveMilk)

  tigerFile = ast.File(""Tiger"")
  rep.addFile(tigerFile)
  usingWild = ast.Using(""Wild"")
  tigerFile.addUsing(usingWild)
  tiger = ast.Cl(""Tiger"")
  tigerFile.addClass(tiger)
  wildT = ast.Type(""Wild"")
  tiger.setExtend(wildT)
  stripe = ast.Type(""Stripe"")
  stripeA = ast.Attr(""stripe"",stripe,prot)
  tiger.addAttribute(stripeA)
  attackImpl = ast.Method(""attack"",hurt,prot)
  tiger.addMethod(attackImpl)

  lionFile = ast.File(""Lion"")
  rep.addFile(lionFile)
  lionFile.addUsing(usingWild)
  lion = ast.Cl(""Lion"")
  lionFile.addClass(lion)
  lion.setExtend(wild)
  mane = ast.Type(""Mane"")
  maneA = ast.Attr(""mane"",mane,prot)
  lion.addAttribute(maneA)
  lion.addMethod(attackImpl)

def createSampleV1(rep):
  #rep = Representation()
  intrn = Modifier()
  publ = Modifier()
  publ.setPublic()
  priv = Modifier()
  priv.setPrivate()
  prot = Modifier()
  prot.setProtected()
  void = Type(""Void"")
  
  breath = Iface(""Breath"")
  lungs = Type(""Lungs"")
  lungsA = Attr(""lungs"",lungs,priv)
  breath.addAttribute(lungsA)
  respire=Method(""respire"",void,priv)
  breath.addMethod(respire)
  rep.addInterface(breath)
  eat = Iface(""Eat"")
  mouth = Type(""Mouth"")
  mouthA = Attr(""mouth"",mouth,prot)
  energy = Type(""Energy"")
  consume = Method(""consume"",energy,priv)
  meal = Type(""Meal"")
  food=Parameter(meal,""food"")
  consume.addParameter(food)
  eat.addMethod(consume)
  eat.addAttribute(mouthA)
  rep.addInterface(eat)
  
  live = Iface(""Live"")
  live.addExtend(breath)
  live.addExtend(eat)
  body = Type(""Body"")
  bodyA = Attr(""body"",body,prot)
  eat.addAttribute(bodyA)
  exist=Method(""exist"",void,priv)
  live.addMethod(exist)
  rep.addInterface(live)
  
  bite = Iface(""Bite"")
  teeth = Type(""Teeth"")
  teethA = Attr(""teeth"",teeth,priv)
  bite.addAttribute(teethA)
  hurt = Type(""Hurt"")
  attack=Method(""attack"",hurt,prot)
  attack.isAbstract(True)
  bite.addMethod(attack)
  rep.addInterface(bite)
  familiar = Iface(""Familiar"")
  cares = Method(""cares"",void,intrn)
  cares.isAbstract(True)
  familiar.addMethod(cares)
  rep.addInterface(familiar)
  
  animal = Cl(""Animal"")
  bone = Type(""Bone"")
  boneA = Attr(""bone"",bone,publ)
  animal.addAttribute(boneA)
  animal.addImplement(live)
  move = Method(""move"",void,prot)
  animal.addMethod(move)
  animal.isAbstract(True)
  rep.addClass(animal)
  
  
  pet = Cl(""Pet"")
  pet.setExtend(animal)
  pet.addImplement(familiar)
  pet.isAbstract(True)
  friendliness = Type(""Friendliness"")
  friendlinessA = Attr(""friendliness"",friendliness,publ)
  pet.addMethod(cares)
  pet.addAttribute(friendlinessA)
  rep.addClass(pet)
  
  wild = Cl(""Wild"")
  wild.setExtend(animal)
  wild.addImplement(bite)
  wild.isAbstract(True)
  wildness = Type(""Wildness"")
  wildnessA = Attr(""wildness"",wildness,publ)
  wild.addAttribute(wildnessA)
  wild.addMethod(attack)
  rep.addClass(wild)
  
  dog = Cl(""Dog"")
  dog.setExtend(pet)
  caresImpl = Method(""cares"",void,intrn)
  dog.addMethod(caresImpl)
  huntCat = Method(""huntCat"", void, prot)
  catT = Type(""Cat"")
  catP=Parameter(catT,""cat"")
  huntCat.addParameter(catP)
  energyT = Type(""Energy"")
  energyP=Parameter(energyT,""energy"")
  huntCat.addParameter(energyP)
  dog.addMethod(huntCat)
  rep.addClass(dog)
  
  cat = Cl(""Cat"")
  cat.setExtend(pet)
  cat.addMethod(caresImpl)
  mouw = Method(""mouw"",void,prot)
  cat.addMethod(mouw)
  rep.addClass(cat)
  
  cow = Cl(""Cow"")
  cow.setExtend(pet)
  milk = Type(""Milk"")
  milkA = Attr(""milk"",milk,intrn)
  cow.addAttribute(milkA)
  cow.addMethod(caresImpl)
  giveMilk = Method(""giveMilk"",milk,publ)
  cow.addMethod(giveMilk)
  rep.addClass(cow)
  
  tiger = Cl(""Tiger"")
  tiger.setExtend(wild)
  stripe = Type(""Stripe"")
  stripeA = Attr(""stripe"",stripe,prot)
  tiger.addAttribute(stripeA)
  attackImpl = Method(""attack"",hurt,prot)
  tiger.addMethod(attackImpl)
  rep.addClass(tiger)
  
  lion = Cl(""Lion"")
  lion.setExtend(wild)
  mane = Type(""Mane"")
  maneA = Attr(""mane"",mane,prot)
  lion.addAttribute(maneA)
  lion.addMethod(attackImpl)
  rep.addClass(lion)
",python
"__pragma__(""alias"",""s"",""$"")
from Widget import Widget
import random
config=Config.Config()
class Image(Widget):
	""""""docstring for Button""""""
	def __init__(self, titulo=""""):
		Widget.__init__(self,titulo)
		self._html=""<b class='titulo'></b><figure><img></figure><span class='descripcion'></span>""
		self.target.html(self._html)
		self.__button=self.target.find("">button"")
		self._html=""""
		self._src=""""
		self.activador=None
		self._hoverEffect=None #vibrar, 
		#obscurecer, zoomIn, zoomOut, slide, blur,grayScale, sepia, blurGrayScale, opacity, opacityColor, opacityColorRandom
		#Flash, Shine, Circle
		self.inMoving=None #function(self)
		self.rotation=None # random, random[1,3] , 20ª
		self.width=400
		self._tooltip=None #top,bottom
		self._load_css=[config.base_url+""/static/css/hint.css-master/hint.css""]
		self._hint=self._titulo
	
	
	def titulo(self,titulo):
		self.target.find("">.titulo"").text(titulo)
		self._titulo=titulo

	
	def update(self):
		self.format=[self._titulo]
		self.__update__()
		self.target.trigger(""click"",[self])

		if self.activador!=None:
			self.target.bind(""click"",self.activador(self))
		self.__titulo=self.target.find("">.titulo"")
		self.titulo(self._titulo)
		self.target.find("">figure"").find("">img"").attr(""src"",self._src)
		if self._hoverEffect==""vibrar"":
			pass
		elif self._hoverEffect==""oscurecer"":
			pass
		elif self._hoverEffect==""zoomIn"":
			self.target.find("">figure"").addClass(""hover03"")
		elif self._hoverEffect==""zoomOut"":
			self.target.find("">figure"").addClass(""hover04"")
			pass
		elif self._hoverEffect==""slide"":
			self.target.find("">figure"").addClass(""hover05"")
		elif self._hoverEffect==""rotate"":
			self.target.find("">figure"").addClass(""hover06"")
		elif self._hoverEffect==""blur"":
			self.target.find("">figure"").addClass(""hover07"")
		elif self._hoverEffect==""grayScale"":
			self.target.find("">figure"").addClass(""hover08"")
		elif self._hoverEffect==""sepia"":
			self.target.find("">figure"").addClass(""hover09"")
		elif self._hoverEffect==""blurGrayScale"":
			self.target.find("">figure"").addClass(""hover10"")
		elif self._hoverEffect==""opacity"":
			self.target.find("">figure"").addClass(""hover11"")
		elif self._hoverEffect==""opacityColor"":
			self.target.find("">figure"").addClass(""hover12"")
		elif self._hoverEffect==""opacityColorRandom"":
			pass
		elif self._hoverEffect==""flash"":
			self.target.find("">figure"").addClass(""hover13"")
		elif self._hoverEffect==""shine"":
			self.target.find("">figure"").addClass(""hover14"")

		elif self._hoverEffect==""circle"":
			self.target.find("">figure"").addClass(""hover15"")

		if self.rotation!=None:
			
			if type(self.rotation)==list:

				self.target.find("">figure"").find("">img"").css({""transform"":""rotate(""+str(random.randint(self.rotation[0],self.rotation[1]))+""deg)"",""width"":self.width})
			elif self.rotation==""random"":
				self.target.find("">figure"").find("">img"").css({""transform"":""rotate(""+str(random.random()*10)+""deg)"",""width"":self.width})
			else:
				self.target.find("">figure"").find("">img"").css({""transform"":""rotate(""+str(self.rotation)+""deg)"",""width"":self.width})
		if self._tooltip!=None:
			self.target.addClass(""hint--""+self._tooltip)
			self.target.attr(""data-hint"",self._hint)


		
	
	
		


		",python
"# test

import os, sys, inspect
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
parentdir = os.path.dirname(currentdir)
sys.path.insert(0, parentdir) 
from bot import Bot

b = Bot()

b.addClass('tcj29', 'tc2013j@cony', '1234', test=True)

# b.addClass('tcj29','tc2013j@cony','4468', '','', test = True)  #Single Class

# b.addClass('tcj29','tc2013j@cony','9190','9191','', test = True)  #Disscusion no Lab



# b.addClass('tcj29','tc2013j@cony','16587','','16588', test = True)  #Lab no Dicussion
# b.addClass('tcj29','tc2013j@cony','16587','','16594', test = True)  #Lab no Dicussion

# b.addClass('tcj29','tc2013j@cony','5741','5743','', test = True)  #Lab no Dicussion

# b.addClass('tcj29','tc2013j@cony','6133', '6140','6180', test = True)  #Disscussion and Lab  FIRST PAGE
# b.addClass('tcj29','tc2013j@cony','6133', '6147','6190', test = True)  #Disscussion and Lab	 SECOND PAGE

# b.addClass('tcj29','tc2013j@cony','6133', '7927','6195', test = True)  #Disscussion and Lab  LAST PAGE

",python
"from orm.tables import Library
from orm.tables import Log
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm.session import Session
from orm.tables import session



def add(BookName,Yearofpublication,AuthorName,Category,Addp):
    l1=Library(BookName,Yearofpublication,AuthorName,Category,Addp)
    l1.addClass()
    lg=Log(Library_id=l1.BookID,Info='Book added',Name=Addp,OldVersion=None,NewVersion=BookName)
    lg.addClass()
    



def delete(key):
    Person=input(""Name: "")
    session.query(Library).filter(Library.BookID==key).delete()
    session.commit()

    lg=Log(Info='Book Deleted',Name=Person,OldVersion=None,NewVersion=None)
    lg.addClass()
  



def update(key):

    Person=input(""Name: "")

    question=int(input('''
                     Update Book Name: 1
                     Update Year: 2
                     Update Author Name: 3
                     Update category: 4
                     Update Person: 5
                     Update all : 6
                   '''))

    if question==1:

        veri=session.query(Library).filter(Library.BookID==key).one()
        temp=veri.BookName

        a=input(""Update Bookname: "")
        upd=session.query(Library).get(key)
        upd.BookName=a
        session.commit()


        lg=Log(Library_id=key,Info='Book updated',Name=Person,OldVersion=temp,NewVersion=a)
        lg.addClass()
        
    
    elif question==2:

        veri=session.query(Library).filter(Library.BookID==key).one()
        temp=veri.Yearofpublication
        
        b=input(""Update Year: "")
        upd=session.query(Library).get(key)
        upd.Yearofpublication=b
        session.commit()

        lg=Log(Library_id=key,Info='Book updated',Name=Person,OldVersion=temp,NewVersion=b)
        Log.addClass(lg)#böyle de çağırabiliyorum**
        temp=veri.BookName
        

    elif question==3:

        veri=session.query(Library).filter(Library.BookID==key).one()
        temp=veri.AuthorName

        c=input(""Update Author Name: "")
        upd=session.query(Library).get(key)
        upd.AuthorName=c
        session.commit()

        lg=Log(Library_id=key,Info='Book updated',Name=Person,OldVersion=temp,NewVersion=c)
        lg.addClass()

    
    elif question==4:

        veri=session.query(Library).filter(Library.BookID==key).one()
        temp=veri.Category

        d=input(""Update Category: "")
        upd=session.query(Library).get(key)
        upd.Category=d
        session.commit()

        lg=Log(Library_id=key,Info='Book updated',Name=Person,OldVersion=temp,NewVersion=d)
        lg.addClass()


    elif question==5:

        veri=session.query(Library).filter(Library.BookID==key).one()
        temp=veri.Addp

        e=input(""Enter new data: "")
        upd=session.query(Library).get(key)
        upd.Addp=e
        session.commit()

        lg=Log(Library_id=key,Info='Book updated',Name=Person,OldVersion=temp,NewVersion=e)
        lg.addClass()


    elif question==6:
        #old
        veri=session.query(Library).filter(Library.BookID==key).one()
        temp=veri.BookName
        temp1=veri.Yearofpublication
        temp2=veri.AuthorName
        temp3=veri.Category
        temp4=veri.Addp


        q1=input(""Update BookName: "")
        q2=int(input(""Update Year: ""))
        q3=input(""Update Author Name: "")
        q4=input(""Update Category: "")
        q5=input(""Update person: "")


        upd=session.query(Library).get(key)
        upd.BookName=q1
        session.commit()
        upd.Yearofpublication=q2
        session.commit()
        upd.AuthorName=q3
        session.commit()
        upd.Category=q4
        session.commit()
        upd.Addp=q5
        session.commit()


        lg=Log(Library_id=key,Info='Book updated',Name=Person,OldVersion=""{},{},{},{},{}"".format(temp,temp1,temp2,temp3,temp4),NewVersion=""{},{},{},{},{}"".format(q1,q2,q3,q4,q5))
        lg.addClass()
    

    else:
        print(""False expression!"")


   

",python
"###
#   colum append
#
####

DataProc.appendColumns (['lmn_user_features_4_11_6_15_t',
				'lmn_u_class_4_11_6_15_indc'],
				'lmn_user_features_4_11_6_15_t_addclass')

DataProc.appendColumns (['lmn_brand_features_4_11_6_15_t',
				'lmn_b_class_4_11_6_15_indc'],
				'lmn_brand_features_4_11_6_15_t_addclass')

DataProc.appendColumns (['lmn_user_features_5_11_7_15_t',
				'lmn_u_class_5_11_7_15_indc'],
				'lmn_user_features_5_11_7_15_t_addclass')

DataProc.appendColumns (['lmn_brand_features_5_11_7_15_t',
				'lmn_b_class_5_11_7_15_indc'],
				'lmn_brand_features_5_11_7_15_t_addclass')










# connect 

sql(""""""
drop table if  exists lmn_train_area_validate_4_11_7_15_addclass  ;
create table lmn_train_area_validate_4_11_7_15_addclass as
select
	lmn_user_brand_features_4_11_6_15_addclass.user_id,
      lmn_user_brand_features_4_11_6_15_addclass.brand_id,
 	 click1	 ,
	click3	 ,
	click5	 ,
	click7	 ,
	click10	,
	click15	 ,
	click25	 ,

	buy1	 ,
	buy3	 ,
	buy5	 ,
	buy7	 ,
	buy10	,
	buy15	 ,
	buy25	 ,

	collect1	 ,
	collect3	 ,
	collect5	 ,
	collect7	 ,
	collect10	,
	collect15	 ,
	collect25	 ,

	basket1	 ,
	basket3	 ,
	basket5	 ,
	basket7	 ,
	basket10	,
	basket15	 ,
	basket25	,
      
       click_this_ratio	,
	 buy_this_ratio	,
	 collect_this_ratio	 ,
	 basket_this_ratio	,
	 action_this	,
	lmn_user_brand_features_4_11_6_15_addclass.cluster_index ub_class ,

 -- brand features
      --
  	n_clicked_ratio,
	n_bought_ratio,
	n_collected_ratio,	
	n_basketed_ratio,	
	actions_by ,

	clicked_dist_ratio,
	bought_dist_ratio,
	collected_dist_ratio,
	basketed_dist_ratio ,
       users_dist ,
	lmn_brand_features_4_11_6_15_addclass.cluster_index  b_class,

--user features 
	n_click_ratio,
	n_buy_ratio,
	n_collect_ratio ,
	n_basket_ratio,
	actions_sum ,

	click_dist_ratio,
	buy_dist_ratio,
	collect_dist_ratio,
	basket_dist_ratio,
      brand_dist  ,
      lmn_user_features_4_11_6_15_addclass.cluster_index  u_class ,	

	last_datetime ,		

      --label
      buy_brand	,
	case
	when buy_brand is not null then 1
	when buy_brand is null then 0
	end as buy_label

from
 lmn_user_brand_features_4_11_6_15_addclass

left outer join
lmn_user_features_4_11_6_15_addclass
on 	lmn_user_brand_features_4_11_6_15_addclass.user_id = lmn_user_features_4_11_6_15_addclass.user_id

left outer join
lmn_brand_features_4_11_6_15_addclass
on 	lmn_user_brand_features_4_11_6_15_addclass.brand_id = lmn_brand_features_4_11_6_15_addclass.brand_id		

left outer join(
   select
   user_id,
   brand_id  buy_brand
from(
	select user_id,brand_id 
	from t_alibaba_bigdata_user_brand_total_1
	where type = '1' and  visit_datetime>='06-16' and   visit_datetime <= '07-15'
	group by  user_id , brand_id
    )label
) buy_label_table_6_16_7_15
on 	lmn_user_brand_features_4_11_6_15_addclass.user_id = buy_label_table_6_16_7_15.user_id and 	lmn_user_brand_features_4_11_6_15_addclass.brand_id = buy_label_table_6_16_7_15.buy_brand

where actions_sum is not null and  actions_by is not null   ; --fliter
"""""")


############################################################################################################################################################

#connect all ,get train table for validate

sql(""""""
drop table if  exists lmn_predict_area_validate_5_11_7_15_addclass  ;
create table lmn_predict_area_validate_5_11_7_15_addclass as
select
	lmn_user_brand_features_5_11_7_15_addclass.user_id,
      lmn_user_brand_features_5_11_7_15_addclass.brand_id,
 	 click1	 ,
	click3	 ,
	click5	 ,
	click7	 ,
	click10	,
	click15	 ,
	click25	 ,

	buy1	 ,
	buy3	 ,
	buy5	 ,
	buy7	 ,
	buy10	,
	buy15	 ,
	buy25	 ,

	collect1	 ,
	collect3	 ,
	collect5	 ,
	collect7	 ,
	collect10	,
	collect15	 ,
	collect25	 ,

	basket1	 ,
	basket3	 ,
	basket5	 ,
	basket7	 ,
	basket10	,
	basket15	 ,
	basket25	,
      
       click_this_ratio	,
	 buy_this_ratio	,
	 collect_this_ratio	 ,
	 basket_this_ratio	,
	 action_this	,
	lmn_user_brand_features_5_11_7_15_addclass.cluster_index ub_class ,

 -- brand features
      --
  	n_clicked_ratio,
	n_bought_ratio,
	n_collected_ratio,	
	n_basketed_ratio,	
	actions_by ,

	clicked_dist_ratio,
	bought_dist_ratio,
	collected_dist_ratio,
	basketed_dist_ratio ,
       users_dist ,
	lmn_brand_features_5_11_7_15_addclass.cluster_index  b_class,

--user features 
	n_click_ratio,
	n_buy_ratio,
	n_collect_ratio ,
	n_basket_ratio,
	actions_sum ,

	click_dist_ratio,
	buy_dist_ratio,
	collect_dist_ratio,
	basket_dist_ratio,
      brand_dist  ,
      lmn_user_features_5_11_7_15_addclass.cluster_index  u_class ,	

	last_datetime 	

from
 lmn_user_brand_features_5_11_7_15_addclass

left outer join
lmn_user_features_5_11_7_15_addclass
on 	lmn_user_brand_features_5_11_7_15_addclass.user_id = lmn_user_features_5_11_7_15_addclass.user_id

left outer join
lmn_brand_features_5_11_7_15_addclass
on 	lmn_user_brand_features_5_11_7_15_addclass.brand_id = lmn_brand_features_5_11_7_15_addclass.brand_id		

where actions_sum is not null and  actions_by is not null   ; --fliter
"""""")



",python
"#test
import threading,time

from bot import Bot
bots = [Bot() for x in range(10)] 

netid = 'tcj29'
password = 'tc2013j@cony'

classes =      ['10803','4468', '9190', '16587', '5741', '6133','13290','12576', '11161', '11166' ]
disscussions = ['10821', ' '   , '9191', ' '     , '5743', '6140', ' '    ,'12578', '11165', ' '    ]
labs =         ['10804',  ' '  ,   ' '  , '16588',   ' '  , '6180', ' '    , ' '    ,   ' '   , '11168' ]

for x in range (0, len(classes)):
          t = threading.Thread(target=bots[x].addClass, args=(netid ,password ,classes[x], disscussions[x], labs[x]), kwargs = {'test': True, 'hidden': True}  )
          t.daemon = True
          t.start()
    #thread.start_new_thread(bots[x].addClass, args=(netid ,password ,classes[x], disscussions[x], labs[x]), kwargs = {'test': True, 'hidden': True}  )
	#bots[x].addClass(netid ,password ,classes[x], disscussions[x], labs[x],  test = True, hidden = True) 

time.sleep(60)

'''
bots[0].addClass('tcj29','tc2013j@cony','10803', '10821','10804', test = True)  #Single Class

bots[1].addClass('tcj29','tc2013j@cony','4468', '','', test = True)  #Single Class

bots[2].addClass('tcj29','tc2013j@cony','9190','9191','', test = True)  #Disscusion no Lab



bots[3].addClass('tcj29','tc2013j@cony','16587','','16588', test = True)  #Lab no Dicussion
#b.addClass('tcj29','tc2013j@cony','16587','','16594', test = True)  #Lab no Dicussion

bots[4].addClass('tcj29','tc2013j@cony','5741','5743','', test = True)  #Lab no Dicussion

bots[5].addClass('tcj29','tc2013j@cony','6133', '6140','6180', test = True)  #Disscussion and Lab  FIRST PAGE
#b.addClass('tcj29','tc2013j@cony','6133', '6147','6190', test = True)  #Disscussion and Lab	 SECOND PAGE
#
#b.addClass('tcj29','tc2013j@cony','6133', '7927','6195', test = True)  #Disscussion and Lab  LAST PAGE

'''",python
"/*
 * Copyright 2012-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.springframework.boot.loader.tools;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.TemporaryFolder;

import org.springframework.boot.loader.tools.MainClassFinder.MainClass;
import org.springframework.boot.loader.tools.MainClassFinder.MainClassCallback;
import org.springframework.boot.loader.tools.sample.AnnotatedClassWithMainMethod;
import org.springframework.boot.loader.tools.sample.ClassWithMainMethod;
import org.springframework.boot.loader.tools.sample.ClassWithoutMainMethod;

import static org.assertj.core.api.Assertions.assertThat;

/**
 * Tests for {@link MainClassFinder}.
 *
 * @author Phillip Webb
 */
public class MainClassFinderTests {

	@Rule
	public TemporaryFolder temporaryFolder = new TemporaryFolder();

	@Rule
	public ExpectedException thrown = ExpectedException.none();

	private TestJarFile testJarFile;

	@Before
	public void setup() throws IOException {
		this.testJarFile = new TestJarFile(this.temporaryFolder);
	}

	@Test
	public void findMainClassInJar() throws Exception {
		this.testJarFile.addClass(""B.class"", ClassWithMainMethod.class);
		this.testJarFile.addClass(""A.class"", ClassWithoutMainMethod.class);
		String actual = MainClassFinder.findMainClass(this.testJarFile.getJarFile(), """");
		assertThat(actual).isEqualTo(""B"");
	}

	@Test
	public void findMainClassInJarSubFolder() throws Exception {
		this.testJarFile.addClass(""a/b/c/D.class"", ClassWithMainMethod.class);
		this.testJarFile.addClass(""a/b/c/E.class"", ClassWithoutMainMethod.class);
		this.testJarFile.addClass(""a/b/F.class"", ClassWithoutMainMethod.class);
		String actual = MainClassFinder.findMainClass(this.testJarFile.getJarFile(), """");
		assertThat(actual).isEqualTo(""a.b.c.D"");
	}

	@Test
	public void usesBreadthFirstJarSearch() throws Exception {
		this.testJarFile.addClass(""a/B.class"", ClassWithMainMethod.class);
		this.testJarFile.addClass(""a/b/c/E.class"", ClassWithMainMethod.class);
		String actual = MainClassFinder.findMainClass(this.testJarFile.getJarFile(), """");
		assertThat(actual).isEqualTo(""a.B"");
	}

	@Test
	public void findSingleJarSearch() throws Exception {
		this.testJarFile.addClass(""a/B.class"", ClassWithMainMethod.class);
		this.testJarFile.addClass(""a/b/c/E.class"", ClassWithMainMethod.class);
		this.thrown.expect(IllegalStateException.class);
		this.thrown.expectMessage(""Unable to find a single main class ""
				+ ""from the following candidates [a.B, a.b.c.E]"");
		MainClassFinder.findSingleMainClass(this.testJarFile.getJarFile(), """");
	}

	@Test
	public void findSingleJarSearchPrefersAnnotatedMainClass() throws Exception {
		this.testJarFile.addClass(""a/B.class"", ClassWithMainMethod.class);
		this.testJarFile.addClass(""a/b/c/E.class"", AnnotatedClassWithMainMethod.class);
		String mainClass = MainClassFinder.findSingleMainClass(
				this.testJarFile.getJarFile(), """",
				""org.springframework.boot.loader.tools.sample.SomeApplication"");
		assertThat(mainClass).isEqualTo(""a.b.c.E"");
	}

	@Test
	public void findMainClassInJarSubLocation() throws Exception {
		this.testJarFile.addClass(""a/B.class"", ClassWithMainMethod.class);
		this.testJarFile.addClass(""a/b/c/E.class"", ClassWithMainMethod.class);
		String actual = MainClassFinder.findMainClass(this.testJarFile.getJarFile(),
				""a/"");
		assertThat(actual).isEqualTo(""B"");

	}

	@Test
	public void findMainClassInFolder() throws Exception {
		this.testJarFile.addClass(""B.class"", ClassWithMainMethod.class);
		this.testJarFile.addClass(""A.class"", ClassWithoutMainMethod.class);
		String actual = MainClassFinder.findMainClass(this.testJarFile.getJarSource());
		assertThat(actual).isEqualTo(""B"");
	}

	@Test
	public void findMainClassInSubFolder() throws Exception {
		this.testJarFile.addClass(""a/b/c/D.class"", ClassWithMainMethod.class);
		this.testJarFile.addClass(""a/b/c/E.class"", ClassWithoutMainMethod.class);
		this.testJarFile.addClass(""a/b/F.class"", ClassWithoutMainMethod.class);
		String actual = MainClassFinder.findMainClass(this.testJarFile.getJarSource());
		assertThat(actual).isEqualTo(""a.b.c.D"");
	}

	@Test
	public void usesBreadthFirstFolderSearch() throws Exception {
		this.testJarFile.addClass(""a/B.class"", ClassWithMainMethod.class);
		this.testJarFile.addClass(""a/b/c/E.class"", ClassWithMainMethod.class);
		String actual = MainClassFinder.findMainClass(this.testJarFile.getJarSource());
		assertThat(actual).isEqualTo(""a.B"");
	}

	@Test
	public void findSingleFolderSearch() throws Exception {
		this.testJarFile.addClass(""a/B.class"", ClassWithMainMethod.class);
		this.testJarFile.addClass(""a/b/c/E.class"", ClassWithMainMethod.class);
		this.thrown.expect(IllegalStateException.class);
		this.thrown.expectMessage(""Unable to find a single main class ""
				+ ""from the following candidates [a.B, a.b.c.E]"");
		MainClassFinder.findSingleMainClass(this.testJarFile.getJarSource());
	}

	@Test
	public void findSingleFolderSearchPrefersAnnotatedMainClass() throws Exception {
		this.testJarFile.addClass(""a/B.class"", ClassWithMainMethod.class);
		this.testJarFile.addClass(""a/b/c/E.class"", AnnotatedClassWithMainMethod.class);
		String mainClass = MainClassFinder.findSingleMainClass(
				this.testJarFile.getJarSource(),
				""org.springframework.boot.loader.tools.sample.SomeApplication"");
		assertThat(mainClass).isEqualTo(""a.b.c.E"");
	}

	@Test
	public void doWithFolderMainMethods() throws Exception {
		this.testJarFile.addClass(""a/b/c/D.class"", ClassWithMainMethod.class);
		this.testJarFile.addClass(""a/b/c/E.class"", ClassWithoutMainMethod.class);
		this.testJarFile.addClass(""a/b/F.class"", ClassWithoutMainMethod.class);
		this.testJarFile.addClass(""a/b/G.class"", ClassWithMainMethod.class);
		ClassNameCollector callback = new ClassNameCollector();
		MainClassFinder.doWithMainClasses(this.testJarFile.getJarSource(), callback);
		assertThat(callback.getClassNames().toString()).isEqualTo(""[a.b.G, a.b.c.D]"");
	}

	@Test
	public void doWithJarMainMethods() throws Exception {
		this.testJarFile.addClass(""a/b/c/D.class"", ClassWithMainMethod.class);
		this.testJarFile.addClass(""a/b/c/E.class"", ClassWithoutMainMethod.class);
		this.testJarFile.addClass(""a/b/F.class"", ClassWithoutMainMethod.class);
		this.testJarFile.addClass(""a/b/G.class"", ClassWithMainMethod.class);
		ClassNameCollector callback = new ClassNameCollector();
		MainClassFinder.doWithMainClasses(this.testJarFile.getJarFile(), null, callback);
		assertThat(callback.getClassNames().toString()).isEqualTo(""[a.b.G, a.b.c.D]"");
	}

	private static class ClassNameCollector implements MainClassCallback<Object> {

		private final List<String> classNames = new ArrayList<String>();

		@Override
		public Object doWith(MainClass mainClass) {
			this.classNames.add(mainClass.getName());
			return null;
		}

		public List<String> getClassNames() {
			return this.classNames;
		}

	}

}
",java
"package fr.unice.polytech.isa.resort.integration;

import fr.unice.polytech.isa.accounts.components.CardRegistryBean;
import fr.unice.polytech.isa.accounts.components.CustomerLinkerBean;
import fr.unice.polytech.isa.accounts.components.CustomerRegistryBean;
import fr.unice.polytech.isa.accounts.components.PassRegistryBean;
import fr.unice.polytech.isa.accounts.exceptions.CardNotFoundException;
import fr.unice.polytech.isa.accounts.exceptions.CustomerNotFoundException;
import fr.unice.polytech.isa.accounts.interfaces.*;
import fr.unice.polytech.isa.common.entities.accounts.Customer;
import fr.unice.polytech.isa.common.entities.shopping.catalog.ItemCatalog;
import fr.unice.polytech.isa.common.entities.shopping.catalog.ItemType;
import fr.unice.polytech.isa.common.entities.items.ItemTypeName;
import fr.unice.polytech.isa.common.entities.items.SuperCartex;
import fr.unice.polytech.isa.common.exceptions.*;
import fr.unice.polytech.isa.notifications.components.NotificationProcessorBean;
import fr.unice.polytech.isa.notifications.components.NotificationRegistryBean;
import fr.unice.polytech.isa.notifications.components.NotificationSchedulerBean;
import fr.unice.polytech.isa.notifications.interfaces.NotificationProcessing;
import fr.unice.polytech.isa.notifications.interfaces.NotificationRegistration;
import fr.unice.polytech.isa.notifications.interfaces.NotificationScheduling;
import fr.unice.polytech.isa.payment.components.BillingBean;
import fr.unice.polytech.isa.payment.interfaces.PaymentProcessor;
import fr.unice.polytech.isa.resort.components.*;
import fr.unice.polytech.isa.resort.exceptions.ResortNotFoundException;
import fr.unice.polytech.isa.resort.exceptions.SkiLiftNotFoundException;
import fr.unice.polytech.isa.resort.exceptions.SkiTrailNotFoundException;
import fr.unice.polytech.isa.resort.exceptions.UnavailableNameException;
import fr.unice.polytech.isa.resort.interfaces.*;
import fr.unice.polytech.isa.shopping.components.CartManagerBean;
import fr.unice.polytech.isa.shopping.components.CatalogBean;
import fr.unice.polytech.isa.shopping.components.DiscountBean;
import fr.unice.polytech.isa.shopping.interfaces.*;
import fr.unice.polytech.isa.statistics.components.presence.PresenceStatisticsFindingBean;
import fr.unice.polytech.isa.statistics.components.presence.PresenceStatisticsRegistryBean;
import fr.unice.polytech.isa.statistics.components.presence.PresenceStatisticsUpdateBean;
import fr.unice.polytech.isa.statistics.interceptors.CardCounter;
import fr.unice.polytech.isa.statistics.interfaces.presence.PresenceStatisticsFinder;
import fr.unice.polytech.isa.statistics.interfaces.presence.PresenceStatisticsRegistration;
import fr.unice.polytech.isa.statistics.interfaces.presence.PresenceStatisticsUpdater;
import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.arquillian.transaction.api.annotation.TransactionMode;
import org.jboss.arquillian.transaction.api.annotation.Transactional;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.asset.ClassLoaderAsset;
import org.jboss.shrinkwrap.api.spec.JavaArchive;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;

import javax.ejb.EJB;
import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.UserTransaction;
import java.time.LocalDateTime;

import static fr.unice.polytech.isa.resort.ResortTestUtil.*;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

@RunWith(Arquillian.class)
@Transactional(TransactionMode.COMMIT)
public class SuperCartexIntegrationTest {
    @EJB
    private CreditCardRegistration creditCardRegistration;

    @EJB
    private CatalogModifier catalogModifier;

    @EJB
    private CatalogExplorer catalogExplorer;

    @EJB
    private SuperCartexProcessor superCartexProcessor;

    @EJB
    private CardRegistration cardRegistration;

    @EJB
    private CardFinder cardFinder;

    @EJB
    private CardChecker cardChecker;

    @EJB
    private ResortRegister resortRegister;

    @EJB
    private ResortFinder resortFinder;

    @EJB
    private SkiLiftRegister skiLiftRegister;

    @EJB
    private SkiLiftFinder skiLiftFinder;

    @PersistenceContext private EntityManager entityManager;
    @Inject
    private UserTransaction utx;
    private Customer marcel_account;
    private String resortId;

    @Deployment
    public static JavaArchive createDeployment() {
        return ShrinkWrap.create(JavaArchive.class)
            //Add this server's classes
            .addClass(AccessControllerBean.class)
            .addClass(AccessRegisterBean.class)
            .addClass(ResortRegistryBean.class)
            .addClass(SkiLiftRegistryBean.class)
            .addClass(SkiTrailRegistryBean.class)
            .addClass(ResortNotFoundException.class)
            .addClass(SkiLiftNotFoundException.class)
            .addClass(SkiTrailNotFoundException.class)
            .addClass(UnavailableNameException.class)
            .addClass(AccessRegister.class)
            .addClass(CardChecker.class)
            .addClass(ResortFinder.class)
            .addClass(ResortRegister.class)
            .addClass(SkiLiftFinder.class)
            .addClass(SkiLiftRegister.class)
            .addClass(SkiTrailFinder.class)
            .addClass(SkiTrailRegister.class)
            //Account server's classes
            .addClass(CustomerRegistration.class)
            .addClass(CustomerRegistryBean.class)
            .addClass(CardRegistration.class)
            .addClass(CardFinder.class)
            .addClass(CardRegistryBean.class)
            .addClass(PassRegistration.class)
            .addClass(CustomerPassFinder.class)
            .addClass(PassRegistryBean.class)
            .addClass(CustomerCardLinker.class)
            .addClass(CustomerLinkerBean.class)
            //Shopping server's classes
            .addClass(CatalogModifier.class)
            .addClass(CatalogBean.class)
            .addClass(SuperCartexProcessor.class)
            .addClass(CartManagerBean.class)
            .addClass(SuperCartexDiscount.class)
            .addClass(DiscountBean.class)
            //Payment server's classes
            .addClass(PaymentProcessor.class)
            .addClass(BillingBean.class)
            //Statistics server's classes
            .addClass(CardCounter.class)
            .addClass(PresenceStatisticsUpdater.class)
            .addClass(PresenceStatisticsUpdateBean.class)
            .addClass(PresenceStatisticsFinder.class)
            .addClass(PresenceStatisticsFindingBean.class)
            .addClass(PresenceStatisticsRegistration.class)
            .addClass(PresenceStatisticsRegistryBean.class)
            //Add the notification server's classes
            .addClass(NotificationRegistration.class)
            .addClass(NotificationRegistryBean.class)
            .addClass(NotificationScheduling.class)
            .addClass(NotificationSchedulerBean.class)
            .addClass(NotificationProcessing.class)
            .addClass(NotificationProcessorBean.class)
            //Persistence manifest
            .addAsManifestResource(new ClassLoaderAsset(""META-INF/persistence.xml""), ""persistence.xml"");
    }

    @Before
    public void setUpContext() throws ItemAlreadyExistException, UnavailableNameException, ResortNotFoundException {
        marcel_account = new Customer(MARCEL_FIRSTNAME, MARCEL_LASTNAME, MARCEL_EMAIL);
        resortRegister.registerResort(RESORT_NAME, RESORT_EMAIL, OPEN, RESORT_CITY_NAME);
        resortId = resortFinder.findByName(RESORT_NAME).getId();
        skiLiftRegister.registerSkiLift(resortId, SKI_LIFT_NAME, OPEN);
        entityManager.persist(marcel_account);
        initCatalog();
    }

    public void initCatalog() throws ItemAlreadyExistException {
        catalogModifier.addCard(SUPER_CARTEX, SUPERCARTEX_CARD, PRICE_10, PUBLIC_ITEM);
        catalogModifier.addPass(SUPER_ORIGINAL_PASS, PRICE_10, PRICE_10, DAYS_1, PRIVATE_ITEM);
        catalogModifier.addPass(SUPER_FREE_HOUR_PASS, PRICE_0, PRICE_0, HOURS_1, PRIVATE_ITEM);
        catalogModifier.addPass(SUPER_FREE_EIGHTH, PRICE_0, PRICE_0, DAYS_1, PRIVATE_ITEM);
    }


    @Test
    public void checkSuperCartex() throws CustomerNotFoundException, PaymentException, PassNotFoundException, NoCreditCardException, CardNotFoundException, EmptyCartException, UnknownCatalogEntryException, NullQuantityException, ResortNotFoundException, SkiLiftNotFoundException {
        cardRegistration.addCard(MARCEL_EMAIL, new ItemType(SUPER_CARTEX, PRICE_10, ItemTypeName.SUPERCARTEX));
        SuperCartex superCartex = (SuperCartex) cardFinder.findSuperCartexCards().get(0);
        assertTrue(cardChecker.checkCard(skiLiftFinder.findByName(resortId, SKI_LIFT_NAME), superCartex)); //first hour
        assertEquals(SUPER_FREE_HOUR_PASS, superCartex.getPass().getType().getName());
        creditCardRegistration.creditCardRegistry(marcel_account, MARCEL_LASTNAME, CREDIT_CARD_NO, CVV, EXPIRY_DATE, SAVE);
        assertTrue(superCartexProcessor.processSuperCartex(superCartex)); //pay original pass
        assertEquals(SUPER_ORIGINAL_PASS, superCartex.getPass().getType().getName());
        superCartex.setFirstSwipe(LocalDateTime.now().minusDays(7));
        assertTrue(superCartexProcessor.processSuperCartex(superCartex)); //free eighth day pass
        assertEquals(SUPER_FREE_EIGHTH, superCartex.getPass().getType().getName());

    }

    @After
    public void cleaningUp() throws Exception {
        utx.begin();
        marcel_account = entityManager.merge(marcel_account);
        entityManager.remove(marcel_account);
        for (ItemCatalog c : catalogExplorer.displayCatalog()){
            ItemCatalog item  = entityManager.merge(c);
            entityManager.remove(item);
        }
        for (ItemCatalog c : catalogExplorer.displayPrivateCatalog()){
            ItemCatalog item  = entityManager.merge(c);
            entityManager.remove(item);
        }
        entityManager.remove(resortFinder.findById(resortId));
        marcel_account = null;
        utx.commit();
    }
}
",java
"/*
 * Copyright (C) 2008-2010 by Holger Arndt
 *
 * This file is part of the Universal Java Matrix Package (UJMP).
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership and licensing.
 *
 * UJMP is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * UJMP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with UJMP; if not, write to the
 * Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,
 * Boston, MA  02110-1301  USA
 */

package org.ujmp.core.util.matrices;

import java.util.ArrayList;
import java.util.List;

import org.ujmp.core.Matrix;
import org.ujmp.core.MatrixFactory;
import org.ujmp.core.enums.ValueType;
import org.ujmp.core.stringmatrix.stub.AbstractDenseStringMatrix2D;
import org.ujmp.core.util.AbstractPlugin;

public class UJMPPluginsMatrix extends AbstractDenseStringMatrix2D {
	private static final long serialVersionUID = 9076856922668700140L;

	private final List<String> classes = new ArrayList<String>();

	private Matrix matrix = null;

	public UJMPPluginsMatrix() {
		addClass(""ujmp-core"");
		addClass(""ujmp-gui"");
		addClass(""ujmp-colt"");
		addClass(""ujmp-commonsmath"");
		addClass(""ujmp-ehcache"");
		addClass(""ujmp-ejml"");
		addClass(""ujmp-hadoop"");
		addClass(""ujmp-itext"");
		addClass(""ujmp-jackcess"");
		addClass(""ujmp-jama"");
		addClass(""ujmp-jampack"");
		addClass(""ujmp-jblas"");
		addClass(""ujmp-jbpcafill"");
		addClass(""ujmp-jlinalg"");
		addClass(""ujmp-jdbc"");
		addClass(""ujmp-jexcelapi"");
		addClass(""ujmp-jfreechart"");
		addClass(""ujmp-jmatharray"");
		addClass(""ujmp-jmathplot"");
		addClass(""ujmp-jmatio"");
		addClass(""ujmp-jmatrices"");
		addClass(""ujmp-jsci"");
		addClass(""ujmp-jscience"");
		addClass(""ujmp-jung"");
		addClass(""ujmp-lsimpute"");
		addClass(""ujmp-lucene"");
		addClass(""ujmp-mail"");
		addClass(""ujmp-mantissa"");
		addClass(""ujmp-mtj"");
		addClass(""ujmp-ojalgo"");
		addClass(""ujmp-orbital"");
		addClass(""ujmp-owlpack"");
		addClass(""ujmp-parallelcolt"");
		addClass(""ujmp-pdfbox"");
		addClass(""ujmp-sst"");
		addClass(""ujmp-vecmath"");
		refresh();
		setLabel(""UJMP Plugins"");
		setColumnLabel(0, ""Name"");
		setColumnLabel(1, ""Available"");
		setColumnLabel(2, ""Description"");
		setColumnLabel(3, ""Dependencies"");
		setColumnLabel(4, ""Status"");
	}

	public void refresh() {
		matrix = MatrixFactory.dense(ValueType.STRING, classes.size(), 5);

		int r = 0;

		for (String s : classes) {

			matrix.setAsString(s, r, 0);

			Class<?> cl = null;
			if (s.startsWith(""ujmp"")) {
				try {
					cl = Class.forName(""org.ujmp."" + s.substring(5) + "".Plugin"");
				} catch (ClassNotFoundException e) {
				}
			} else {
				try {
					cl = Class.forName(""org.jdmp."" + s.substring(5) + "".Plugin"");
				} catch (ClassNotFoundException e) {
				}
			}

			AbstractPlugin o = null;
			if (cl != null) {
				try {
					o = (AbstractPlugin) cl.newInstance();
				} catch (Exception e) {
				}
			}

			if (o != null) {
				try {
					matrix.setAsString(""yes"", r, 1);
					matrix.setAsString(o.getDescription(), r, 2);
					matrix.setAsString("""" + o.getDependencies(), r, 3);
					matrix.setAsString(o.getStatus(), r, 4);
				} catch (Throwable t) {
					matrix.setAsString(""no"", r, 1);
					matrix.setAsString(""n/a"", r, 2);
					matrix.setAsString(""n/a"", r, 3);
					matrix.setAsString(t.getMessage(), r, 4);
				}
			} else {
				matrix.setAsString(""no"", r, 1);
				matrix.setAsString(""n/a"", r, 2);
				matrix.setAsString(""n/a"", r, 3);
				matrix.setAsString(""n/a"", r, 4);
			}

			r++;

		}
	}

	protected void addClass(String c) {
		classes.add(c);
	}

	public String getString(long row, long column) {
		return matrix.getAsString(row, column);
	}

	public void setString(String value, long row, long column) {
	}

	public long[] getSize() {
		return matrix.getSize();
	}

}
",java
"/*******************************************************************************
 * Copyright (c) 2006 - 2011 SJRJ.
 * 
 *     This file is part of SIGA.
 * 
 *     SIGA is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 * 
 *     SIGA is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 * 
 *     You should have received a copy of the GNU General Public License
 *     along with SIGA.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package br.gov.jfrj.siga.ex.util;

import java.io.File;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.HashMap;
import java.util.Map;
import java.util.TreeMap;

import junit.framework.TestCase;
import br.gov.jfrj.siga.cp.CpPapel;
import br.gov.jfrj.siga.dp.CpOrgaoUsuario;
import br.gov.jfrj.siga.dp.DpCargo;
import br.gov.jfrj.siga.dp.DpFuncaoConfianca;
import br.gov.jfrj.siga.dp.DpLotacao;
import br.gov.jfrj.siga.dp.DpPessoa;
import br.gov.jfrj.siga.ex.ExDocumento;
import br.gov.jfrj.siga.ex.ExMovimentacao;
import br.gov.jfrj.siga.ex.util.FuncoesEL;
import br.gov.jfrj.siga.ex.util.ProcessadorModeloFreemarker;
import br.gov.jfrj.siga.hibernate.ExDao;
import br.gov.jfrj.siga.model.Diagram;
import freemarker.template.Configuration;
import freemarker.template.DefaultObjectWrapper;
import freemarker.template.Template;

public class ModeloTest extends TestCase {

	private Configuration cfg;

	public ModeloTest() throws Exception {
		cfg = new Configuration();
		String s = cfg.getVersionNumber();
		// Specify the data source where the template files come from.
		// Here I set a file directory for it:
		cfg.setDirectoryForTemplateLoading(new File(
				""src/main/resources/br/gov/jfrj/siga/ex/util/test""));
		// Specify how templates will see the data-model. This is an
		// advanced
		// topic...
		// but just use this:
		cfg.setObjectWrapper(new DefaultObjectWrapper());
		cfg.setWhitespaceStripping(true);
	}

	public void testGeraModelo() throws Exception {
		if (true)
			return;
		ProcessadorModeloFreemarker p = new ProcessadorModeloFreemarker();

		Map<String, Object> attrs = new TreeMap<String, Object>();
		Map<String, Object> params = new TreeMap<String, Object>();

		ExDocumento doc = new ExDocumento();
		doc.setOrgaoUsuario(ExDao.getInstance().consultar(1L,
				CpOrgaoUsuario.class, false));
		ExMovimentacao mov = new ExMovimentacao();
		attrs.put(""doc"", doc);
		attrs.put(""mov"", mov);
		attrs.put(""mob"", mov.getExMobil());
		attrs.put(""template"", ""teste freemarker: ${param.doc!}."");

		params.put(""processar_modelo"", ""1"");
		if (doc != null && doc.getIdDoc() != null)
			params.put(""idDoc"", doc.getIdDoc().toString());
		if (mov != null && mov.getIdMov() != null) {
			params.put(""id"", mov.getIdMov().toString());
		}

		String s = p.processarModelo(doc.getOrgaoUsuario(), attrs, params);
		System.out.println(s);
	}

	public void testGeraModeloAntigo() throws Exception {
		if (true)
			return;
		// Create the root hash
		Map root = new HashMap();
		Map param = new HashMap();
		root.put(""root"", root);
		root.put(""param"", param);
		root.put(""entrevista"", false);
		root.put(""formulario"", true);
		root.put(""documento"", false);
		root.put(""assinatura"", false);
		root.put(""finalizacao"", false);
		root.put(""func"", new FuncoesEL());

		Template temp = cfg.getTemplate(""memorando.ftl"");

		try (Writer out = new OutputStreamWriter(System.out)) {
			temp.process(root, out);
			out.flush();
		}
	}

	public void testGeraDesenhoCp() throws Exception {
		Diagram d = new Diagram();
		d.setfMergeWithAbstractClass(true);
		boolean fI = true;

		d.addClass(DpPessoa.class, fI);
		d.addClass(DpLotacao.class, fI);
		d.addClass(DpFuncaoConfianca.class, fI);
		d.addClass(DpCargo.class, fI);
		d.addClass(CpPapel.class, fI);
		d.addClass(CpOrgaoUsuario.class, fI);

		d.addClass(br.gov.jfrj.siga.dp.CpOrgao.class, fI);
		d.addClass(br.gov.jfrj.siga.dp.DpSubstituicao.class, fI);
		d.addClass(br.gov.jfrj.siga.dp.CpFeriado.class, fI);
		d.addClass(br.gov.jfrj.siga.dp.CpOcorrenciaFeriado.class, fI);
		d.addClass(br.gov.jfrj.siga.dp.CpAplicacaoFeriado.class, fI);
		d.addClass(br.gov.jfrj.siga.dp.CpLocalidade.class, fI);
		d.addClass(br.gov.jfrj.siga.dp.CpUF.class, fI);
		d.addClass(br.gov.jfrj.siga.dp.CpPersonalizacao.class, fI);
		d.addClass(br.gov.jfrj.siga.cp.CpConfiguracao.class, fI);
		d.addClass(br.gov.jfrj.siga.cp.CpServico.class, fI);
		d.addClass(br.gov.jfrj.siga.cp.CpTipoGrupo.class, fI);
		d.addClass(br.gov.jfrj.siga.cp.CpGrupo.class, fI);
		d.addClass(br.gov.jfrj.siga.dp.CpTipoLotacao.class, fI);
		d.addClass(br.gov.jfrj.siga.cp.CpTipoPapel.class, fI);
		d.addClass(br.gov.jfrj.siga.cp.CpPapel.class, fI);
		d.addClass(br.gov.jfrj.siga.cp.CpTipoServico.class, fI);
		d.addClass(br.gov.jfrj.siga.cp.CpTipoIdentidade.class, fI);
		d.addClass(br.gov.jfrj.siga.cp.CpIdentidade.class, fI);

		d.createGraphML(""target/siga.graphml"", true, false);
	}

	public void testGeraDesenhoEx() throws Exception {
		Diagram d = new Diagram();
		d.setfMergeWithAbstractClass(true);
		boolean fI = true;

		d.addClass(DpPessoa.class, fI);
		d.addClass(DpLotacao.class, fI);
		d.addClass(DpFuncaoConfianca.class, fI);
		d.addClass(DpCargo.class, fI);
		d.addClass(CpPapel.class, fI);
		d.addClass(CpOrgaoUsuario.class, fI);
		d.addClass(br.gov.jfrj.siga.dp.CpOrgao.class, fI);
		d.addClass(br.gov.jfrj.siga.dp.DpSubstituicao.class, fI);
		d.addClass(br.gov.jfrj.siga.dp.CpFeriado.class, fI);
		d.addClass(br.gov.jfrj.siga.dp.CpOcorrenciaFeriado.class, fI);
		d.addClass(br.gov.jfrj.siga.dp.CpAplicacaoFeriado.class, fI);
		d.addClass(br.gov.jfrj.siga.dp.CpLocalidade.class, fI);
		d.addClass(br.gov.jfrj.siga.dp.CpUF.class, fI);
		d.addClass(br.gov.jfrj.siga.dp.CpPersonalizacao.class, fI);
		d.addClass(br.gov.jfrj.siga.cp.CpConfiguracao.class, fI);
		d.addClass(br.gov.jfrj.siga.cp.CpServico.class, fI);
		d.addClass(br.gov.jfrj.siga.cp.CpTipoGrupo.class, fI);
		d.addClass(br.gov.jfrj.siga.cp.CpGrupo.class, fI);
		d.addClass(br.gov.jfrj.siga.dp.CpTipoLotacao.class, fI);
		d.addClass(br.gov.jfrj.siga.cp.CpTipoPapel.class, fI);
		d.addClass(br.gov.jfrj.siga.cp.CpPapel.class, fI);
		d.addClass(br.gov.jfrj.siga.cp.CpTipoServico.class, fI);
		d.addClass(br.gov.jfrj.siga.cp.CpTipoIdentidade.class, fI);
		d.addClass(br.gov.jfrj.siga.cp.CpIdentidade.class, fI);

		d.addClass(br.gov.jfrj.siga.ex.ExMobil.class, fI);
		d.addClass(br.gov.jfrj.siga.ex.ExDocumento.class, fI);
		d.addClass(br.gov.jfrj.siga.ex.ExFormaDocumento.class, fI);
		d.addClass(br.gov.jfrj.siga.ex.ExConfiguracao.class, fI);
		d.addClass(br.gov.jfrj.siga.ex.ExClassificacao.class, fI);
		d.addClass(br.gov.jfrj.siga.ex.ExModelo.class, fI);
		d.addClass(br.gov.jfrj.siga.ex.ExTemporalidade.class, fI);
		d.addClass(br.gov.jfrj.siga.ex.ExTipoDespacho.class, fI);
		d.addClass(br.gov.jfrj.siga.ex.ExTipoDestinacao.class, fI);
		d.addClass(br.gov.jfrj.siga.ex.ExTipoDocumento.class, fI);
		d.addClass(br.gov.jfrj.siga.ex.ExNivelAcesso.class, fI);
		d.addClass(br.gov.jfrj.siga.ex.ExEstadoDoc.class, fI);
		d.addClass(br.gov.jfrj.siga.ex.ExPreenchimento.class, fI);
		d.addClass(br.gov.jfrj.siga.ex.ExTipoFormaDoc.class, fI);
		d.addClass(br.gov.jfrj.siga.ex.ExVia.class, fI);
		d.addClass(br.gov.jfrj.siga.ex.ExMovimentacao.class, fI);
		d.addClass(br.gov.jfrj.siga.ex.ExTpDocPublicacao.class, fI);
		d.addClass(br.gov.jfrj.siga.ex.ExTipoMobil.class, fI);
		d.addClass(br.gov.jfrj.siga.ex.BIE.ExBoletimDoc.class, fI);
		d.addClass(br.gov.jfrj.siga.ex.ExPapel.class, fI);
		d.addClass(br.gov.jfrj.siga.ex.ExEmailNotificacao.class, fI);
		d.addClass(br.gov.jfrj.siga.dp.CpMarcador.class, fI);
		d.addClass(br.gov.jfrj.siga.dp.CpTipoMarca.class, fI);

		d.addClass(br.gov.jfrj.siga.ex.ExMarca.class, fI);
		d.addClass(br.gov.jfrj.siga.dp.CpMarca.class, fI);

		d.createGraphML(""target/siga-ex.graphml"", false, false);
	}

}
",java
"/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * ""License""); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.hadoop.test;

import org.apache.hadoop.fs.DFSCIOTest;
import org.apache.hadoop.fs.DistributedFSCheck;
import org.apache.hadoop.fs.JHLogAnalyzer;
import org.apache.hadoop.fs.TestDFSIO;
import org.apache.hadoop.fs.TestFileSystem;
import org.apache.hadoop.fs.loadGenerator.DataGenerator;
import org.apache.hadoop.fs.loadGenerator.LoadGenerator;
import org.apache.hadoop.fs.loadGenerator.LoadGeneratorMR;
import org.apache.hadoop.fs.loadGenerator.StructureGenerator;
import org.apache.hadoop.fs.slive.SliveTest;
import org.apache.hadoop.hdfs.NNBench;
import org.apache.hadoop.hdfs.NNBenchWithoutMR;
import org.apache.hadoop.io.FileBench;
import org.apache.hadoop.io.TestSequenceFile;
import org.apache.hadoop.mapred.BigMapOutput;
import org.apache.hadoop.mapred.GenericMRLoadGenerator;
import org.apache.hadoop.mapred.MRBench;
import org.apache.hadoop.mapred.ReliabilityTest;
import org.apache.hadoop.mapred.SortValidator;
import org.apache.hadoop.mapred.TestMapRed;
import org.apache.hadoop.mapred.TestSequenceFileInputFormat;
import org.apache.hadoop.mapred.TestTextInputFormat;
import org.apache.hadoop.mapred.ThreadedMapBenchmark;
import org.apache.hadoop.mapreduce.FailJob;
import org.apache.hadoop.mapreduce.GrowingSleepJob;
import org.apache.hadoop.mapreduce.LargeSorter;
import org.apache.hadoop.mapreduce.MiniHadoopClusterManager;
import org.apache.hadoop.mapreduce.SleepJob;
import org.apache.hadoop.mapreduce.TimelineServicePerformance;
import org.apache.hadoop.util.ProgramDriver;

/**
 * Driver for Map-reduce tests.
 *
 */
public class MapredTestDriver {

  private ProgramDriver pgd;

  public MapredTestDriver() {
    this(new ProgramDriver());
  }

  public MapredTestDriver(ProgramDriver pgd) {
    this.pgd = pgd;
    try {
      pgd.addClass(""testsequencefile"", TestSequenceFile.class,
      ""A test for flat files of binary key value pairs."");
      pgd.addClass(""threadedmapbench"", ThreadedMapBenchmark.class,
          ""A map/reduce benchmark that compares the performance "" +
          ""of maps with multiple spills over maps with 1 spill"");
      pgd.addClass(""mrbench"", MRBench.class,
          ""A map/reduce benchmark that can create many small jobs"");
      pgd.addClass(""mapredtest"", TestMapRed.class, ""A map/reduce test check."");
      pgd.addClass(""testsequencefileinputformat"",
          TestSequenceFileInputFormat.class,
          ""A test for sequence file input format."");
      pgd.addClass(""testtextinputformat"", TestTextInputFormat.class,
          ""A test for text input format."");
      pgd.addClass(""testmapredsort"", SortValidator.class,
          ""A map/reduce program that validates the "" +
          ""map-reduce framework's sort."");
      pgd.addClass(""testbigmapoutput"", BigMapOutput.class,
          ""A map/reduce program that works on a very big "" +
          ""non-splittable file and does identity map/reduce"");
      pgd.addClass(""loadgen"", GenericMRLoadGenerator.class,
          ""Generic map/reduce load generator"");
      pgd.addClass(""MRReliabilityTest"", ReliabilityTest.class,
          ""A program that tests the reliability of the MR framework by "" +
          ""injecting faults/failures"");
      pgd.addClass(""fail"", FailJob.class, ""a job that always fails"");
      pgd.addClass(""sleep"", SleepJob.class,
                   ""A job that sleeps at each map and reduce task."");
      pgd.addClass(""gsleep"", GrowingSleepJob.class,
          ""A sleep job whose mappers create 1MB buffer for every record."");
      pgd.addClass(""timelineperformance"", TimelineServicePerformance.class,
                   ""A job that launches mappers to test timeline service "" +
                   ""performance."");
      pgd.addClass(""nnbench"", NNBench.class,
          ""A benchmark that stresses the namenode w/ MR."");
      pgd.addClass(""nnbenchWithoutMR"", NNBenchWithoutMR.class,
          ""A benchmark that stresses the namenode w/o MR."");
      pgd.addClass(""testfilesystem"", TestFileSystem.class,
          ""A test for FileSystem read/write."");
      pgd.addClass(TestDFSIO.class.getSimpleName(), TestDFSIO.class,
          ""Distributed i/o benchmark."");
      pgd.addClass(""DFSCIOTest"", DFSCIOTest.class, """" +
          ""Distributed i/o benchmark of libhdfs."");
      pgd.addClass(""DistributedFSCheck"", DistributedFSCheck.class,
          ""Distributed checkup of the file system consistency."");
      pgd.addClass(""filebench"", FileBench.class,
          ""Benchmark SequenceFile(Input|Output)Format "" +
          ""(block,record compressed and uncompressed), "" +
          ""Text(Input|Output)Format (compressed and uncompressed)"");
      pgd.addClass(JHLogAnalyzer.class.getSimpleName(), JHLogAnalyzer.class,
          ""Job History Log analyzer."");
      pgd.addClass(SliveTest.class.getSimpleName(), SliveTest.class,
          ""HDFS Stress Test and Live Data Verification."");
      pgd.addClass(""minicluster"", MiniHadoopClusterManager.class,
      ""Single process HDFS and MR cluster."");
      pgd.addClass(""largesorter"", LargeSorter.class,
          ""Large-Sort tester"");
      pgd.addClass(""NNloadGenerator"", LoadGenerator.class,
              ""Generate load on Namenode using NN loadgenerator run WITHOUT MR"");
      pgd.addClass(""NNloadGeneratorMR"", LoadGeneratorMR.class,
          ""Generate load on Namenode using NN loadgenerator run as MR job"");
      pgd.addClass(""NNstructureGenerator"", StructureGenerator.class,
          ""Generate the structure to be used by NNdataGenerator"");
      pgd.addClass(""NNdataGenerator"", DataGenerator.class,
          ""Generate the data to be used by NNloadGenerator"");
    } catch(Throwable e) {
      e.printStackTrace();
    }
  }

  public void run(String argv[]) {
    int exitCode = -1;
    try {
      exitCode = pgd.run(argv);
    } catch(Throwable e) {
      e.printStackTrace();
    }
    System.exit(exitCode);
  }

  public static void main(String argv[]){
    new MapredTestDriver().run(argv);
  }
}

",java
"package br.gov.jfrj.siga.gc;

public class DoDiagram {
	static {
		// ClassPool pool = ClassPool.getDefault();
		// CtClass cc;
		// try {
		// cc = pool.get(""br.gov.jfrj.siga.model.Objeto"");
		// cc.setSuperclass(pool.get(""play.db.jpa.GenericModel""));
		// cc.writeFile();
		//
		// } catch (Exception e) {
		// e.printStackTrace();
		// }
		System.out.println(""*** Classe alterada."");
	}

	public static void testGeraDiagramaGC() throws Exception {
		// Diagram d = new Diagram();
		// d.setfMergeWithAbstractClass(true);
		// boolean fI = false;
		//
		// d.addClass(DpPessoa.class, fI, false, false);
		// d.addClass(DpLotacao.class, fI, false, false);
		// d.addClass(CpOrgaoUsuario.class, fI, false, false);
		// d.addClass(CpMarca.class, fI, true, false);
		// d.addClass(CpConfiguracao.class, false, false, false);
		//
		// d.addClass(GcArquivo.class, fI, true, false);
		// d.addClass(GcConfiguracao.class, fI, true, false);
		// d.addClass(GcInformacao.class, fI, true, false);
		// d.addClass(GcMarca.class, fI, true, false);
		// d.addClass(GcMovimentacao.class, fI, true, false);
		// d.addClass(GcTipoInformacao.class, fI, true, false);
		// d.addClass(GcTipoMovimentacao.class, fI, true, false);
		// d.addClass(GcTag.class, fI, true, false);
		//
		// d.createGraphML(""sigagc.graphml"", true, false);
		//
		// GcMarca m = new GcMarca();
		// System.out.println(m.toString());
	}

	/**
	 * @param args
	 * @throws Exception
	 */
	public static void main(String[] args) throws Exception {
		testGeraDiagramaGC();
	}

}
",java
"import generateFiles.GenerateHiveFile;

import org.apache.hadoop.util.ProgramDriver;

import autodeploy.createSSH.CreateSSHTrust;
import autodeploy.createuser.CreateUser;



/**
 * liulu5
 * 2013-9-22
 */
public class HadoopToolDriver {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
	    int exitCode = -1;
	    ProgramDriver pgd = new ProgramDriver();
	    try {
	    	pgd.addClass(""createuser"", CreateUser.class, 
	                   ""Create linux user."");
	      pgd.addClass(""createsshtrust"", CreateSSHTrust.class, 
	                   ""Create SSH trust for cluster node."");
	      pgd.addClass(""generatehivefile"", GenerateHiveFile.class, 
                  		""generate file for hive table."");
	      
//	      pgd.addClass(""aggregatewordcount"", AggregateWordCount.class, 
//	                   ""An Aggregate based map/reduce program that counts the words in the input files."");
//	      pgd.addClass(""aggregatewordhist"", AggregateWordHistogram.class, 
//	                   ""An Aggregate based map/reduce program that computes the histogram of the words in the input files."");
//	      pgd.addClass(""grep"", Grep.class, 
//	                   ""A map/reduce program that counts the matches of a regex in the input."");
//	      pgd.addClass(""randomwriter"", RandomWriter.class, 
//	                   ""A map/reduce program that writes 10GB of random data per node."");
//	      pgd.addClass(""randomtextwriter"", RandomTextWriter.class, 
//	      ""A map/reduce program that writes 10GB of random textual data per node."");
//	      pgd.addClass(""sort"", Sort.class, ""A map/reduce program that sorts the data written by the random writer."");
//	      pgd.addClass(""pi"", PiEstimator.class, ""A map/reduce program that estimates Pi using monte-carlo method."");
//	      pgd.addClass(""pentomino"", DistributedPentomino.class,
//	      ""A map/reduce tile laying program to find solutions to pentomino problems."");
//	      pgd.addClass(""secondarysort"", SecondarySort.class,
//	                   ""An example defining a secondary sort to the reduce."");
//	      pgd.addClass(""sudoku"", Sudoku.class, ""A sudoku solver."");
//	      pgd.addClass(""sleep"", SleepJob.class, ""A job that sleeps at each map and reduce task."");
//	      pgd.addClass(""join"", Join.class, ""A job that effects a join over sorted, equally partitioned datasets"");
//	      pgd.addClass(""multifilewc"", MultiFileWordCount.class, ""A job that counts words from several files."");
//	      pgd.addClass(""dbcount"", DBCountPageView.class, ""An example job that count the pageview counts from a database."");
//	      pgd.addClass(""teragen"", TeraGen.class, ""Generate data for the terasort"");
//	      pgd.addClass(""terasort"", TeraSort.class, ""Run the terasort"");
//	      pgd.addClass(""teravalidate"", TeraValidate.class, ""Checking results of terasort"");
	      pgd.driver(args);
	      
	      // Success
	      exitCode = 0;
	    }
	    catch(Throwable e){
	      e.printStackTrace();
	    }
	    
	    System.exit(exitCode);
	  }

}

",java
"/**
 * ************************************************************************
 * * The contents of this file are subject to the MRPL 1.2
 * * (the  ""License""),  being   the  Mozilla   Public  License
 * * Version 1.1  with a permitted attribution clause; you may not  use this
 * * file except in compliance with the License. You  may  obtain  a copy of
 * * the License at http://www.floreantpos.org/license.html
 * * Software distributed under the License  is  distributed  on  an ""AS IS""
 * * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * * License for the specific  language  governing  rights  and  limitations
 * * under the License.
 * * The Original Code is FLOREANT POS.
 * * The Initial Developer of the Original Code is OROCUBE LLC
 * * All portions are Copyright (C) 2015 OROCUBE LLC
 * * All Rights Reserved.
 * ************************************************************************
 */
package com.floreantpos.model.dao;

import java.sql.Connection;

import org.hibernate.Session;
import org.hibernate.cfg.Configuration;

import com.floreantpos.Database;
import com.floreantpos.config.AppConfig;
import com.floreantpos.model.ActionHistory;
import com.floreantpos.model.AttendenceHistory;
import com.floreantpos.model.CashDrawer;
import com.floreantpos.model.CashDrawerResetHistory;
import com.floreantpos.model.CookingInstruction;
import com.floreantpos.model.Currency;
import com.floreantpos.model.CurrencyBalance;
import com.floreantpos.model.CustomPayment;
import com.floreantpos.model.Customer;
import com.floreantpos.model.DataUpdateInfo;
import com.floreantpos.model.DeliveryAddress;
import com.floreantpos.model.DeliveryCharge;
import com.floreantpos.model.DeliveryConfiguration;
import com.floreantpos.model.DeliveryInstruction;
import com.floreantpos.model.Discount;
import com.floreantpos.model.DrawerAssignedHistory;
import com.floreantpos.model.DrawerPullReport;
import com.floreantpos.model.EmployeeInOutHistory;
import com.floreantpos.model.GlobalConfig;
import com.floreantpos.model.Gratuity;
import com.floreantpos.model.InventoryGroup;
import com.floreantpos.model.InventoryItem;
import com.floreantpos.model.InventoryLocation;
import com.floreantpos.model.InventoryMetaCode;
import com.floreantpos.model.InventoryTransaction;
import com.floreantpos.model.InventoryUnit;
import com.floreantpos.model.InventoryVendor;
import com.floreantpos.model.InventoryWarehouse;
import com.floreantpos.model.KitchenTicket;
import com.floreantpos.model.KitchenTicketItem;
import com.floreantpos.model.MenuCategory;
import com.floreantpos.model.MenuGroup;
import com.floreantpos.model.MenuItem;
import com.floreantpos.model.MenuItemModifierGroup;
import com.floreantpos.model.MenuItemShift;
import com.floreantpos.model.MenuItemSize;
import com.floreantpos.model.MenuModifier;
import com.floreantpos.model.MenuModifierGroup;
import com.floreantpos.model.ModifierMultiplierPrice;
import com.floreantpos.model.Multiplier;
import com.floreantpos.model.PackagingUnit;
import com.floreantpos.model.PayoutReason;
import com.floreantpos.model.PayoutRecepient;
import com.floreantpos.model.PizzaCrust;
import com.floreantpos.model.PizzaModifierPrice;
import com.floreantpos.model.PizzaPrice;
import com.floreantpos.model.PosTransaction;
import com.floreantpos.model.PrinterConfiguration;
import com.floreantpos.model.PrinterGroup;
import com.floreantpos.model.PurchaseOrder;
import com.floreantpos.model.Recepie;
import com.floreantpos.model.RecepieItem;
import com.floreantpos.model.Restaurant;
import com.floreantpos.model.Shift;
import com.floreantpos.model.ShopFloor;
import com.floreantpos.model.ShopFloorTemplate;
import com.floreantpos.model.ShopTable;
import com.floreantpos.model.ShopTableType;
import com.floreantpos.model.TableBookingInfo;
import com.floreantpos.model.Tax;
import com.floreantpos.model.Terminal;
import com.floreantpos.model.TerminalPrinters;
import com.floreantpos.model.Ticket;
import com.floreantpos.model.TicketDiscount;
import com.floreantpos.model.TicketItem;
import com.floreantpos.model.TicketItemDiscount;
import com.floreantpos.model.TicketItemModifier;
import com.floreantpos.model.User;
import com.floreantpos.model.UserPermission;
import com.floreantpos.model.UserType;
import com.floreantpos.model.VirtualPrinter;
import com.floreantpos.model.VoidReason;
import com.floreantpos.model.ZipCodeVsDeliveryCharge;

public abstract class _RootDAO extends com.floreantpos.model.dao._BaseRootDAO {

	/*
	 * If you are using lazy loading, uncomment this Somewhere, you should call
	 * RootDAO.closeCurrentThreadSessions(); public void closeSession (Session
	 * session) { // do nothing here because the session will be closed later }
	 */

	/*
	 * If you are pulling the SessionFactory from a JNDI tree, uncomment this
	 * protected SessionFactory getSessionFactory(String configFile) { // If you
	 * have a single session factory, ignore the configFile parameter //
	 * Otherwise, you can set a meta attribute under the class node called
	 * ""config-file"" which // will be passed in here so you can tell what
	 * session factory an individual mapping file // belongs to return
	 * (SessionFactory) new
	 * InitialContext().lookup(""java:/{SessionFactoryName}""); }
	 */

	public static void initialize(String configFileName, Configuration configuration) {
		com.floreantpos.model.dao._RootDAO.setSessionFactory(configuration.buildSessionFactory());
	}

	public static Configuration getNewConfiguration(String configFileName) {
		Configuration configuration = new Configuration();
		configuration.addClass(ActionHistory.class);
		configuration.addClass(AttendenceHistory.class);
		configuration.addClass(CashDrawerResetHistory.class);
		configuration.addClass(CookingInstruction.class);
		configuration.addClass(Discount.class);
		configuration.addClass(Gratuity.class);
		configuration.addClass(MenuCategory.class);
		configuration.addClass(MenuGroup.class);
		configuration.addClass(MenuItem.class);
		configuration.addClass(MenuItemModifierGroup.class);
		configuration.addClass(MenuItemShift.class);
		configuration.addClass(MenuModifier.class);
		configuration.addClass(MenuModifierGroup.class);
		configuration.addClass(PayoutReason.class);
		configuration.addClass(PayoutRecepient.class);
		configuration.addClass(Restaurant.class);
		configuration.addClass(Shift.class);
		configuration.addClass(Tax.class);
		configuration.addClass(Terminal.class);
		configuration.addClass(Ticket.class);
		configuration.addClass(KitchenTicket.class);
		configuration.addClass(TicketDiscount.class);
		configuration.addClass(TicketItem.class);
		configuration.addClass(TicketItemModifier.class);
		//configuration.addClass(TicketItemModifierGroup.class);
		configuration.addClass(TicketItemDiscount.class);
		configuration.addClass(KitchenTicketItem.class);
		configuration.addClass(PosTransaction.class);
		configuration.addClass(User.class);
		configuration.addClass(VirtualPrinter.class);
		configuration.addClass(TerminalPrinters.class);
		configuration.addClass(VoidReason.class);
		configuration.addClass(DrawerPullReport.class);
		configuration.addClass(PrinterConfiguration.class);
		configuration.addClass(UserPermission.class);
		configuration.addClass(UserType.class);
		configuration.addClass(Customer.class);
		configuration.addClass(PurchaseOrder.class);
		configuration.addClass(ZipCodeVsDeliveryCharge.class);
		configuration.addClass(ShopFloor.class);
		configuration.addClass(ShopFloorTemplate.class);
		configuration.addClass(ShopTable.class);
		configuration.addClass(ShopTableType.class);
		configuration.addClass(PrinterGroup.class);
		configuration.addClass(DrawerAssignedHistory.class);
		configuration.addClass(DataUpdateInfo.class);
		configuration.addClass(TableBookingInfo.class);
		configuration.addClass(CustomPayment.class);
		configuration.addClass(com.floreantpos.model.OrderType.class);
		configuration.addClass(DeliveryAddress.class);
		configuration.addClass(DeliveryInstruction.class);
		configuration.addClass(DeliveryCharge.class);
		configuration.addClass(DeliveryConfiguration.class);
		configuration.addClass(EmployeeInOutHistory.class);
		configuration.addClass(Currency.class);
		configuration.addClass(CashDrawer.class);
		configuration.addClass(CurrencyBalance.class);
		configuration.addClass(GlobalConfig.class);
		configuration.addClass(MenuItemSize.class);
		configuration.addClass(PizzaCrust.class);
		configuration.addClass(PizzaPrice.class);
		configuration.addClass(PizzaModifierPrice.class);
		configuration.addClass(Multiplier.class);
		configuration.addClass(ModifierMultiplierPrice.class);

		configureInventoryClasses(configuration);

		Database defaultDatabase = AppConfig.getDefaultDatabase();

		configuration.setProperty(""hibernate.dialect"", defaultDatabase.getHibernateDialect()); //$NON-NLS-1$
		configuration.setProperty(""hibernate.connection.driver_class"", defaultDatabase.getHibernateConnectionDriverClass()); //$NON-NLS-1$

		configuration.setProperty(""hibernate.connection.url"", AppConfig.getConnectString()); //$NON-NLS-1$
		configuration.setProperty(""hibernate.connection.username"", AppConfig.getDatabaseUser()); //$NON-NLS-1$
		configuration.setProperty(""hibernate.connection.password"", AppConfig.getDatabasePassword()); //$NON-NLS-1$
		configuration.setProperty(""hibernate.hbm2ddl.auto"", ""update""); //$NON-NLS-1$ //$NON-NLS-2$
		configuration.setProperty(""hibernate.connection.autocommit"", ""false""); //$NON-NLS-1$ //$NON-NLS-2$
		configuration.setProperty(""hibernate.max_fetch_depth"", ""3""); //$NON-NLS-1$ //$NON-NLS-2$
		configuration.setProperty(""hibernate.show_sql"", ""false""); //$NON-NLS-1$ //$NON-NLS-2$
		configuration.setProperty(""hibernate.connection.isolation"", String.valueOf(Connection.TRANSACTION_READ_COMMITTED)); //$NON-NLS-1$

		configureC3p0ConnectionPool(configuration);

		return configuration;
	}

	private static void configureC3p0ConnectionPool(Configuration configuration) {
		//min pool size
		configuration.setProperty(""hibernate.c3p0.min_size"", ""0""); //$NON-NLS-1$ //$NON-NLS-2$
		//max pool size
		configuration.setProperty(""hibernate.c3p0.max_size"", ""5""); //$NON-NLS-1$ //$NON-NLS-2$
		// When an idle connection is removed from the pool (in second)
		configuration.setProperty(""hibernate.c3p0.timeout"", ""300""); //$NON-NLS-1$ //$NON-NLS-2$
		//Number of prepared statements will be cached
		configuration.setProperty(""hibernate.c3p0.max_statements"", ""50""); //$NON-NLS-1$ //$NON-NLS-2$
		//The number of milliseconds a client calling getConnection() will wait for a Connection to be 
		//checked-in or acquired when the pool is exhausted. Zero means wait indefinitely.
		//Setting any positive value will cause the getConnection() call to time-out and break 
		//with an SQLException after the specified number of milliseconds. 
		configuration.setProperty(""hibernate.c3p0.checkoutTimeout"", ""10000""); //$NON-NLS-1$ //$NON-NLS-2$
		configuration.setProperty(""hibernate.c3p0.acquireRetryAttempts"", ""1""); //$NON-NLS-1$ //$NON-NLS-2$
		configuration.setProperty(""hibernate.c3p0.acquireIncrement"", ""1""); //$NON-NLS-1$ //$NON-NLS-2$
		configuration.setProperty(""hibernate.c3p0.maxIdleTime"", ""3000""); //$NON-NLS-1$ //$NON-NLS-2$
		//idle time in seconds before a connection is automatically validated
		configuration.setProperty(""hibernate.c3p0.idle_test_period"", ""3000""); //$NON-NLS-1$ //$NON-NLS-2$
		configuration.setProperty(""hibernate.c3p0.breakAfterAcquireFailure"", ""false""); //$NON-NLS-1$ //$NON-NLS-2$
	}

	private static Configuration configureInventoryClasses(Configuration configuration) {
		configuration.addClass(InventoryGroup.class);
		configuration.addClass(InventoryItem.class);
		configuration.addClass(InventoryLocation.class);
		configuration.addClass(InventoryMetaCode.class);
		configuration.addClass(InventoryTransaction.class);
		configuration.addClass(InventoryUnit.class);
		configuration.addClass(InventoryVendor.class);
		configuration.addClass(InventoryWarehouse.class);
		configuration.addClass(Recepie.class);
		configuration.addClass(RecepieItem.class);
		configuration.addClass(PackagingUnit.class);

		return configuration;
	}

	public static Configuration reInitialize() {
		Configuration configuration = getNewConfiguration(null);
		com.floreantpos.model.dao._RootDAO.setSessionFactory(configuration.buildSessionFactory());

		return configuration;
	}

	public void refresh(Object obj) {
		Session session = createNewSession();
		super.refresh(obj, session);
		session.close();
	}
}",java
"/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * ""License""); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.hadoop.examples;

import org.apache.hadoop.examples.dancing.DistributedPentomino;
import org.apache.hadoop.examples.dancing.Sudoku;
import org.apache.hadoop.examples.pi.DistBbp;
import org.apache.hadoop.examples.terasort.TeraGen;
import org.apache.hadoop.examples.terasort.TeraSort;
import org.apache.hadoop.examples.terasort.TeraValidate;
import org.apache.hadoop.util.ProgramDriver;

/**
 * A description of an example program based on its class and a 
 * human-readable description.
 */
public class ExampleDriver {
  
  public static void main(String argv[]){
    int exitCode = -1;
    ProgramDriver pgd = new ProgramDriver();
    try {
      pgd.addClass(""wordcount"", WordCount.class, 
                   ""A map/reduce program that counts the words in the input files."");
      pgd.addClass(""wordmean"", WordMean.class,
                   ""A map/reduce program that counts the average length of the words in the input files."");
      pgd.addClass(""wordmedian"", WordMedian.class,
                   ""A map/reduce program that counts the median length of the words in the input files."");
      pgd.addClass(""wordstandarddeviation"", WordStandardDeviation.class,
                   ""A map/reduce program that counts the standard deviation of the length of the words in the input files."");
      pgd.addClass(""aggregatewordcount"", AggregateWordCount.class, 
                   ""An Aggregate based map/reduce program that counts the words in the input files."");
      pgd.addClass(""aggregatewordhist"", AggregateWordHistogram.class, 
                   ""An Aggregate based map/reduce program that computes the histogram of the words in the input files."");
      pgd.addClass(""grep"", Grep.class, 
                   ""A map/reduce program that counts the matches of a regex in the input."");
      pgd.addClass(""randomwriter"", RandomWriter.class, 
                   ""A map/reduce program that writes 10GB of random data per node."");
      pgd.addClass(""randomtextwriter"", RandomTextWriter.class, 
      ""A map/reduce program that writes 10GB of random textual data per node."");
      pgd.addClass(""sort"", Sort.class, ""A map/reduce program that sorts the data written by the random writer."");

      pgd.addClass(""pi"", QuasiMonteCarlo.class, QuasiMonteCarlo.DESCRIPTION);
      pgd.addClass(""bbp"", BaileyBorweinPlouffe.class, BaileyBorweinPlouffe.DESCRIPTION);
      pgd.addClass(""distbbp"", DistBbp.class, DistBbp.DESCRIPTION);

      pgd.addClass(""pentomino"", DistributedPentomino.class,
      ""A map/reduce tile laying program to find solutions to pentomino problems."");
      pgd.addClass(""secondarysort"", SecondarySort.class,
                   ""An example defining a secondary sort to the reduce."");
      pgd.addClass(""sudoku"", Sudoku.class, ""A sudoku solver."");
      pgd.addClass(""join"", Join.class, ""A job that effects a join over sorted, equally partitioned datasets"");
      pgd.addClass(""multifilewc"", MultiFileWordCount.class, ""A job that counts words from several files."");
      pgd.addClass(""dbcount"", DBCountPageView.class, ""An example job that count the pageview counts from a database."");
      pgd.addClass(""teragen"", TeraGen.class, ""Generate data for the terasort"");
      pgd.addClass(""terasort"", TeraSort.class, ""Run the terasort"");
      pgd.addClass(""teravalidate"", TeraValidate.class, ""Checking results of terasort"");
      exitCode = pgd.run(argv);
    }
    catch(Throwable e){
      e.printStackTrace();
    }
    
    System.exit(exitCode);
  }
}
	
",java
"/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * ""License""); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.hadoop.test;

import org.apache.hadoop.util.ProgramDriver;
import org.apache.hadoop.mapred.BigMapOutput;
import org.apache.hadoop.mapred.GenericMRLoadGenerator;
import org.apache.hadoop.mapred.MRBench;
import org.apache.hadoop.mapred.ReliabilityTest;
import org.apache.hadoop.mapred.SortValidator;
import org.apache.hadoop.mapred.TestMapRed;
import org.apache.hadoop.mapred.TestSequenceFileInputFormat;
import org.apache.hadoop.mapred.TestTextInputFormat;
import org.apache.hadoop.hdfs.BenchmarkThroughput;
import org.apache.hadoop.hdfs.NNBench;
import org.apache.hadoop.fs.DistributedFSCheck;
import org.apache.hadoop.fs.TestDFSIO;
import org.apache.hadoop.fs.DFSCIOTest;
import org.apache.hadoop.fs.TestFileSystem;
import org.apache.hadoop.io.FileBench;
import org.apache.hadoop.io.TestArrayFile;
import org.apache.hadoop.io.TestSequenceFile;
import org.apache.hadoop.io.TestSetFile;
import org.apache.hadoop.ipc.TestIPC;
import org.apache.hadoop.ipc.TestRPC;
import org.apache.hadoop.mapred.ThreadedMapBenchmark;

public class AllTestDriver {
  
  /**
   * A description of the test program for running all the tests using jar file
   */
  public static void main(String argv[]){
    ProgramDriver pgd = new ProgramDriver();
    try {
      pgd.addClass(""threadedmapbench"", ThreadedMapBenchmark.class, 
                   ""A map/reduce benchmark that compares the performance "" + 
                   ""of maps with multiple spills over maps with 1 spill"");
      pgd.addClass(""mrbench"", MRBench.class, ""A map/reduce benchmark that can create many small jobs"");
      pgd.addClass(""nnbench"", NNBench.class, ""A benchmark that stresses the namenode."");
      pgd.addClass(""mapredtest"", TestMapRed.class, ""A map/reduce test check."");
      pgd.addClass(""testfilesystem"", TestFileSystem.class, ""A test for FileSystem read/write."");
      pgd.addClass(""testsequencefile"", TestSequenceFile.class, ""A test for flat files of binary key value pairs."");
      pgd.addClass(""testsetfile"", TestSetFile.class, ""A test for flat files of binary key/value pairs."");
      pgd.addClass(""testarrayfile"", TestArrayFile.class, ""A test for flat files of binary key/value pairs."");
      pgd.addClass(""testrpc"", TestRPC.class, ""A test for rpc."");
      pgd.addClass(""testipc"", TestIPC.class, ""A test for ipc."");
      pgd.addClass(""testsequencefileinputformat"", TestSequenceFileInputFormat.class, ""A test for sequence file input format."");
      pgd.addClass(""testtextinputformat"", TestTextInputFormat.class, ""A test for text input format."");
      pgd.addClass(""TestDFSIO"", TestDFSIO.class, ""Distributed i/o benchmark."");
      pgd.addClass(""DFSCIOTest"", DFSCIOTest.class, ""Distributed i/o benchmark of libhdfs."");
      pgd.addClass(""DistributedFSCheck"", DistributedFSCheck.class, ""Distributed checkup of the file system consistency."");
      pgd.addClass(""testmapredsort"", SortValidator.class, 
                   ""A map/reduce program that validates the map-reduce framework's sort."");
      pgd.addClass(""testbigmapoutput"", BigMapOutput.class, 
                   ""A map/reduce program that works on a very big "" + 
                   ""non-splittable file and does identity map/reduce"");
      pgd.addClass(""loadgen"", GenericMRLoadGenerator.class, ""Generic map/reduce load generator"");
      pgd.addClass(""filebench"", FileBench.class, ""Benchmark SequenceFile(Input|Output)Format (block,record compressed and uncompressed), Text(Input|Output)Format (compressed and uncompressed)"");
      pgd.addClass(""dfsthroughput"", BenchmarkThroughput.class, 
                   ""measure hdfs throughput"");
      pgd.addClass(""MRReliabilityTest"", ReliabilityTest.class,
          ""A program that tests the reliability of the MR framework by "" +
          ""injecting faults/failures"");
      pgd.driver(argv);
    } catch(Throwable e) {
      e.printStackTrace();
    }
  }
}

",java
"package com.hiernate.util;          		//���ཨ��com.hibernate.util����
import org.hibernate.Session;       		//����org.hibernate.Session��
import org.hibernate.SessionFactory; 		//����org.hibernate.SessionFactory��
import org.hibernate.cfg.Configuration; 	//����org.hibernate.cfg.Configuration��
import com.hiernate.persistence.Bm;     	//����com.hiernate.persistence.Bm��
import com.hiernate.persistence.Chuchai;	//����com.hiernate.persistence.Chuchai��
import com.hiernate.persistence.Meeting;	//����com.hiernate.persistence.Meeting��
import com.hiernate.persistence.Menu;		//����com.hiernate.persistence.Menu��
import com.hiernate.persistence.Onduty;		//����com.hiernate.persistence.Onduty��
import com.hiernate.persistence.Person;		//����com.hiernate.persistence.Person��
import com.hiernate.persistence.Placard;	//����com.hiernate.persistence.Placard��
import com.hiernate.persistence.Qingjia;	//����com.hiernate.persistence.Qingjia��
import com.hiernate.persistence.Qiye;		//����com.hiernate.persistence.Qiye��
import com.hiernate.persistence.Shenhe;		//����com.hiernate.persistence.Shenhe��
import com.hiernate.persistence.TongXunAdd;	//����com.hiernate.persistence.TongXunAdd��
import com.hiernate.persistence.Tongxun;	//����com.hiernate.persistence.Tongxun��
import com.hiernate.persistence.User;		//����com.hiernate.persistence.User��
import com.hiernate.persistence.Waichu;		//����com.hiernate.persistence.Waichu��
public class GetHibernate {
	
	private static SessionFactory sf = null;//����SessionFactoryʵ��
	static {
		try {
			Configuration conf = new Configuration().addClass(User.class)
					.addClass(Menu.class).addClass(Meeting.class)
					.addClass(Placard.class).addClass(Waichu.class)
					.addClass(Qingjia.class).addClass(Chuchai.class)
					.addClass(Onduty.class).addClass(Qiye.class)
					.addClass(Bm.class).addClass(Person.class)
					.addClass(Shenhe.class).addClass(TongXunAdd.class)
					.addClass(Tongxun.class);
			 sf = conf.buildSessionFactory();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	//���Hibernate�������ļ�ΪXML��ʽ��ֻ���������ļ�������ӳ���ļ����ڳ����в��ص���Configuration
	//���addClass����������ӳ���ļ����������£�
	// SessionFactory sf = new Configuration()
	//                     .configure().buildSessionFactory()
   public Session openSession(){			//��SessionΪ����ֵ������Session����
	   Session session = sf.openSession();   //SessionFactory��openSession()�������Sessionʵ��
	   return session;
   }
   public void closeSession(Session session){  //�����ر�Session����������ΪSessionʵ��
	   if(session != null){                //close()�����ر�session
		   session.close();
	   }
   }
  }
",java
"/*
 * Parabuild CI licenses this file to You under the LGPL 2.1
 * (the ""License""); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *      https://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.parabuild.ci.services;

import net.sf.hibernate.HibernateException;
import net.sf.hibernate.Query;
import net.sf.hibernate.SessionFactory;
import net.sf.hibernate.cfg.Configuration;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.quartz.Scheduler;
import org.quartz.SchedulerException;
import org.quartz.SchedulerFactory;
import org.quartz.impl.StdSchedulerFactory;
import org.parabuild.ci.common.IoUtils;
import org.parabuild.ci.common.StringUtils;
import org.parabuild.ci.configuration.BuildConfigCloner;
import org.parabuild.ci.configuration.ConfigurationConstants;
import org.parabuild.ci.configuration.ConfigurationManager;
import org.parabuild.ci.configuration.PersistanceConstants;
import org.parabuild.ci.configuration.SystemConfigurationManager;
import org.parabuild.ci.configuration.SystemConfigurationManagerFactory;
import org.parabuild.ci.configuration.SystemConstants;
import org.parabuild.ci.configuration.TransactionCallback;
import org.parabuild.ci.object.*;
import org.parabuild.ci.statistics.StatisticsManager;
import org.parabuild.ci.statistics.StatisticsManagerFactory;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;

/**
 * @noinspection StaticFieldReferencedViaSubclass
 */
public final class ConfigurationService implements Service {

  private static final Log log = LogFactory.getLog(ConfigurationService.class);
  private SessionFactory sessionFactory = null;


  private byte status = SERVICE_STATUS_NOT_STARTED;


  /**
   * Returns serivce status
   *
   * @return service status
   */
  public byte getServiceStatus() {
    return status;
  }


  public void shutdownService() {
    try {
      shutdownQuarts();
    } catch (Exception e) {
      System.err.println(""Error while shutting down configuration service: "" + StringUtils.toString(e)); // NOPMD
    }
  }


  private void shutdownQuarts() throws SchedulerException {
    final SchedulerFactory factory = new StdSchedulerFactory();
    final Scheduler scheduler = factory.getScheduler();
    scheduler.shutdown();
  }


  public ServiceName serviceName() {
    return ServiceName.CONFIGURATION_SERVICE;
  }


  public void startupService() {
    try {
      initConfigManager();
      initQuartz();
      status = SERVICE_STATUS_STARTED;
      runPostStartUpActions();
    } catch (Exception e) {
      log.error(""Error while starting configuration service"", e);
    }
  }


  /**
   * Starts up Quartz scheduler.
   */
  private void initQuartz() throws SchedulerException {
    final SchedulerFactory factory = new StdSchedulerFactory();
    final Scheduler scheduler = factory.getScheduler();
    scheduler.start();
  }


  /**
   * Inits configuration manager
   */
  private void initConfigManager() throws HibernateException, IOException {

    // get props made from config/hibernate.properties
    final Properties props = new Properties();
    props.load(IoUtils.stringToInputStream(IoUtils.getResourceAsString(""hibernate.properties"")));

    // init hibernate
    final Configuration cfg = new Configuration();
    cfg.setProperties(props);
    cfg.setProperty(""hibernate.connection.url"", ""jdbc:hsqldb:"" + ConfigurationConstants.DATABASE_HOME.getAbsolutePath() + "";ifexists=true"");
    cfg.setProperty(""hibernate.connection.password"", PersistanceConstants.DATABASE_PASSWORD);
    cfg.setProperty(""hibernate.connection.username"", PersistanceConstants.DATABASE_USER_NAME);
    cfg.addClass(BuildConfig.class)
            .addClass(User.class)
            .addClass(SystemProperty.class)
            .addClass(VCSUserToEmailMap.class)
            .addClass(ScheduleProperty.class)
            .addClass(LabelProperty.class)
            .addClass(SourceControlSetting.class)
            .addClass(BuildRun.class)
            .addClass(StepRun.class)
            .addClass(StepLog.class)
            .addClass(Change.class)
            .addClass(ChangeList.class)
            .addClass(BuildRunParticipant.class)
            .addClass(ScheduleItem.class)
            .addClass(BuildConfigAttribute.class)
            .addClass(BuildWatcher.class)
            .addClass(BuildChangeList.class)
            .addClass(LogConfig.class)
            .addClass(LogConfigProperty.class)
            .addClass(BuildRunAttribute.class)
            .addClass(IssueTracker.class)
            .addClass(IssueTrackerProperty.class)
            .addClass(Issue.class)
            .addClass(IssueAttribute.class)
            .addClass(ReleaseNote.class)
            .addClass(PendingIssue.class)
            .addClass(IssueChangeList.class)
            .addClass(StepRunAttribute.class)
            .addClass(Group.class)
            .addClass(UserGroup.class)
            .addClass(GroupBuildAccess.class)
            .addClass(ResultConfig.class)
            .addClass(ResultConfigProperty.class)
            .addClass(StepResult.class)
            .addClass(UserProperty.class)
            .addClass(ActiveBuild.class)
            .addClass(ActiveBuildAttribute.class)
            .addClass(HourlyStats.class)
            .addClass(DailyStats.class)
            .addClass(YearlyStats.class)
            .addClass(MonthlyStats.class)
            .addClass(HourlyDistribution.class)
            .addClass(WeekDayDistribution.class)
            .addClass(StartParameter.class)
            .addClass(DisplayGroup.class)
            .addClass(DisplayGroupBuild.class)
            .addClass(BuilderConfiguration.class)
            .addClass(AgentConfig.class)
            .addClass(BuilderAgent.class)
            .addClass(HourlyTestStats.class)
            .addClass(DailyTestStats.class)
            .addClass(MonthlyTestStats.class)
            .addClass(YearlyTestStats.class)
            .addClass(ResultGroup.class)
            .addClass(PublishedStepResult.class)
            .addClass(ResultGroupAccess.class)
            .addClass(BuildRunAction.class)
            .addClass(BuildRunDependence.class)
            .addClass(Project.class)
            .addClass(ProjectAttribute.class)
            .addClass(ProjectBuild.class)
            .addClass(ProjectResultGroup.class)
            .addClass(MergeServiceConfiguration.class)
            .addClass(MergeConfiguration.class)
            .addClass(MergeConfigurationAttribute.class)
            .addClass(Merge.class)
            .addClass(MergeSourceBuildRun.class)
            .addClass(MergeTargetBuildRun.class)
            .addClass(MergeChangeList.class)
            .addClass(BranchChangeList.class)
            .addClass(BranchBuildRunParticipant.class)
            .addClass(PromotionPolicy.class)
            .addClass(PromotionPolicyStep.class)
            .addClass(PromotionStepDependency.class)
            .addClass(TestSuiteName.class)
            .addClass(TestCaseName.class)
            .addClass(BuildRunTest.class)
            .addClass(GlobalVCSUserMap.class)
            .addClass(BuildChangeListAttribute.class)
            .addClass(BuildSequence.class);
    if (log.isDebugEnabled()) {
      log.debug(""creating session factory"");
    }
    sessionFactory = cfg.buildSessionFactory();
  }


  /**
   * Runs actions that might need to run at startup.
   */
  private void runPostStartUpActions() {
    if (Boolean.valueOf(System.getProperty(SystemConstants.SYSTEM_PROPERTY_POPULATE_BUILD_RUN_CONFIGS, ""false"")).booleanValue()) {
      // have to create missing build run configs.
      final List buildRunList = (List) ConfigurationManager.runInHibernate(new TransactionCallback() {
        public Object runInTransaction() throws Exception {
          final Collection result = new ArrayList(7777);
          // get all build runs that are tied to active builds
          // (i.e. don't have copy versions of build configs.
          // that is, we can use build run's config id being
          // cerain it is an active build config.

          // first process automatic
          final Query qNonRef = session.createQuery(
                  "" select br from BuildRun br, BuildConfig bc, ActiveBuild ab "" +
                          ""   where br.buildID = bc.buildID "" +
                          ""     and bc.buildID = ab.ID"" +
                          ""     and bc.sourceControl != ?"");
          qNonRef.setInteger(0, BuildConfig.SCM_REFERENCE);
          result.addAll(qNonRef.list());

          // than process sched/ref
          final Query qRef = session.createQuery(
                  "" select br from BuildRun br, BuildConfig bc, ActiveBuild ab "" +
                          ""   where br.buildID = bc.buildID "" +
                          ""     and bc.buildID = ab.ID"" +
                          ""     and bc.sourceControl = ?"");
          qRef.setInteger(0, BuildConfig.SCM_REFERENCE);
          result.addAll(qRef.list());

          // traverse result
          return result;
        }
      });

      final BuildConfigCloner cloner = new BuildConfigCloner();
      for (final Iterator i = buildRunList.iterator(); i.hasNext();) {
        final BuildRun buildRun = (BuildRun) i.next();
        // have to create missing build run configs.
        ConfigurationManager.runInHibernate(new TransactionCallback() {
          public Object runInTransaction() throws Exception {
            if (log.isDebugEnabled()) {
              log.debug(""Will create config for "" + buildRun);
            }
            // create build run config copy
            final BuildConfig newBuildRunConfig = cloner.createBuildRunConfig(buildRun.getBuildID(), ""null"");
            // set new ID
            buildRun.setBuildID(newBuildRunConfig.getBuildID());
            // save
            session.saveOrUpdate(buildRun);
            // flush - size of the session object can be pretty build.
            session.flush();
            if (log.isDebugEnabled()) {
              log.debug(""Created config "" + buildRun.getBuildRunID());
            }
            return null;
          }
        });
      }
    }

    // init statistics if requested by updater
    if (Boolean.valueOf(System.getProperty(SystemConstants.SYSTEM_PROPERTY_INIT_STATISTICS, ""false"")).booleanValue()) {
      final ConfigurationManager cm = ConfigurationManager.getInstance();
      for (final Iterator i = cm.getExistingBuildConfigs().iterator(); i.hasNext();) {
        final StatisticsManager statisticsManager = StatisticsManagerFactory
                .getStatisticsManager(((BuildConfig) i.next()).getActiveBuildID());
        statisticsManager.initStatistics();
      }
    }

    // enable advanced settings if missed. this is done for customers that
    // already used Parabuild when advanced seeting appeared - they should
    // have it enabled so that they don't face change of UI behaviour.
    final SystemConfigurationManager scm = SystemConfigurationManagerFactory.getManager();
    if (Boolean.valueOf(System.getProperty(SystemConstants.SYSTEM_PROPERTY_INIT_ADVANCED_SETTINGS, ""false"")).booleanValue()) {
      scm.createSystemPropertyIfDoesNotExist(SystemProperty.ENABLE_ADVANCED_BUILD_SETTING, SystemProperty.OPTION_CHECKED);
    }

    // Init retry settings
    if (Boolean.valueOf(System.getProperty(SystemConstants.SYSTEM_PROPERTY_INIT_RETRY_SETTINGS, ""false"")).booleanValue()) {
      scm.createSystemPropertyIfDoesNotExist(SystemProperty.RETRY_VCS_COMMAND_INTERVAL, SystemProperty.DEFAULT_RETRY_VCS_COMMAND_INTERVAL);
      scm.createSystemPropertyIfDoesNotExist(SystemProperty.RETRY_VCS_COMMAND_TIMES, SystemProperty.DEFAULT_RETRY_VCS_COMMAND_TIMES);
      scm.createSystemPropertyIfDoesNotExist(SystemProperty.RETRY_VCS_COMMAND_PATTERNS, SystemProperty.DEFAULT_RETRY_VCS_COMMAND_PATTERNS);
    }


    //
    // Set default values if not set
    //
    scm.createSystemPropertyIfDoesNotExist(SystemProperty.ROUND_ROBIN_LOAD_BALANCING, SystemProperty.OPTION_CHECKED);
    scm.createSystemPropertyIfDoesNotExist(SystemProperty.DEFAULT_BUILD_NAME_VALIDATION, SystemProperty.RADIO_SELECTED);
    scm.createSystemPropertyIfDoesNotExist(SystemProperty.DEFAULT_VARIABLE_NAME_VALIDATION, SystemProperty.RADIO_SELECTED);
    scm.createSystemPropertyIfDoesNotExist(SystemProperty.CUSTOM_BUILD_NAME_VALIDATION, SystemProperty.RADIO_UNSELECTED);
    scm.createSystemPropertyIfDoesNotExist(SystemProperty.CUSTOM_VARIABLE_NAME_VALIDATION, SystemProperty.RADIO_UNSELECTED);
    scm.createSystemPropertyIfDoesNotExist(SystemProperty.USE_XML_LOG_FORMAT_FOR_SUBVERSION, SystemProperty.OPTION_CHECKED);
    scm.createSystemPropertyIfDoesNotExist(SystemProperty.NOTIFY_USERS_WITH_EDIT_RIGHTS_ABOUT_SYSTEM_ERRORS, SystemProperty.OPTION_CHECKED);
    scm.createSystemPropertyIfDoesNotExist(SystemProperty.RESPECT_INTERMEDIATE_STEP_FAILURE, SystemProperty.OPTION_CHECKED);
    scm.createSystemPropertyIfDoesNotExist(SystemProperty.MAX_PARALLEL_UPGRADES, ""2"");
  }


  public SessionFactory getSessionFactory() {
    validateIsUp();
    return sessionFactory;
  }


  private void validateIsUp() {
    if (status != SERVICE_STATUS_STARTED) {
      throw new IllegalStateException(""Service "" + serviceName() + "" has not started yet"");
    }
  }


  public String toString() {
    return ""ConfigurationService{"" +
            ""status="" + status +
            '}';
  }
}
",java
"/*
 * Copyright (c) 2014-2022 All Rights Reserved by the RWS Group for and on behalf of its affiliates and subsidiaries.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.sdl.odata.edm.factory.annotations;

import com.sdl.odata.api.edm.ODataEdmException;
import com.sdl.odata.api.edm.annotations.EdmActionImport;
import com.sdl.odata.test.model.ActionSample;
import com.sdl.odata.test.model.Address;
import com.sdl.odata.test.model.Category;
import com.sdl.odata.test.model.Customer;
import com.sdl.odata.test.model.ExampleFlags;
import com.sdl.odata.test.model.Order;
import com.sdl.odata.test.model.OrderLine;
import com.sdl.odata.test.model.Product;
import org.junit.Test;

/**
 * Annotation Action Import Factory test.
 */
public class AnnotationActionImportFactoryTest {
    @Test(expected = IllegalArgumentException.class)
    public void testLookupGetFunctionFail() throws ODataEdmException {
        AnnotationEntityDataModelFactory factory = new AnnotationEntityDataModelFactory();

        factory.addClass(Address.class);
        factory.addClass(Category.class);
        factory.addClass(Customer.class);
        factory.addClass(Order.class);
        factory.addClass(OrderLine.class);
        factory.addClass(Product.class);
        factory.addClass(ExampleFlags.class);
        factory.addClass(ActionSample.class);
        factory.addClass(WrongActionImportSample.class);
        factory.setSchemaAlias(""ODataDemo"", ""TestAlias"");

        factory.buildEntityDataModel();
    }

    @Test(expected = IllegalArgumentException.class)
    public void testLookupGetFunctionNoEntitySetFail() throws ODataEdmException {
        AnnotationEntityDataModelFactory factory = new AnnotationEntityDataModelFactory();

        factory.addClass(Address.class);
        factory.addClass(Category.class);
        factory.addClass(Customer.class);
        factory.addClass(Order.class);
        factory.addClass(OrderLine.class);
        factory.addClass(Product.class);
        factory.addClass(ExampleFlags.class);
        factory.addClass(ActionSample.class);
        factory.addClass(ActionImportWithoutEntitySetDefinedSample.class);
        factory.setSchemaAlias(""ODataDemo"", ""TestAlias"");

        factory.buildEntityDataModel();
    }

    /**
     * Action import sample without defined name and other annotation fields.
     */
    @EdmActionImport(entitySet = ""Customers"")
    public static class WrongActionImportSample {
    }

    /**
     * Action import sample without defined entity set.
     */
    @EdmActionImport
    public static class ActionImportWithoutEntitySetDefinedSample {
    }
}
",java
"/*
* Copyright (C) 2007-2007 the GSAN - Sistema Integrado de Gest�o de Servi�os de Saneamento
*
* This file is part of GSAN, an integrated service management system for Sanitation
*
* GSAN is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation; either version 2 of the License.
*
* GSAN is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
*/

/*
* GSAN - Sistema Integrado de Gest�o de Servi�os de Saneamento
* Copyright (C) <2007> 
* Adriano Britto Siqueira
* Alexandre Santos Cabral
* Ana Carolina Alves Breda
* Ana Maria Andrade Cavalcante
* Aryed Lins de Ara�jo
* Bruno Leonardo Rodrigues Barros
* Carlos Elmano Rodrigues Ferreira
* Cl�udio de Andrade Lira
* Denys Guimar�es Guenes Tavares
* Eduardo Breckenfeld da Rosa Borges
* Fab�ola Gomes de Ara�jo
* Fl�vio Leonardo Cavalcanti Cordeiro
* Francisco do Nascimento J�nior
* Homero Sampaio Cavalcanti
* Ivan S�rgio da Silva J�nior
* Jos� Edmar de Siqueira
* Jos� Thiago Ten�rio Lopes
* K�ssia Regina Silvestre de Albuquerque
* Leonardo Luiz Vieira da Silva
* M�rcio Roberto Batista da Silva
* Maria de F�tima Sampaio Leite
* Micaela Maria Coelho de Ara�jo
* Nelson Mendon�a de Carvalho
* Newton Morais e Silva
* Pedro Alexandre Santos da Silva Filho
* Rafael Corr�a Lima e Silva
* Rafael Francisco Pinto
* Rafael Koury Monteiro
* Rafael Palermo de Ara�jo
* Raphael Veras Rossiter
* Roberto Sobreira Barbalho
* Rodrigo Avellar Silveira
* Rosana Carvalho Barbosa
* S�vio Luiz de Andrade Cavalcante
* Tai Mu Shih
* Thiago Augusto Souza do Nascimento
* Tiago Moreno Rodrigues
* Vivianne Barbosa Sousa
*
* Este programa � software livre; voc� pode redistribu�-lo e/ou
* modific�-lo sob os termos de Licen�a P�blica Geral GNU, conforme
* publicada pela Free Software Foundation; vers�o 2 da
* Licen�a.
* Este programa � distribu�do na expectativa de ser �til, mas SEM
* QUALQUER GARANTIA; sem mesmo a garantia impl�cita de
* COMERCIALIZA��O ou de ADEQUA��O A QUALQUER PROP�SITO EM
* PARTICULAR. Consulte a Licen�a P�blica Geral GNU para obter mais
* detalhes.
* Voc� deve ter recebido uma c�pia da Licen�a P�blica Geral GNU
* junto com este programa; se n�o, escreva para Free Software
* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
* 02111-1307, USA.
*/  
package gcom.util;

import gcom.arrecadacao.ArrecadacaoContabilParametros;
import gcom.arrecadacao.ArrecadacaoDadosDiarios;
import gcom.arrecadacao.ArrecadacaoForma;
import gcom.arrecadacao.Arrecadador;
import gcom.arrecadacao.ArrecadadorContrato;
import gcom.arrecadacao.ArrecadadorContratoTarifa;
import gcom.arrecadacao.ArrecadadorMovimento;
import gcom.arrecadacao.ArrecadadorMovimentoItem;
import gcom.arrecadacao.BandeiraCartao;
import gcom.arrecadacao.ContratoDemanda;
import gcom.arrecadacao.ContratoMotivoCancelamento;
import gcom.arrecadacao.DebitoCarteiraMovimento;
import gcom.arrecadacao.DeducaoTipo;
import gcom.arrecadacao.Devolucao;
import gcom.arrecadacao.DevolucaoDadosDiarios;
import gcom.arrecadacao.DevolucaoHistorico;
import gcom.arrecadacao.DevolucaoSituacao;
import gcom.arrecadacao.GuiaDevolucao;
import gcom.arrecadacao.MetasArrecadacao;
import gcom.arrecadacao.MovimentoCartaoRejeita;
import gcom.arrecadacao.RecebimentoTipo;
import gcom.arrecadacao.RegistroCodigo;
import gcom.arrecadacao.ResumoArrecadacao;
import gcom.arrecadacao.aviso.AvisoAcerto;
import gcom.arrecadacao.aviso.AvisoBancario;
import gcom.arrecadacao.aviso.AvisoDeducoes;
import gcom.arrecadacao.banco.Agencia;
import gcom.arrecadacao.banco.Banco;
import gcom.arrecadacao.banco.ContaBancaria;
import gcom.arrecadacao.debitoautomatico.DebitoAutomatico;
import gcom.arrecadacao.debitoautomatico.DebitoAutomaticoMovimento;
import gcom.arrecadacao.debitoautomatico.DebitoAutomaticoMovimentoParcelamentoCliente;
import gcom.arrecadacao.debitoautomatico.DebitoAutomaticoParcelamentoCliente;
import gcom.arrecadacao.debitoautomatico.DebitoAutomaticoRetornoCodigo;
import gcom.arrecadacao.pagamento.GuiaPagamento;
import gcom.arrecadacao.pagamento.GuiaPagamentoCategoria;
import gcom.arrecadacao.pagamento.GuiaPagamentoCategoriaHistorico;
import gcom.arrecadacao.pagamento.GuiaPagamentoHistorico;
import gcom.arrecadacao.pagamento.GuiaPagamentoItem;
import gcom.arrecadacao.pagamento.GuiaPagamentoItemCategoria;
import gcom.arrecadacao.pagamento.GuiaPagamentoItemCategoriaHistorico;
import gcom.arrecadacao.pagamento.GuiaPagamentoItemHistorico;
import gcom.arrecadacao.pagamento.GuiaPagamentoParcelamentoCartao;
import gcom.arrecadacao.pagamento.Pagamento;
import gcom.arrecadacao.pagamento.PagamentoCartaoDebito;
import gcom.arrecadacao.pagamento.PagamentoCartaoDebitoItem;
import gcom.arrecadacao.pagamento.PagamentoHistorico;
import gcom.arrecadacao.pagamento.PagamentoSituacao;
import gcom.arrecadacao.pagamento.SequenciaCartao;
import gcom.atendimentopublico.EspecificacaoPavimentacaoServicoTipo;
import gcom.atendimentopublico.EspecificacaoUnidadeCobranca;
import gcom.atendimentopublico.FiscalizarParametroCalculoDebito;
import gcom.atendimentopublico.LigacaoOrigem;
import gcom.atendimentopublico.ResolucaoImagem;
import gcom.atendimentopublico.contratoadesao.ContratoAdesao;
import gcom.atendimentopublico.ligacaoagua.CorteTipo;
import gcom.atendimentopublico.ligacaoagua.EmissaoOrdemCobrancaTipo;
import gcom.atendimentopublico.ligacaoagua.LigacaoAgua;
import gcom.atendimentopublico.ligacaoagua.LigacaoAguaDiametro;
import gcom.atendimentopublico.ligacaoagua.LigacaoAguaMaterial;
import gcom.atendimentopublico.ligacaoagua.LigacaoAguaPerfil;
import gcom.atendimentopublico.ligacaoagua.LigacaoAguaSituacao;
import gcom.atendimentopublico.ligacaoagua.LigacaoAguaSituacaoConsumoTipo;
import gcom.atendimentopublico.ligacaoagua.MotivoCorte;
import gcom.atendimentopublico.ligacaoagua.RamalLocalInstalacao;
import gcom.atendimentopublico.ligacaoagua.SupressaoTipo;
import gcom.atendimentopublico.ligacaoesgoto.LigacaoEsgoto;
import gcom.atendimentopublico.ligacaoesgoto.LigacaoEsgotoCaixaInspecao;
import gcom.atendimentopublico.ligacaoesgoto.LigacaoEsgotoDestinoAguasPluviais;
import gcom.atendimentopublico.ligacaoesgoto.LigacaoEsgotoDestinoDejetos;
import gcom.atendimentopublico.ligacaoesgoto.LigacaoEsgotoDiametro;
import gcom.atendimentopublico.ligacaoesgoto.LigacaoEsgotoEsgotamento;
import gcom.atendimentopublico.ligacaoesgoto.LigacaoEsgotoMaterial;
import gcom.atendimentopublico.ligacaoesgoto.LigacaoEsgotoPerfil;
import gcom.atendimentopublico.ligacaoesgoto.LigacaoEsgotoSituacao;
import gcom.atendimentopublico.ligacaoesgoto.LigacaoEsgotoSituacaoConsumoTipo;
import gcom.atendimentopublico.ordemservico.AnormalidadeComandoOSS;
import gcom.atendimentopublico.ordemservico.ArquivoTextoAcompanhamentoServico;
import gcom.atendimentopublico.ordemservico.ArquivoTextoRetornoAcaoVisitaCampo;
import gcom.atendimentopublico.ordemservico.ArquivoTextoRetornoClienteFoneVisitaCampo;
import gcom.atendimentopublico.ordemservico.ArquivoTextoRetornoClienteVisitaCampo;
import gcom.atendimentopublico.ordemservico.ArquivoTextoRetornoVisitaCampo;
import gcom.atendimentopublico.ordemservico.ArquivoTextoVisitaCampo;
import gcom.atendimentopublico.ordemservico.Atividade;
import gcom.atendimentopublico.ordemservico.BoletimOsConcluida;
import gcom.atendimentopublico.ordemservico.CapacidHidrComandoOSS;
import gcom.atendimentopublico.ordemservico.ClieFoneSeletivaVisitaCampo;
import gcom.atendimentopublico.ordemservico.ClieOsSeletivaVisitaCampo;
import gcom.atendimentopublico.ordemservico.ComandoOrdemSeletiva;
import gcom.atendimentopublico.ordemservico.CoordenadaPercursoEquipe;
import gcom.atendimentopublico.ordemservico.DataFiscalizacaoOsSeletiva;
import gcom.atendimentopublico.ordemservico.EquipamentosEspeciais;
import gcom.atendimentopublico.ordemservico.Equipe;
import gcom.atendimentopublico.ordemservico.EquipeComponentes;
import gcom.atendimentopublico.ordemservico.EquipeEquipamentosEspeciais;
import gcom.atendimentopublico.ordemservico.EspecificacaoServicoTipo;
import gcom.atendimentopublico.ordemservico.FiscalizacaoColetiva;
import gcom.atendimentopublico.ordemservico.FiscalizacaoFoto;
import gcom.atendimentopublico.ordemservico.FiscalizacaoSituacao;
import gcom.atendimentopublico.ordemservico.FiscalizacaoSituacaoAgua;
import gcom.atendimentopublico.ordemservico.FiscalizacaoSituacaoEsgoto;
import gcom.atendimentopublico.ordemservico.FiscalizacaoSituacaoHidrometroCapacidade;
import gcom.atendimentopublico.ordemservico.FiscalizacaoSituacaoServicoACobrar;
import gcom.atendimentopublico.ordemservico.FotoSituacaoOrdemServico;
import gcom.atendimentopublico.ordemservico.FotoTipo;
import gcom.atendimentopublico.ordemservico.LigacaoSitComandoOSS;
import gcom.atendimentopublico.ordemservico.Material;
import gcom.atendimentopublico.ordemservico.MaterialUnidade;
import gcom.atendimentopublico.ordemservico.MensagemAcompanhamentoServico;
import gcom.atendimentopublico.ordemservico.MotivoRejeicao;
import gcom.atendimentopublico.ordemservico.OSAtividadeExecucaoAcompanhamentoServico;
import gcom.atendimentopublico.ordemservico.OSAtividadeMaterialProgramacaoAcompanhamentoServico;
import gcom.atendimentopublico.ordemservico.OSAtividadeProgramacaoAcompanhamentoServico;
import gcom.atendimentopublico.ordemservico.OSPriorizacaoTipo;
import gcom.atendimentopublico.ordemservico.OSProgramacaoAcompanhamentoServico;
import gcom.atendimentopublico.ordemservico.OSProgramacaoCalibragem;
import gcom.atendimentopublico.ordemservico.OrdemServico;
import gcom.atendimentopublico.ordemservico.OrdemServicoAtividade;
import gcom.atendimentopublico.ordemservico.OrdemServicoBoletim;
import gcom.atendimentopublico.ordemservico.OrdemServicoFiscSit;
import gcom.atendimentopublico.ordemservico.OrdemServicoFoto;
import gcom.atendimentopublico.ordemservico.OrdemServicoMovimento;
import gcom.atendimentopublico.ordemservico.OrdemServicoMovimentoHistorico;
import gcom.atendimentopublico.ordemservico.OrdemServicoPavimento;
import gcom.atendimentopublico.ordemservico.OrdemServicoProgramacao;
import gcom.atendimentopublico.ordemservico.OrdemServicoSituacao;
import gcom.atendimentopublico.ordemservico.OrdemServicoUnidade;
import gcom.atendimentopublico.ordemservico.OsAtividadeMaterialExecucao;
import gcom.atendimentopublico.ordemservico.OsAtividadePeriodoExecucao;
import gcom.atendimentopublico.ordemservico.OsExecucaoEquipe;
import gcom.atendimentopublico.ordemservico.OsExecucaoEquipeComponentes;
import gcom.atendimentopublico.ordemservico.OsProgramNaoEncerMotivo;
import gcom.atendimentopublico.ordemservico.OsReferidaRetornoTipo;
import gcom.atendimentopublico.ordemservico.OsSeletivaVisitaCampo;
import gcom.atendimentopublico.ordemservico.ProgramacaoRoteiro;
import gcom.atendimentopublico.ordemservico.ServicoCobrancaValor;
import gcom.atendimentopublico.ordemservico.ServicoNaoCobrancaMotivo;
import gcom.atendimentopublico.ordemservico.ServicoPerfilTipo;
import gcom.atendimentopublico.ordemservico.ServicoTipo;
import gcom.atendimentopublico.ordemservico.ServicoTipoAtividade;
import gcom.atendimentopublico.ordemservico.ServicoTipoBoletim;
import gcom.atendimentopublico.ordemservico.ServicoTipoGrupo;
import gcom.atendimentopublico.ordemservico.ServicoTipoMaterial;
import gcom.atendimentopublico.ordemservico.ServicoTipoMotivoEncerramento;
import gcom.atendimentopublico.ordemservico.ServicoTipoOperacao;
import gcom.atendimentopublico.ordemservico.ServicoTipoPrioridade;
import gcom.atendimentopublico.ordemservico.ServicoTipoReferencia;
import gcom.atendimentopublico.ordemservico.ServicoTipoSubgrupo;
import gcom.atendimentopublico.ordemservico.SupressaoMotivo;
import gcom.atendimentopublico.portal.AcessoLojaVirtual;
import gcom.atendimentopublico.portal.QuestionarioSatisfacaoCliente;
import gcom.atendimentopublico.registroatendimento.AgenciaReguladoraMotReclamacao;
import gcom.atendimentopublico.registroatendimento.AgenciaReguladoraMotRetorno;
import gcom.atendimentopublico.registroatendimento.ArquivoProcedimentoOperacionalPadrao;
import gcom.atendimentopublico.registroatendimento.AtendimentoMotivoEncAcaoCobranca;
import gcom.atendimentopublico.registroatendimento.AtendimentoMotivoEncerramento;
import gcom.atendimentopublico.registroatendimento.AtendimentoRelacaoTipo;
import gcom.atendimentopublico.registroatendimento.EspecificacaoImovSitCriterio;
import gcom.atendimentopublico.registroatendimento.EspecificacaoImovelSituacao;
import gcom.atendimentopublico.registroatendimento.EspecificacaoTipoValidacao;
import gcom.atendimentopublico.registroatendimento.LocalOcorrencia;
import gcom.atendimentopublico.registroatendimento.LocalidadeEspecificacaoUnidade;
import gcom.atendimentopublico.registroatendimento.LocalidadeSolicTipoGrupo;
import gcom.atendimentopublico.registroatendimento.MeioSolicitacao;
import gcom.atendimentopublico.registroatendimento.OcorrenciaOperacional;
import gcom.atendimentopublico.registroatendimento.OcorrenciaOperacionalMotivo;
import gcom.atendimentopublico.registroatendimento.OcorrenciaOperacionalTipo;
import gcom.atendimentopublico.registroatendimento.RAReiteracao;
import gcom.atendimentopublico.registroatendimento.RAReiteracaoFone;
import gcom.atendimentopublico.registroatendimento.RaDadosAgenciaReguladora;
import gcom.atendimentopublico.registroatendimento.RaDadosAgenciaReguladoraFone;
import gcom.atendimentopublico.registroatendimento.RaEncerramentoComando;
import gcom.atendimentopublico.registroatendimento.RaEncerramentoComandoEspecificacoes;
import gcom.atendimentopublico.registroatendimento.RaEnderecoDescritivo;
import gcom.atendimentopublico.registroatendimento.RaMotivoReativacao;
import gcom.atendimentopublico.registroatendimento.RegistroAtendimento;
import gcom.atendimentopublico.registroatendimento.RegistroAtendimentoAnexo;
import gcom.atendimentopublico.registroatendimento.RegistroAtendimentoConta;
import gcom.atendimentopublico.registroatendimento.RegistroAtendimentoPagamentoDuplicidade;
import gcom.atendimentopublico.registroatendimento.RegistroAtendimentoSolicitante;
import gcom.atendimentopublico.registroatendimento.RegistroAtendimentoUnidade;
import gcom.atendimentopublico.registroatendimento.SolicitacaoDocumentoObrigatorio;
import gcom.atendimentopublico.registroatendimento.SolicitacaoTipo;
import gcom.atendimentopublico.registroatendimento.SolicitacaoTipoEspecificacao;
import gcom.atendimentopublico.registroatendimento.SolicitacaoTipoGrupo;
import gcom.atendimentopublico.registroatendimento.SolicitanteFone;
import gcom.atendimentopublico.registroatendimento.Tramite;
import gcom.atendimentopublico.registroatendimento.VisualizacaoRegistroAtendimentoUrgencia;
import gcom.atualizacaocadastral.AreaAtualizacaoCadastralDM;
import gcom.atualizacaocadastral.ArquivoTextoAtualizacaoCadastralDM;
import gcom.atualizacaocadastral.AtributoAtualizacaoCadastralDM;
import gcom.atualizacaocadastral.CepAtlzCadDM;
import gcom.atualizacaocadastral.ClienteAtualizacaoCadastralDM;
import gcom.atualizacaocadastral.ClienteFoneAtualizacaoCadastralDM;
import gcom.atualizacaocadastral.DadosFinanceirosAtualizacaoCadastralDM;
import gcom.atualizacaocadastral.HidrometroInstalacaoHistoricoAtualizacaoCadastralDM;
import gcom.atualizacaocadastral.ImovelAtualizacaoCadastralDM;
import gcom.atualizacaocadastral.ImovelFotoAtualizacaoCadastralDM;
import gcom.atualizacaocadastral.ImovelOcorrenciaAtualizacaoCadastralDM;
import gcom.atualizacaocadastral.ImovelSubcategoriaAtualizacaoCadastralDM;
import gcom.atualizacaocadastral.LogradouroAtlzCadDM;
import gcom.atualizacaocadastral.LogradouroBairroAtlzCadDM;
import gcom.atualizacaocadastral.LogradouroCepAtlzCadDM;
import gcom.atualizacaocadastral.MapaAtualizacaoCadastralDM;
import gcom.atualizacaocadastral.MensagemAtualizacaoCadastralDM;
import gcom.atualizacaocadastral.OrdemServicoAtualizacaoCadastralDM;
import gcom.atualizacaocadastral.ParametroQuadraAtualizacaoCadastralDM;
import gcom.atualizacaocadastral.ParametroTabelaAtualizacaoCadastralDM;
import gcom.atualizacaocadastral.ResumoDadosFinanceirosAtualizacaoCadastralDM;
import gcom.atualizacaocadastral.RetornoAtualizacaoCadastralDM;
import gcom.atualizacaocadastral.SituacaoTransmissaoAtualizacaoCadastralDM;
import gcom.batch.FuncionalidadeIniciada;
import gcom.batch.FuncionalidadeSituacao;
import gcom.batch.Processo;
import gcom.batch.ProcessoFuncionalidade;
import gcom.batch.ProcessoIniciado;
import gcom.batch.ProcessoSituacao;
import gcom.batch.ProcessoTipo;
import gcom.batch.Relatorio;
import gcom.batch.RelatorioGerado;
import gcom.batch.UnidadeIniciada;
import gcom.batch.UnidadeProcessamento;
import gcom.batch.UnidadeSituacao;
import gcom.batch.auxiliarbatch.CobrancaDocumentoControleGeracao;
import gcom.cadastro.ArquivoTextoAtualizacaoCadastral;
import gcom.cadastro.ContaBraile;
import gcom.cadastro.ContaEmpresaSMS;
import gcom.cadastro.CpfTipo;
import gcom.cadastro.DbVersaoBase;
import gcom.cadastro.EmailClienteAlterado;
import gcom.cadastro.EmpresaContratoCadastro;
import gcom.cadastro.EmpresaContratoCadastroAtributo;
import gcom.cadastro.EnvioEmail;
import gcom.cadastro.MensagemEmailFaturamentoCobranca;
import gcom.cadastro.MensagemEmailHistorico;
import gcom.cadastro.MensagemRetornoReceitaFederal;
import gcom.cadastro.MensagemSMSFaturamentoCobranca;
import gcom.cadastro.MensagemSMSHistorico;
import gcom.cadastro.MotivoRetiradaCobranca;
import gcom.cadastro.ParametroTabelaAtualizacaoCadastro;
import gcom.cadastro.ParametrosMSGSMSEmail;
import gcom.cadastro.SMSSequenciaEnvio;
import gcom.cadastro.SistemaAndroid;
import gcom.cadastro.SituacaoAtualizacaoCadastral;
import gcom.cadastro.VersaoMobile;
import gcom.cadastro.VersaoSistemasAndroid;
import gcom.cadastro.atualizacaocadastralsimplificado.AtualizacaoCadastralSimplificado;
import gcom.cadastro.atualizacaocadastralsimplificado.AtualizacaoCadastralSimplificadoBinario;
import gcom.cadastro.atualizacaocadastralsimplificado.AtualizacaoCadastralSimplificadoCritica;
import gcom.cadastro.atualizacaocadastralsimplificado.AtualizacaoCadastralSimplificadoCriticaTipo;
import gcom.cadastro.atualizacaocadastralsimplificado.AtualizacaoCadastralSimplificadoLinha;
import gcom.cadastro.cliente.Cliente;
import gcom.cadastro.cliente.ClienteAtualizacaoCadastral;
import gcom.cadastro.cliente.ClienteConta;
import gcom.cadastro.cliente.ClienteContaAnterior;
import gcom.cadastro.cliente.ClienteContaHistorico;
import gcom.cadastro.cliente.ClienteEndereco;
import gcom.cadastro.cliente.ClienteFone;
import gcom.cadastro.cliente.ClienteFoneAtualizacaoCadastral;
import gcom.cadastro.cliente.ClienteGuiaPagamento;
import gcom.cadastro.cliente.ClienteGuiaPagamentoHistorico;
import gcom.cadastro.cliente.ClienteImovel;
import gcom.cadastro.cliente.ClienteImovelEconomia;
import gcom.cadastro.cliente.ClienteImovelFimRelacaoMotivo;
import gcom.cadastro.cliente.ClienteRelacaoTipo;
import gcom.cadastro.cliente.ClienteTipo;
import gcom.cadastro.cliente.ClienteVirtual;
import gcom.cadastro.cliente.EsferaPoder;
import gcom.cadastro.cliente.FoneTipo;
import gcom.cadastro.cliente.OrgaoExpedidorRg;
import gcom.cadastro.cliente.PessoaSexo;
import gcom.cadastro.cliente.Profissao;
import gcom.cadastro.cliente.RamoAtividade;
import gcom.cadastro.dadocensitario.FonteDadosCensitario;
import gcom.cadastro.dadocensitario.IbgeSetorCensitario;
import gcom.cadastro.dadocensitario.IbgeSetorCensitarioDado;
import gcom.cadastro.dadocensitario.LocalidadeDadosCensitario;
import gcom.cadastro.dadocensitario.MunicipioDadosCensitario;
import gcom.cadastro.descricaogenerica.DescricaoGenerica;
import gcom.cadastro.empresa.Empresa;
import gcom.cadastro.empresa.EmpresaCobranca;
import gcom.cadastro.empresa.EmpresaCobrancaFaixa;
import gcom.cadastro.empresa.EmpresaContratoCobranca;
import gcom.cadastro.endereco.Cep;
import gcom.cadastro.endereco.CepTipo;
import gcom.cadastro.endereco.EnderecoReferencia;
import gcom.cadastro.endereco.EnderecoTipo;
import gcom.cadastro.endereco.Logradouro;
import gcom.cadastro.endereco.LogradouroBairro;
import gcom.cadastro.endereco.LogradouroCep;
import gcom.cadastro.endereco.LogradouroTipo;
import gcom.cadastro.endereco.LogradouroTitulo;
import gcom.cadastro.funcionario.Funcionario;
import gcom.cadastro.funcionario.FuncionarioCargo;
import gcom.cadastro.geografico.Bairro;
import gcom.cadastro.geografico.BairroArea;
import gcom.cadastro.geografico.Microrregiao;
import gcom.cadastro.geografico.Municipio;
import gcom.cadastro.geografico.MunicipioFeriado;
import gcom.cadastro.geografico.Regiao;
import gcom.cadastro.geografico.RegiaoDesenvolvimento;
import gcom.cadastro.geografico.UnidadeFederacao;
import gcom.cadastro.imovel.AreaConstruidaFaixa;
import gcom.cadastro.imovel.CadastroOcorrencia;
import gcom.cadastro.imovel.Categoria;
import gcom.cadastro.imovel.CategoriaTipo;
import gcom.cadastro.imovel.Despejo;
import gcom.cadastro.imovel.EloAnormalidade;
import gcom.cadastro.imovel.EntidadeBeneficente;
import gcom.cadastro.imovel.FonteAbastecimento;
import gcom.cadastro.imovel.Imovel;
import gcom.cadastro.imovel.ImovelAtualizacaoCadastral;
import gcom.cadastro.imovel.ImovelCadastroOcorrencia;
import gcom.cadastro.imovel.ImovelCobrancaSituacao;
import gcom.cadastro.imovel.ImovelContaEnvio;
import gcom.cadastro.imovel.ImovelDoacao;
import gcom.cadastro.imovel.ImovelEconomia;
import gcom.cadastro.imovel.ImovelEloAnormalidade;
import gcom.cadastro.imovel.ImovelEnderecoAnterior;
import gcom.cadastro.imovel.ImovelHistoricoPerfil;
import gcom.cadastro.imovel.ImovelInscricaoAlterada;
import gcom.cadastro.imovel.ImovelPerfil;
import gcom.cadastro.imovel.ImovelPerfilCapacidadeHidrometro;
import gcom.cadastro.imovel.ImovelProgramaEspecial;
import gcom.cadastro.imovel.ImovelRamoAtividade;
import gcom.cadastro.imovel.ImovelSituacao;
import gcom.cadastro.imovel.ImovelSituacaoTipo;
import gcom.cadastro.imovel.ImovelSubcategoria;
import gcom.cadastro.imovel.ImovelSubcategoriaAtualizacaoCadastral;
import gcom.cadastro.imovel.ImovelSuprimido;
import gcom.cadastro.imovel.ImovelTipoCobertura;
import gcom.cadastro.imovel.ImovelTipoConstrucao;
import gcom.cadastro.imovel.ImovelTipoHabitacao;
import gcom.cadastro.imovel.ImovelTipoPropriedade;
import gcom.cadastro.imovel.ItemMovimentoProgramaEspecial;
import gcom.cadastro.imovel.MovimentoProgramaEspecial;
import gcom.cadastro.imovel.PavimentoCalcada;
import gcom.cadastro.imovel.PavimentoRua;
import gcom.cadastro.imovel.PerfilAlteracaoMotivo;
import gcom.cadastro.imovel.PerfilAlteracaoTipo;
import gcom.cadastro.imovel.PiscinaVolumeFaixa;
import gcom.cadastro.imovel.PocoTipo;
import gcom.cadastro.imovel.ReservatorioVolumeFaixa;
import gcom.cadastro.imovel.Subcategoria;
import gcom.cadastro.imovel.VwImovelPrincipalCategoria;
import gcom.cadastro.localidade.AreaTipo;
import gcom.cadastro.localidade.CondicaoAbastecimentoAgua;
import gcom.cadastro.localidade.GerenciaRegional;
import gcom.cadastro.localidade.GrauDificuldadeExecucao;
import gcom.cadastro.localidade.GrauIntermitencia;
import gcom.cadastro.localidade.GrauRiscoSegurancaFisica;
import gcom.cadastro.localidade.Localidade;
import gcom.cadastro.localidade.LocalidadeClasse;
import gcom.cadastro.localidade.LocalidadePorte;
import gcom.cadastro.localidade.NivelPressao;
import gcom.cadastro.localidade.Quadra;
import gcom.cadastro.localidade.QuadraFace;
import gcom.cadastro.localidade.QuadraPerfil;
import gcom.cadastro.localidade.SetorComercial;
import gcom.cadastro.localidade.UnidadeNegocio;
import gcom.cadastro.localidade.Zeis;
import gcom.cadastro.projeto.Projeto;
import gcom.cadastro.sistemaparametro.NacionalFeriado;
import gcom.cadastro.sistemaparametro.SistemaAlteracaoHistorico;
import gcom.cadastro.sistemaparametro.SistemaParametro;
import gcom.cadastro.tarifasocial.RendaTipo;
import gcom.cadastro.tarifasocial.TarifaSocialCarta;
import gcom.cadastro.tarifasocial.TarifaSocialCartaDebito;
import gcom.cadastro.tarifasocial.TarifaSocialCartaoTipo;
import gcom.cadastro.tarifasocial.TarifaSocialComandoCarta;
import gcom.cadastro.tarifasocial.TarifaSocialDadoEconomia;
import gcom.cadastro.tarifasocial.TarifaSocialExclusaoMotivo;
import gcom.cadastro.tarifasocial.TarifaSocialMotivoCarta;
import gcom.cadastro.tarifasocial.TarifaSocialRevisaoMotivo;
import gcom.cadastro.unidade.UnidadeOrganizacional;
import gcom.cadastro.unidade.UnidadeOrganizacionalMunicipio;
import gcom.cadastro.unidade.UnidadeRepavimentadoraCustoPavimentoCalcada;
import gcom.cadastro.unidade.UnidadeRepavimentadoraCustoPavimentoRua;
import gcom.cadastro.unidade.UnidadeTipo;
import gcom.cobranca.*;
import gcom.cobranca.contratoparcelamento.ContratoParcelamento;
import gcom.cobranca.contratoparcelamento.ContratoParcelamentoCliente;
import gcom.cobranca.contratoparcelamento.ContratoParcelamentoItem;
import gcom.cobranca.contratoparcelamento.ContratoParcelamentoRD;
import gcom.cobranca.contratoparcelamento.PrestacaoContratoParcelamento;
import gcom.cobranca.contratoparcelamento.PrestacaoItemContratoParcelamento;
import gcom.cobranca.contratoparcelamento.QuantidadePrestacoes;
import gcom.cobranca.contratoparcelamento.TipoRelacao;
import gcom.cobranca.parcelamento.PagamentoCartaoCreditoItem;
import gcom.cobranca.parcelamento.ParcDesctoInativVista;
import gcom.cobranca.parcelamento.Parcelamento;
import gcom.cobranca.parcelamento.ParcelamentoDescontoAntiguidade;
import gcom.cobranca.parcelamento.ParcelamentoDescontoInatividade;
import gcom.cobranca.parcelamento.ParcelamentoFaixaValor;
import gcom.cobranca.parcelamento.ParcelamentoItem;
import gcom.cobranca.parcelamento.ParcelamentoMotivoDesfazer;
import gcom.cobranca.parcelamento.ParcelamentoPagamentoCartaoCredito;
import gcom.cobranca.parcelamento.ParcelamentoPerfil;
import gcom.cobranca.parcelamento.ParcelamentoPerfilDebitos;
import gcom.cobranca.parcelamento.ParcelamentoQuantidadePrestacao;
import gcom.cobranca.parcelamento.ParcelamentoQuantidadePrestacaoSituacaoLigacaoAgua;
import gcom.cobranca.parcelamento.ParcelamentoQuantidadeReparcelamento;
import gcom.cobranca.parcelamento.ParcelamentoSituacao;
import gcom.cobranca.parcelamento.ParcelamentoTipo;
import gcom.faturamento.ConsumoFaixaCategoria;
import gcom.faturamento.ConsumoFaixaLigacao;
import gcom.faturamento.ConsumoMinimoParametro;
import gcom.faturamento.ContaRevisaoFaixaValor;
import gcom.faturamento.DocumentoNaoEntregue;
import gcom.faturamento.ExtratoQuitacao;
import gcom.faturamento.ExtratoQuitacaoItem;
import gcom.faturamento.FaturamentoAtivCronRota;
import gcom.faturamento.FaturamentoAtividade;
import gcom.faturamento.FaturamentoAtividadeCronograma;
import gcom.faturamento.FaturamentoContabilParametros;
import gcom.faturamento.FaturamentoDados;
import gcom.faturamento.FaturamentoGrupo;
import gcom.faturamento.FaturamentoGrupoCanceladoHistorico;
import gcom.faturamento.FaturamentoGrupoCronogramaMensal;
import gcom.faturamento.FaturamentoImediatoAjuste;
import gcom.faturamento.FaturamentoSituacaoComando;
import gcom.faturamento.FaturamentoSituacaoHistorico;
import gcom.faturamento.FaturamentoSituacaoMotivo;
import gcom.faturamento.FaturamentoSituacaoTipo;
import gcom.faturamento.FaturamentoTipo;
import gcom.faturamento.GuiaPagamentoGeral;
import gcom.faturamento.HistogramaAguaEconomia;
import gcom.faturamento.HistogramaAguaEconomiaSemQuadra;
import gcom.faturamento.HistogramaAguaLigacao;
import gcom.faturamento.HistogramaAguaLigacaoSemQuadra;
import gcom.faturamento.HistogramaEsgotoEconomia;
import gcom.faturamento.HistogramaEsgotoEconomiaSemQuadra;
import gcom.faturamento.HistogramaEsgotoLigacao;
import gcom.faturamento.HistogramaEsgotoLigacaoSemQuadra;
import gcom.faturamento.ImpostoTipo;
import gcom.faturamento.ImpostoTipoAliquota;
import gcom.faturamento.MotivoInterferenciaTipo;
import gcom.faturamento.MovimentoContaCategoriaConsumoFaixa;
import gcom.faturamento.MovimentoContaImpostoDeduzido;
import gcom.faturamento.MovimentoContaPrefaturada;
import gcom.faturamento.MovimentoContaPrefaturadaCategoria;
import gcom.faturamento.Prescricao;
import gcom.faturamento.QualidadeAgua;
import gcom.faturamento.QualidadeAguaPadrao;
import gcom.faturamento.ResumoFaturamentoSimulacao;
import gcom.faturamento.ResumoFaturamentoSimulacaoCredito;
import gcom.faturamento.ResumoFaturamentoSimulacaoDebito;
import gcom.faturamento.ResumoFaturamentoSituacaoEspecial;
import gcom.faturamento.ResumoFaturamentoSituacaoEspecialDetalhe;
import gcom.faturamento.TarifaTipoCalculo;
import gcom.faturamento.VencimentoAlternativo;
import gcom.faturamento.autoinfracao.AutoInfracaoSituacao;
import gcom.faturamento.autoinfracao.AutosInfracao;
import gcom.faturamento.autoinfracao.AutosInfracaoDebitoACobrar;
import gcom.faturamento.consumotarifa.ConsumoTarifa;
import gcom.faturamento.consumotarifa.ConsumoTarifaCategoria;
import gcom.faturamento.consumotarifa.ConsumoTarifaFaixa;
import gcom.faturamento.consumotarifa.ConsumoTarifaVigencia;
import gcom.faturamento.conta.Conta;
import gcom.faturamento.conta.ContaCategoria;
import gcom.faturamento.conta.ContaCategoriaConsumoFaixa;
import gcom.faturamento.conta.ContaCategoriaConsumoFaixaHistorico;
import gcom.faturamento.conta.ContaCategoriaHistorico;
import gcom.faturamento.conta.ContaComunicado;
import gcom.faturamento.conta.ContaComunicadoFaturamentoGrupo;
import gcom.faturamento.conta.ContaComunicadoQuadra;
import gcom.faturamento.conta.ContaComunicadoRota;
import gcom.faturamento.conta.ContaComunicadoSetor;
import gcom.faturamento.conta.ContaEmissao2Via;
import gcom.faturamento.conta.ContaGeral;
import gcom.faturamento.conta.ContaHistorico;
import gcom.faturamento.conta.ContaImpostosDeduzidos;
import gcom.faturamento.conta.ContaImpostosDeduzidosHistorico;
import gcom.faturamento.conta.ContaImpressao;
import gcom.faturamento.conta.ContaMensagem;
import gcom.faturamento.conta.ContaMotivoCancelamento;
import gcom.faturamento.conta.ContaMotivoInclusao;
import gcom.faturamento.conta.ContaMotivoRetificacao;
import gcom.faturamento.conta.ContaMotivoRetificacaoColuna;
import gcom.faturamento.conta.ContaMotivoRevisao;
import gcom.faturamento.conta.ContaTipo;
import gcom.faturamento.conta.Fatura;
import gcom.faturamento.conta.FaturaItem;
import gcom.faturamento.conta.FaturaItemHistorico;
import gcom.faturamento.conta.MotivoNaoEntregaDocumento;
import gcom.faturamento.conta.Refaturamento;
import gcom.faturamento.contratodemanda.ContratoDemandaFaixaConsumo;
import gcom.faturamento.contratodemanda.ContratoDemandaImovel;
import gcom.faturamento.contratodemanda.ContratoDemandaMotivoEncerramento;
import gcom.faturamento.contratodemanda.ContratoDemandaSituacao;
import gcom.faturamento.credito.CreditoARealizar;
import gcom.faturamento.credito.CreditoARealizarCategoria;
import gcom.faturamento.credito.CreditoARealizarCategoriaHistorico;
import gcom.faturamento.credito.CreditoARealizarGeral;
import gcom.faturamento.credito.CreditoARealizarHistorico;
import gcom.faturamento.credito.CreditoOrigem;
import gcom.faturamento.credito.CreditoRealizado;
import gcom.faturamento.credito.CreditoRealizadoCategoria;
import gcom.faturamento.credito.CreditoRealizadoCategoriaHistorico;
import gcom.faturamento.credito.CreditoRealizadoHistorico;
import gcom.faturamento.credito.CreditoTipo;
import gcom.faturamento.debito.DebitoACobrar;
import gcom.faturamento.debito.DebitoACobrarCategoria;
import gcom.faturamento.debito.DebitoACobrarCategoriaHistorico;
import gcom.faturamento.debito.DebitoACobrarGeral;
import gcom.faturamento.debito.DebitoACobrarHistorico;
import gcom.faturamento.debito.DebitoCobrado;
import gcom.faturamento.debito.DebitoCobradoCategoria;
import gcom.faturamento.debito.DebitoCobradoCategoriaHistorico;
import gcom.faturamento.debito.DebitoCobradoHistorico;
import gcom.faturamento.debito.DebitoCreditoSituacao;
import gcom.faturamento.debito.DebitoFaixaValore;
import gcom.faturamento.debito.DebitoTipo;
import gcom.faturamento.debito.DebitoTipoVigencia;
import gcom.financeiro.ContaAReceberContabil;
import gcom.financeiro.ContaContabil;
import gcom.financeiro.DevedoresDuvidososContabilParametro;
import gcom.financeiro.DocumentosAReceberFaixaResumo;
import gcom.financeiro.DocumentosAReceberResumo;
import gcom.financeiro.FaixaDocumentosAReceber;
import gcom.financeiro.FinanciamentoTipo;
import gcom.financeiro.LancamentoResumo;
import gcom.financeiro.LancamentoResumoConta;
import gcom.financeiro.LancamentoResumoContaHistorico;
import gcom.financeiro.LancamentoResumoValorTipo;
import gcom.financeiro.ParametrosDevedoresDuvidosos;
import gcom.financeiro.ParametrosDevedoresDuvidososItem;
import gcom.financeiro.ParametrosPerdasOrgaoPublico;
import gcom.financeiro.ParametrosPerdasSocietarias;
import gcom.financeiro.PerdasTipo;
import gcom.financeiro.ResumoDevedoresDuvidosos;
import gcom.financeiro.ResumoFaturamento;
import gcom.financeiro.ResumoReceita;
import gcom.financeiro.ValorConsumidoNaoFaturadoParametro;
import gcom.financeiro.ValorVolumesConsumidosNaoFaturado;
import gcom.financeiro.lancamento.LancamentoContabil;
import gcom.financeiro.lancamento.LancamentoContabilItem;
import gcom.financeiro.lancamento.LancamentoItem;
import gcom.financeiro.lancamento.LancamentoItemContabil;
import gcom.financeiro.lancamento.LancamentoOrigem;
import gcom.financeiro.lancamento.LancamentoTipo;
import gcom.financeiro.lancamento.LancamentoTipoItem;
import gcom.gerencial.arrecadacao.GArrecadacaoForma;
import gcom.gerencial.arrecadacao.GArrecadador;
import gcom.gerencial.arrecadacao.GDevolucaoSituacao;
import gcom.gerencial.arrecadacao.UnResumoArrecadacao;
import gcom.gerencial.arrecadacao.UnResumoArrecadacaoAguaEsgoto;
import gcom.gerencial.arrecadacao.UnResumoArrecadacaoCredito;
import gcom.gerencial.arrecadacao.UnResumoArrecadacaoOutro;
import gcom.gerencial.arrecadacao.UnResumoArrecadacaoPorAno;
import gcom.gerencial.arrecadacao.pagamento.GEpocaPagamento;
import gcom.gerencial.arrecadacao.pagamento.GPagamentoSituacao;
import gcom.gerencial.atendimentopublico.ligacaoagua.GLigacaoAguaPerfil;
import gcom.gerencial.atendimentopublico.ligacaoagua.GLigacaoAguaSituacao;
import gcom.gerencial.atendimentopublico.ligacaoesgoto.GLigacaoEsgotoPerfil;
import gcom.gerencial.atendimentopublico.ligacaoesgoto.GLigacaoEsgotoSituacao;
import gcom.gerencial.atendimentopublico.registroatendimento.GAtendimentoMotivoEncerramento;
import gcom.gerencial.atendimentopublico.registroatendimento.GMeioSolicitacao;
import gcom.gerencial.atendimentopublico.registroatendimento.GSolicitacaoTipo;
import gcom.gerencial.atendimentopublico.registroatendimento.GSolicitacaoTipoEspecificacao;
import gcom.gerencial.atendimentopublico.registroatendimento.UnResumoRegistroAtendimento;
import gcom.gerencial.atendimentopublico.registroatendimento.UnResumoRegistroAtendimentoPorAno;
import gcom.gerencial.cadastro.GEmpresa;
import gcom.gerencial.cadastro.Indicador;
import gcom.gerencial.cadastro.RgResumoLigacaoEconomia;
import gcom.gerencial.cadastro.UnResumoConsumoAgua;
import gcom.gerencial.cadastro.UnResumoIndicadorLigacaoEconomia;
import gcom.gerencial.cadastro.UnResumoLigacaoEconomia;
import gcom.gerencial.cadastro.cliente.GClienteTipo;
import gcom.gerencial.cadastro.cliente.GEsferaPoder;
import gcom.gerencial.cadastro.geografico.GBairro;
import gcom.gerencial.cadastro.geografico.GMicrorregiao;
import gcom.gerencial.cadastro.geografico.GMunicipio;
import gcom.gerencial.cadastro.geografico.GRegiao;
import gcom.gerencial.cadastro.imovel.GCategoria;
import gcom.gerencial.cadastro.imovel.GImovelPerfil;
import gcom.gerencial.cadastro.imovel.GSubcategoria;
import gcom.gerencial.cadastro.localidade.GGerenciaRegional;
import gcom.gerencial.cadastro.localidade.GLocalidade;
import gcom.gerencial.cadastro.localidade.GLocalidadePorte;
import gcom.gerencial.cadastro.localidade.GQuadra;
import gcom.gerencial.cadastro.localidade.GSetorComercial;
import gcom.gerencial.cadastro.localidade.GUnidadeNegocio;
import gcom.gerencial.cadastro.unidade.GUnidadeOrganizacional;
import gcom.gerencial.cobranca.FaixaValor;
import gcom.gerencial.cobranca.GDocumentoTipo;
import gcom.gerencial.cobranca.UnResumoIndicadoresCobranca;
import gcom.gerencial.cobranca.UnResumoParcelamento;
import gcom.gerencial.cobranca.UnResumoParcelamentoPorAno;
import gcom.gerencial.cobranca.UnResumoPendencia;
import gcom.gerencial.cobranca.UnResumoPendenciaSemQuadra;
import gcom.gerencial.faturamento.GConsumoTarifa;
import gcom.gerencial.faturamento.GFaturamentoGrupo;
import gcom.gerencial.faturamento.GImpostoTipo;
import gcom.gerencial.faturamento.UnResumoFaturamento;
import gcom.gerencial.faturamento.UnResumoIndicadoresFaturamento;
import gcom.gerencial.faturamento.UnResumoRefaturamento;
import gcom.gerencial.faturamento.credito.GCreditoOrigem;
import gcom.gerencial.faturamento.credito.GCreditoTipo;
import gcom.gerencial.faturamento.debito.GDebitoTipo;
import gcom.gerencial.financeiro.GFinanciamentoTipo;
import gcom.gerencial.financeiro.lancamento.GLancamentoItem;
import gcom.gerencial.financeiro.lancamento.GLancamentoItemContabil;
import gcom.gerencial.micromedicao.GRota;
import gcom.gerencial.micromedicao.UnResumoColetaEsgoto;
import gcom.gerencial.micromedicao.UnResumoHidrometro;
import gcom.gerencial.micromedicao.UnResumoIndicadorDesempenhoMicromedicao;
import gcom.gerencial.micromedicao.UnResumoIndicadorDesempenhoMicromedicaoRef2010;
import gcom.gerencial.micromedicao.UnResumoInstalacaoHidrometro;
import gcom.gerencial.micromedicao.UnResumoInstalacaoHidrometroPorAno;
import gcom.gerencial.micromedicao.UnResumoLeituraAnormalidade;
import gcom.gerencial.micromedicao.UnResumoMeta;
import gcom.gerencial.micromedicao.UnResumoMetasAcumulado;
import gcom.gerencial.micromedicao.consumo.GConsumoTipo;
import gcom.gerencial.micromedicao.hidrometro.GHidrometroCapacidade;
import gcom.gerencial.micromedicao.hidrometro.GHidrometroClasseMetrologica;
import gcom.gerencial.micromedicao.hidrometro.GHidrometroDiametro;
import gcom.gerencial.micromedicao.hidrometro.GHidrometroLocalArmazenagem;
import gcom.gerencial.micromedicao.hidrometro.GHidrometroMarca;
import gcom.gerencial.micromedicao.hidrometro.GHidrometroMotivoBaixa;
import gcom.gerencial.micromedicao.hidrometro.GHidrometroSituacao;
import gcom.gerencial.micromedicao.hidrometro.GHidrometroTipo;
import gcom.gerencial.micromedicao.leitura.GLeituraSituacao;
import gcom.gerencial.micromedicao.medicao.GMedicaoTipo;
import gcom.gerencial.operacional.GDistritoOperacional;
import gcom.integracao.ServicoTerceiroAcompanhamentoServico;
import gcom.interceptor.Interceptador;
import gcom.micromedicao.ArquivoTextoRoteiroEmpresa;
import gcom.micromedicao.ArquivoTextoRoteiroEmpresaDivisao;
import gcom.micromedicao.ConsumoMinimoArea;
import gcom.micromedicao.ContratoEmpresaAditivo;
import gcom.micromedicao.ContratoEmpresaServico;
import gcom.micromedicao.ImovelTestesMedicaoConsumo;
import gcom.micromedicao.ItemContratoServicoTipo;
import gcom.micromedicao.ItemServico;
import gcom.micromedicao.ItemServicoContrato;
import gcom.micromedicao.Leiturista;
import gcom.micromedicao.MovimentoRoteiroEmpresa;
import gcom.micromedicao.MovimentoRoteiroEmpresaFoto;
import gcom.micromedicao.RateioTipo;
import gcom.micromedicao.ReleituraMobile;
import gcom.micromedicao.ResumoAnormalidadeLeitura;
import gcom.micromedicao.Rota;
import gcom.micromedicao.RotaAtualizacaoSeq;
import gcom.micromedicao.RoteiroEmpresa;
import gcom.micromedicao.ServicoTipoCelular;
import gcom.micromedicao.SituacaoTransmissaoLeitura;
import gcom.micromedicao.TelemetriaLog;
import gcom.micromedicao.TelemetriaLogErro;
import gcom.micromedicao.TelemetriaMov;
import gcom.micromedicao.TelemetriaMovReg;
import gcom.micromedicao.TelemetriaRetMot;
import gcom.micromedicao.consumo.ConsumoAnormalidade;
import gcom.micromedicao.consumo.ConsumoAnormalidadeAcao;
import gcom.micromedicao.consumo.ConsumoHistorico;
import gcom.micromedicao.consumo.ConsumoHistoricoAnterior;
import gcom.micromedicao.consumo.ConsumoTipo;
import gcom.micromedicao.consumo.LigacaoTipo;
import gcom.micromedicao.consumo.ResumoAnormalidadeConsumo;
import gcom.micromedicao.hidrometro.Hidrometro;
import gcom.micromedicao.hidrometro.HidrometroCapacidade;
import gcom.micromedicao.hidrometro.HidrometroClasseMetrologica;
import gcom.micromedicao.hidrometro.HidrometroClassePressao;
import gcom.micromedicao.hidrometro.HidrometroDiametro;
import gcom.micromedicao.hidrometro.HidrometroFaixaIdade;
import gcom.micromedicao.hidrometro.HidrometroFatorCorrecao;
import gcom.micromedicao.hidrometro.HidrometroInstalacaoHistorico;
import gcom.micromedicao.hidrometro.HidrometroLocalArmazenagem;
import gcom.micromedicao.hidrometro.HidrometroLocalInstalacao;
import gcom.micromedicao.hidrometro.HidrometroMarca;
import gcom.micromedicao.hidrometro.HidrometroMotivoBaixa;
import gcom.micromedicao.hidrometro.HidrometroMotivoMovimentacao;
import gcom.micromedicao.hidrometro.HidrometroMovimentacao;
import gcom.micromedicao.hidrometro.HidrometroMovimentado;
import gcom.micromedicao.hidrometro.HidrometroProtecao;
import gcom.micromedicao.hidrometro.HidrometroRelojoaria;
import gcom.micromedicao.hidrometro.HidrometroSituacao;
import gcom.micromedicao.hidrometro.HidrometroTipo;
import gcom.micromedicao.hidrometro.RetornoControleHidrometro;
import gcom.micromedicao.leitura.LeituraAnormalidade;
import gcom.micromedicao.leitura.LeituraAnormalidadeConsumo;
import gcom.micromedicao.leitura.LeituraAnormalidadeLeitura;
import gcom.micromedicao.leitura.LeituraFaixaFalsa;
import gcom.micromedicao.leitura.LeituraFiscalizacao;
import gcom.micromedicao.leitura.LeituraSituacao;
import gcom.micromedicao.leitura.LeituraTipo;
import gcom.micromedicao.medicao.MedicaoHistorico;
import gcom.micromedicao.medicao.MedicaoHistoricoAnterior;
import gcom.micromedicao.medicao.MedicaoTipo;
import gcom.mobile.execucaoordemservico.ArquivoTextoOSCobranca;
import gcom.mobile.execucaoordemservico.ArquivoTextoOSCobrancaCliente;
import gcom.mobile.execucaoordemservico.ArquivoTextoOSCobrancaItem;
import gcom.mobile.execucaoordemservico.ExecucaoOSCliente;
import gcom.mobile.execucaoordemservico.ExecucaoOSCorte;
import gcom.mobile.execucaoordemservico.ExecucaoOSFiscalizacao;
import gcom.mobile.execucaoordemservico.ExecucaoOSFoto;
import gcom.mobile.execucaoordemservico.ExecucaoOSOrdemServico;
import gcom.mobile.execucaoordemservico.ExecucaoOSSituacoesEncontradas;
import gcom.mobile.execucaoordemservico.ExecucaoOSVisita;
import gcom.mobile.execucaoordemservico.ParametrosArquivoTextoOSCobranca;
import gcom.mobile.execucaoordemservico.ParametrosArquivoTextoOSLocalidade;
import gcom.operacional.Bacia;
import gcom.operacional.DistritoOperacional;
import gcom.operacional.DivisaoEsgoto;
import gcom.operacional.FonteCaptacao;
import gcom.operacional.ProducaoAgua;
import gcom.operacional.SetorAbastecimento;
import gcom.operacional.SetorFonteCaptacao;
import gcom.operacional.SistemaAbastecimento;
import gcom.operacional.SistemaEsgoto;
import gcom.operacional.SistemaEsgotoTratamentoTipo;
import gcom.operacional.TipoCaptacao;
import gcom.operacional.ZonaAbastecimento;
import gcom.operacional.ZonaPressao;
import gcom.operacional.abastecimento.AbastecimentoProgramacao;
import gcom.operacional.abastecimento.ManutencaoProgramacao;
import gcom.seguranca.Atributo;
import gcom.seguranca.AtributoGrupo;
import gcom.seguranca.ConsultarReceitaFederal;
import gcom.seguranca.FuncionalidadeAtributo;
import gcom.seguranca.acesso.ControleLiberacaoPermissaoEspecial;
import gcom.seguranca.acesso.Funcionalidade;
import gcom.seguranca.acesso.FuncionalidadeCategoria;
import gcom.seguranca.acesso.FuncionalidadeDependencia;
import gcom.seguranca.acesso.Grupo;
import gcom.seguranca.acesso.GrupoAcesso;
import gcom.seguranca.acesso.GrupoFuncionalidadeOperacao;
import gcom.seguranca.acesso.GrupoPermissaoEspecial;
import gcom.seguranca.acesso.Modulo;
import gcom.seguranca.acesso.Operacao;
import gcom.seguranca.acesso.OperacaoEfetuada;
import gcom.seguranca.acesso.OperacaoOrdemExibicao;
import gcom.seguranca.acesso.OperacaoTabela;
import gcom.seguranca.acesso.OperacaoTipo;
import gcom.seguranca.acesso.PermissaoEspecial;
import gcom.seguranca.acesso.usuario.SolicitacaoAcesso;
import gcom.seguranca.acesso.usuario.SolicitacaoAcessoGrupo;
import gcom.seguranca.acesso.usuario.SolicitacaoAcessoSituacao;
import gcom.seguranca.acesso.usuario.Usuario;
import gcom.seguranca.acesso.usuario.UsuarioAbrangencia;
import gcom.seguranca.acesso.usuario.UsuarioAcao;
import gcom.seguranca.acesso.usuario.UsuarioAlteracao;
import gcom.seguranca.acesso.usuario.UsuarioBanco;
import gcom.seguranca.acesso.usuario.UsuarioFavorito;
import gcom.seguranca.acesso.usuario.UsuarioGrupo;
import gcom.seguranca.acesso.usuario.UsuarioGrupoRestricao;
import gcom.seguranca.acesso.usuario.UsuarioPermissaoEspecial;
import gcom.seguranca.acesso.usuario.UsuarioSenhaHistorico;
import gcom.seguranca.acesso.usuario.UsuarioSituacao;
import gcom.seguranca.acesso.usuario.UsuarioTipo;
import gcom.seguranca.parametrosistema.ParametroSistema;
import gcom.seguranca.parametrosistema.ParametroTipo;
import gcom.seguranca.transacao.AlteracaoTipo;
import gcom.seguranca.transacao.SgbdTabela;
import gcom.seguranca.transacao.SgbdTabelaColuna;
import gcom.seguranca.transacao.Tabela;
import gcom.seguranca.transacao.TabelaAtualizacaoCadastral;
import gcom.seguranca.transacao.TabelaAtualizacaoCadastralSituacao;
import gcom.seguranca.transacao.TabelaColuna;
import gcom.seguranca.transacao.TabelaColunaAtualizacaoCadastral;
import gcom.seguranca.transacao.TabelaLinhaAlteracao;
import gcom.seguranca.transacao.TabelaLinhaColunaAlteracao;

import java.io.File;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.apache.log4j.Logger;
import org.hibernate.HibernateException;
import org.hibernate.MappingException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.StatelessSession;
import org.hibernate.cfg.Configuration;
import org.hibernate.engine.EntityKey;
import org.hibernate.mapping.Column;
import org.hibernate.mapping.PersistentClass;
import org.hibernate.mapping.Property;
import org.hibernate.mapping.RootClass;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

/**
 * Classe respons�vel pela instancia��o do Hibernate e servi�os espec�ficos da
 * tecnologia
 * 
 * @author rodrigo
 */
public class HibernateUtil {
	private static SessionFactory sessionFactory;

	private static SessionFactory sessionFactoryGerencial;
	
	private static SessionFactory sessionFactoryIntegracaoSAM;

	private static SessionFactory sessionFactoryIntegracaoIFS;

	private static SessionFactory sessionFactoryPentaho;
	
	private static Configuration configuration;
	
	private static Configuration configurationUser;

	private static Configuration configurationGerencial;
	
	private static Configuration configurationIFS;
	
	private static Configuration configurationPentaho;
		
	private static HashMap<Integer, Long> tempoSession = new HashMap<Integer, Long>();
	
	public static final Logger log;

	static { 
	      log = Logger.getLogger(""GSAN_ENTIDADES_CONSULTAS"");
	      log.debug("";ClasseChamadaN2;MetodoChamadaN2;ClasseChamadaN1;MetodoChamadaN1;NomeEntidade;QtdEntidadesConsultadas;TempoConsulta;OutrasEntidadesConsultadas"");
	}

	public static void inicializarSessionFactoryIFS() {
		configurationIFS = new Configuration();
		configurationIFS.setProperty(""hibernate.connection.datasource"",""java:/OracleIFSDS"");

		sessionFactoryIntegracaoIFS = configurationIFS.buildSessionFactory();
	}

	public static void inicializarSessionFactoryPentaho() throws ServiceLocatorException {
		if (ServiceLocator.getResource(""java:/PentahoDS"") == null) {
			return;
		}

		configurationPentaho = new Configuration();
		configurationPentaho.setProperty(""hibernate.connection.datasource"",""java:/PentahoDS"");
		configurationPentaho.setProperty(""hibernate.dialect"",""org.hibernate.dialect.PostgreSQLDialect"");

		configurationPentaho.addClass(DadosFinanceirosAtualizacaoCadastralDM.class)
			.addClass(ResumoDadosFinanceirosAtualizacaoCadastralDM.class);

		sessionFactoryPentaho = configurationPentaho.buildSessionFactory();
	}
	
	public static void inicializarSessionFactory() {

		try {
			configuration = new Configuration();
			configurationGerencial = new Configuration();
			
			verificaBaseDadosTipo(); 
			
			configurationGerencial.addClass(UnResumoArrecadacao.class).
				addClass(UnResumoArrecadacaoAguaEsgoto.class).
				addClass(UnResumoArrecadacaoCredito.class).
				addClass(UnResumoArrecadacaoOutro.class).
				addClass(UnResumoFaturamento.class).
				addClass(UnResumoColetaEsgoto.class).
				addClass(UnResumoConsumoAgua.class).
				addClass(UnResumoLigacaoEconomia.class).
				addClass(RgResumoLigacaoEconomia.class).
				addClass(GEsferaPoder.class).
				addClass(GClienteTipo.class).
				addClass(GCategoria.class).
				addClass(GSubcategoria.class).
				addClass(GRegiao.class).
				addClass(GMicrorregiao.class).
				addClass(GMunicipio.class).
				addClass(GBairro.class).
				addClass(GEpocaPagamento.class).
				addClass(GDocumentoTipo.class).
				addClass(GLocalidade.class).
				addClass(GLocalidadePorte.class).
				addClass(GLigacaoAguaPerfil.class).
				addClass(GLigacaoAguaSituacao.class).
				addClass(GLigacaoEsgotoPerfil.class).
				addClass(GLigacaoEsgotoSituacao.class).
				addClass(GRota.class).
				addClass(GPagamentoSituacao.class).
				addClass(GGerenciaRegional.class).
				addClass(GUnidadeNegocio.class).
				addClass(GSetorComercial.class).
				addClass(GQuadra.class).
				addClass(GImovelPerfil.class).
				addClass(GConsumoTipo.class).
				addClass(GLancamentoItem.class).
				addClass(GLancamentoItemContabil.class).
				addClass(GCreditoOrigem.class).
				addClass(GFinanciamentoTipo.class).
				addClass(UnResumoRegistroAtendimento.class).
				addClass(UnResumoInstalacaoHidrometro.class).
				addClass(GMeioSolicitacao.class).
				addClass(GSolicitacaoTipo.class).
				addClass(GSolicitacaoTipoEspecificacao.class).
				addClass(UnResumoParcelamento.class).
				addClass(UnResumoLeituraAnormalidade.class).
				addClass(UnResumoHidrometro.class).
				addClass(GMedicaoTipo.class).
				addClass(GHidrometroMarca.class).
				addClass(GHidrometroCapacidade.class).
				addClass(GHidrometroDiametro.class).
				addClass(GHidrometroLocalArmazenagem.class).
				addClass(GHidrometroSituacao.class).
				addClass(GHidrometroTipo.class).
				addClass(UnResumoRefaturamento.class).
				addClass(GEmpresa.class).
				addClass(GLeituraSituacao.class).
				addClass(GArrecadacaoForma.class).
				addClass(GArrecadador.class).
				addClass(UnResumoMeta.class).
				addClass(UnResumoMetasAcumulado.class).
				addClass(GDebitoTipo.class).
				addClass(GCreditoTipo.class).
				addClass(GImpostoTipo.class).
				addClass(Indicador.class).
				addClass(GConsumoTarifa.class).
				addClass(GHidrometroClasseMetrologica.class).
				addClass(GHidrometroMotivoBaixa.class).
				addClass(GFaturamentoGrupo.class).
				addClass(GUnidadeOrganizacional.class).
				addClass(FaixaValor.class).
				addClass(UnResumoIndicadoresFaturamento.class).
				addClass(UnResumoIndicadorLigacaoEconomia.class).
				addClass(UnResumoPendencia.class).
				addClass(UnResumoPendenciaSemQuadra.class).
				addClass(UnResumoIndicadorDesempenhoMicromedicao.class).
				addClass(GDevolucaoSituacao.class).
				addClass(GAtendimentoMotivoEncerramento.class).
				addClass(GDistritoOperacional.class).
				addClass(UnResumoIndicadoresCobranca.class).
				addClass(UnResumoIndicadorDesempenhoMicromedicaoRef2010.class).
				addClass(UnResumoArrecadacaoPorAno.class).
				addClass(UnResumoRegistroAtendimentoPorAno.class).
				addClass(UnResumoInstalacaoHidrometroPorAno.class).
				addClass(UnResumoParcelamentoPorAno.class);
			
			/*.addClass(GArrecadacaoForma.class).addClass(GArrecadador.class).addClass(UnResumoMeta.class).addClass(UnResumoMetasAcumulado.class)
			 .addClass(GCreditoTipo.class).addClass(GDebitoTipo.class);*/

			sessionFactoryGerencial = configurationGerencial
					.buildSessionFactory();

			//-------------------Configura��o do servidor Gerencial------------------//	
		

			configuration
			// **********************************************/
					// CLASSES DO PACOTE gcom.atendimentopublico //
					// ********************************************//
					// gcom.atendimentopublico.ligacaoagua
					.addClass(CorteTipo.class).addClass(
							EmissaoOrdemCobrancaTipo.class).addClass(
							LigacaoAgua.class).addClass(
							LigacaoAguaDiametro.class).addClass(
							LigacaoAguaMaterial.class).addClass(
							LigacaoAguaPerfil.class).addClass(
							LigacaoAguaSituacao.class).addClass(
							SupressaoTipo.class)
							
					//gvom.atendimentopublico.contratoadesao
							.addClass(ContratoAdesao.class)							
							
					// gcom.atendimentopublico.ligacaoesgoto
					.addClass(LigacaoEsgoto.class).addClass(
							LigacaoEsgotoDiametro.class).addClass(
							LigacaoEsgotoMaterial.class).addClass(
							LigacaoEsgotoPerfil.class).addClass(
							LigacaoEsgotoSituacao.class)
					// gcom.atendimentopublico.registroatendimento
					.addClass(RegistroAtendimento.class).addClass(
							AgenciaReguladoraMotReclamacao.class).addClass(
							AgenciaReguladoraMotRetorno.class).addClass(
							AtendimentoMotivoEncerramento.class).addClass(
							AtendimentoRelacaoTipo.class).addClass(
							LocalOcorrencia.class).addClass(
							MeioSolicitacao.class).addClass(
							RaDadosAgenciaReguladora.class).addClass(
							RaDadosAgenciaReguladoraFone.class).addClass(
							RaEnderecoDescritivo.class).addClass(
							RaMotivoReativacao.class).addClass(
							RegistroAtendimentoSolicitante.class).addClass(
							RegistroAtendimentoUnidade.class).addClass(
							SolicitacaoTipo.class).addClass(
							SolicitacaoTipoEspecificacao.class).addClass(
							SolicitacaoTipoGrupo.class).addClass(
							SolicitanteFone.class).addClass(Tramite.class)
					.addClass(EspecificacaoImovelSituacao.class).addClass(
							EspecificacaoImovSitCriterio.class).addClass(
							EspecificacaoTipoValidacao.class)
				    .addClass(RaEncerramentoComando.class)
				    .addClass(RaEncerramentoComandoEspecificacoes.class)
				    .addClass(RegistroAtendimentoAnexo.class)
				    .addClass(SolicitacaoDocumentoObrigatorio.class)
				    .addClass(LocalidadeEspecificacaoUnidade.class)
				    .addClass(RegistroAtendimentoConta.class)
				    .addClass(RegistroAtendimentoPagamentoDuplicidade.class)
				    .addClass(AtendimentoMotivoEncAcaoCobranca.class)
				   
					// gcom.atendimentopublico.ordemservico
					.addClass(OrdemServicoMovimento.class).addClass(OrdemServicoMovimentoHistorico.class).addClass(OrdemServico.class).addClass(ServicoTipo.class)
					.addClass(SupressaoMotivo.class).addClass(Atividade.class)
					.addClass(Equipe.class).addClass(
							EquipamentosEspeciais.class).addClass(
							EquipeComponentes.class).addClass(
							EspecificacaoServicoTipo.class).addClass(
							FiscalizacaoColetiva.class)
					.addClass(Material.class).addClass(MaterialUnidade.class)
					.addClass(OrdemServicoAtividade.class).addClass(
							OrdemServicoProgramacao.class).addClass(
							OrdemServicoUnidade.class).addClass(
							OsAtividadeMaterialExecucao.class).addClass(
							OsAtividadePeriodoExecucao.class).addClass(
							OsExecucaoEquipe.class).addClass(
							OsExecucaoEquipeComponentes.class).addClass(
							OsProgramNaoEncerMotivo.class).addClass(
							OsReferidaRetornoTipo.class).addClass(
							ProgramacaoRoteiro.class).addClass(
							ServicoCobrancaValor.class).addClass(
							ServicoNaoCobrancaMotivo.class).addClass(
							ServicoPerfilTipo.class).addClass(
							ServicoTipoAtividade.class).addClass(
							ServicoTipoGrupo.class).addClass(
							ServicoTipoMaterial.class).addClass(
							ServicoTipoOperacao.class).addClass(
							ServicoTipoPrioridade.class).addClass(
							ServicoTipoReferencia.class).addClass(
							ServicoTipoSubgrupo.class).addClass(
							LocalidadeSolicTipoGrupo.class).addClass(
							FiscalizacaoSituacao.class).addClass(
							FiscalizacaoSituacaoAgua.class).addClass(
							FiscalizacaoSituacaoEsgoto.class).addClass(
							FiscalizacaoSituacaoHidrometroCapacidade.class)
					.addClass(FiscalizacaoSituacaoServicoACobrar.class)
					.addClass(OrdemServicoPavimento.class)
					.addClass(BoletimOsConcluida.class)
					.addClass(DataFiscalizacaoOsSeletiva.class)
					.addClass(LigacaoOrigem.class)
					.addClass(VisualizacaoRegistroAtendimentoUrgencia.class)
					.addClass(OrdemServicoFiscSit.class)
					.addClass(MotivoRejeicao.class)
					.addClass(ServicoTipoBoletim.class)
					.addClass(OrdemServicoBoletim.class)
					.addClass(ContaBraile.class)
					.addClass(EspecificacaoPavimentacaoServicoTipo.class)
					.addClass(EspecificacaoUnidadeCobranca.class)
					.addClass(RAReiteracao.class)
					.addClass(RAReiteracaoFone.class)
					.addClass(OSProgramacaoCalibragem.class)
					.addClass(OSPriorizacaoTipo.class).addClass(EquipeEquipamentosEspeciais.class)
					.addClass(ArquivoTextoAcompanhamentoServico.class)
					.addClass(OSAtividadeExecucaoAcompanhamentoServico.class)
					.addClass(OSAtividadeMaterialProgramacaoAcompanhamentoServico.class)
					.addClass(OrdemServicoSituacao.class)
					.addClass(OSAtividadeProgramacaoAcompanhamentoServico.class)
					.addClass(OSProgramacaoAcompanhamentoServico.class)
					.addClass(ServicoTipoMotivoEncerramento.class)
					.addClass(OsSeletivaVisitaCampo.class)
					.addClass(ArquivoTextoVisitaCampo.class)
					.addClass(ClieOsSeletivaVisitaCampo.class)
					.addClass(ClieFoneSeletivaVisitaCampo.class)
					.addClass(OrdemServicoFoto.class)
					.addClass(FotoSituacaoOrdemServico.class)
					.addClass(MensagemAcompanhamentoServico.class)
					.addClass(CoordenadaPercursoEquipe.class)
					.addClass(ArquivoTextoRetornoVisitaCampo.class)
					.addClass(ArquivoTextoRetornoAcaoVisitaCampo.class)
					.addClass(ArquivoTextoRetornoClienteVisitaCampo.class)
					.addClass(ArquivoTextoRetornoClienteFoneVisitaCampo.class)
					.addClass(ArquivoProcedimentoOperacionalPadrao.class)
					.addClass(FiscalizarParametroCalculoDebito.class)
					.addClass(FotoTipo.class)
					.addClass(FiscalizacaoFoto.class)
					.addClass(OcorrenciaOperacionalTipo.class)
					.addClass(OcorrenciaOperacionalMotivo.class)
					.addClass(OcorrenciaOperacional.class)
					.addClass(ResolucaoImagem.class)
					// *************************************//
					// CLASSES DO PACOTE gcom.cadastro //
					// *************************************//
					.addClass(VersaoMobile.class)
					.addClass(VersaoSistemasAndroid.class)
					.addClass(SistemaAndroid.class)
					.addClass(ParametrosMSGSMSEmail.class)
					.addClass(MensagemSMSFaturamentoCobranca.class)
					.addClass(MensagemEmailFaturamentoCobranca.class)
					.addClass(MensagemEmailHistorico.class)
					.addClass(SMSSequenciaEnvio.class)
					.addClass(MensagemSMSHistorico.class)
					.addClass(ContaEmpresaSMS.class)
					// gcom.cadastro.cliente
					.addClass(CpfTipo.class)
					.addClass(Cliente.class)
					.addClass(ClienteEndereco.class)
					.addClass(ImovelCadastroOcorrencia.class)
					.addClass(ImovelEloAnormalidade.class)
					.addClass(ClienteFone.class)
					.addClass(ClienteImovel.class)
					.addClass(ClienteRelacaoTipo.class)
					.addClass(ClienteImovelEconomia.class)
					.addClass(ClienteImovelFimRelacaoMotivo.class)
					.addClass(ClienteTipo.class)
					.addClass(FoneTipo.class)
					.addClass(ClienteConta.class)
					.addClass(ClienteContaHistorico.class)
					.addClass(ClienteContaAnterior.class)
					.addClass(OrgaoExpedidorRg.class)
					.addClass(PessoaSexo.class)
					.addClass(Profissao.class)
					.addClass(RamoAtividade.class)
					.addClass(EsferaPoder.class)
					.addClass(ClienteGuiaPagamento.class)
					.addClass(ClienteGuiaPagamentoHistorico.class)
					.addClass(SituacaoAtualizacaoCadastral.class)
					.addClass(ClienteAtualizacaoCadastral.class)
					.addClass(ClienteFoneAtualizacaoCadastral.class)
					// gcom.cadastro.dadocensitario
					.addClass(LocalidadeDadosCensitario.class).addClass(
							MunicipioDadosCensitario.class).addClass(
							IbgeSetorCensitarioDado.class).addClass(
							FonteDadosCensitario.class).addClass(
							IbgeSetorCensitario.class)
					// gcom.cadastro.empresa
					.addClass(Empresa.class)
					.addClass(EmpresaCobranca.class)
					.addClass(EmpresaCobrancaFaixa.class)
					// gcom.cadastro.endereco
					.addClass(LogradouroCep.class).addClass(Cep.class)
					.addClass(CepTipo.class).addClass(EnderecoReferencia.class)
					.addClass(EnderecoTipo.class).addClass(Logradouro.class)
					.addClass(LogradouroBairro.class).addClass(
							LogradouroTipo.class).addClass(
							LogradouroTitulo.class)
					// gcom.cadastro.funcionario
					.addClass(Funcionario.class).addClass(FuncionarioCargo.class)
					// gcom.cadastro.geografico
					.addClass(Bairro.class).addClass(Microrregiao.class)
					.addClass(Municipio.class).addClass(MunicipioFeriado.class)
					.addClass(Regiao.class).addClass(
							RegiaoDesenvolvimento.class).addClass(
							UnidadeFederacao.class).addClass(BairroArea.class)
					// gcom.cadastro.imovel
					.addClass(AreaConstruidaFaixa.class).addClass(
							CadastroOcorrencia.class).addClass(
							CategoriaTipo.class).addClass(Categoria.class)
					.addClass(Despejo.class).addClass(EloAnormalidade.class)
					.addClass(FonteAbastecimento.class).addClass(Imovel.class)
					.addClass(ImovelCobrancaSituacao.class).addClass(
							ImovelEconomia.class).addClass(
							ImovelEnderecoAnterior.class).addClass(
							ImovelPerfil.class).addClass(
							ImovelSubcategoria.class).addClass(ImovelRamoAtividade.class).addClass(
							PavimentoRua.class)
					.addClass(PavimentoCalcada.class).addClass(
							PiscinaVolumeFaixa.class).addClass(PocoTipo.class)
					.addClass(ReservatorioVolumeFaixa.class).addClass(
							Subcategoria.class)
					.addClass(ImovelContaEnvio.class).addClass(
							ImovelDoacao.class).addClass(
							EntidadeBeneficente.class).addClass(
							ImovelTipoHabitacao.class).addClass(
							ImovelTipoPropriedade.class).addClass(
							ImovelTipoConstrucao.class).addClass(
							ImovelTipoCobertura.class)
							.addClass(ImovelAtualizacaoCadastral.class)
							.addClass(ImovelSubcategoriaAtualizacaoCadastral.class)
							.addClass(ImovelProgramaEspecial.class)
							.addClass(ImovelSuprimido.class)
							.addClass(ImovelInscricaoAlterada.class)
							.addClass(MovimentoProgramaEspecial.class)
							.addClass(ItemMovimentoProgramaEspecial.class)
							.addClass(ImovelPerfilCapacidadeHidrometro.class)
							.addClass(ImovelHistoricoPerfil.class)
							.addClass(PerfilAlteracaoTipo.class)
							.addClass(PerfilAlteracaoMotivo.class)
					// gcom.cadastro.localidade
					.addClass(GerenciaRegional.class)
					.addClass(Localidade.class).addClass(LocalidadePorte.class)
					.addClass(LocalidadeClasse.class).addClass(Quadra.class)
					.addClass(QuadraPerfil.class)
					.addClass(SetorComercial.class).addClass(Zeis.class)
					.addClass(AreaTipo.class).addClass(UnidadeNegocio.class)
					.addClass(QuadraFace.class)
					// gcom.cadastro.sistemaparametro
					.addClass(NacionalFeriado.class).addClass(
							SistemaParametro.class).addClass(
							SistemaAlteracaoHistorico.class)
					// gcom.cadastro.tarifasocial
					.addClass(RendaTipo.class).addClass(
							TarifaSocialCartaoTipo.class).addClass(
							TarifaSocialExclusaoMotivo.class).addClass(
							TarifaSocialDadoEconomia.class).addClass(
							TarifaSocialRevisaoMotivo.class)
					// gcom.cadastro.unidade
					.addClass(UnidadeOrganizacional.class).addClass(
							UnidadeTipo.class)
					.addClass(ArquivoTextoAtualizacaoCadastral.class)
					
					.addClass(EmpresaContratoCadastro.class)
					.addClass(EmpresaContratoCadastroAtributo.class)
					.addClass(UnidadeOrganizacionalMunicipio.class)
					// gcom.cadastro.atualizacaocadastralsimplificado
					.addClass(AtualizacaoCadastralSimplificado.class)
					.addClass(AtualizacaoCadastralSimplificadoCritica.class)
					.addClass(AtualizacaoCadastralSimplificadoBinario.class)
					.addClass(AtualizacaoCadastralSimplificadoCriticaTipo.class)
					.addClass(AtualizacaoCadastralSimplificadoLinha.class)
					// gcom.cadastro.projeto
					.addClass(Projeto.class)
					.addClass(EmpresaContratoCobranca.class)
					// gcom.cadastro.descricaogenerica
					.addClass(DescricaoGenerica.class)			
					.addClass(MensagemRetornoReceitaFederal.class)
					.addClass(ClienteVirtual.class)
					.addClass(MotivoRetiradaCobranca.class)					
					.addClass(ParametroTabelaAtualizacaoCadastro.class)
					
					// *************************************//
					// CLASSES DO PACOTE gcom.atualizacaocadastral //
					// *************************************//
					.addClass(ImovelAtualizacaoCadastralDM.class)
					.addClass(ClienteAtualizacaoCadastralDM.class)
					.addClass(ClienteFoneAtualizacaoCadastralDM.class)
					.addClass(AreaAtualizacaoCadastralDM.class)
					.addClass(ArquivoTextoAtualizacaoCadastralDM.class)
					.addClass(HidrometroInstalacaoHistoricoAtualizacaoCadastralDM.class)
					.addClass(ImovelSubcategoriaAtualizacaoCadastralDM.class)
					.addClass(ParametroQuadraAtualizacaoCadastralDM.class)
					.addClass(ParametroTabelaAtualizacaoCadastralDM.class)
					.addClass(SituacaoTransmissaoAtualizacaoCadastralDM.class)
					.addClass(CepAtlzCadDM.class)
					.addClass(LogradouroAtlzCadDM.class)
					.addClass(LogradouroBairroAtlzCadDM.class)
					.addClass(LogradouroCepAtlzCadDM.class)
					.addClass(ImovelOcorrenciaAtualizacaoCadastralDM.class)
					.addClass(ImovelFotoAtualizacaoCadastralDM.class)
					.addClass(RetornoAtualizacaoCadastralDM.class)
					.addClass(AtributoAtualizacaoCadastralDM.class)
					.addClass(MensagemAtualizacaoCadastralDM.class)
					.addClass(MapaAtualizacaoCadastralDM.class)
					.addClass(OrdemServicoAtualizacaoCadastralDM.class)
					
					// *************************************//
					// CLASSES DO PACOTE gcom.cobranca //
					// *************************************//
					.addClass(CobrancaGrupo.class).addClass(
							CobrancaSituacao.class).addClass(
							CobrancaSituacaoHistorico.class).addClass(
							CobrancaSituacaoMotivo.class).addClass(
							CobrancaSituacaoTipo.class).addClass(
							ParcelamentoGrupo.class).addClass(
							CobrancaForma.class).addClass(
							IndicesAcrescimosImpontualidade.class).addClass(
							ResumoCobrancaSituacaoEspecial.class).addClass(
							CobrancaAcaoSituacao.class).addClass(
							CobrancaDebitoSituacao.class).addClass(
							ResumoCobrancaAcao.class).addClass(
							ParcelamentoFaixaValor.class).addClass(NegativacaoComando.class)
							.addClass(NegativacaoCriterio.class).addClass(NegativacaoCriterioClienteTipo.class)
							.addClass(NegativacaoCriterioCpfTipo.class).addClass(NegativacaoCriterioImovelPerfil.class)
							.addClass(NegativacaoCriterioSubcategoria.class).addClass(NegativacaoImovei.class).addClass(Negativador.class).addClass(NegativadorContrato.class)
							.addClass(NegativadorExclusaoMotivo.class).addClass(NegativadorMovimento.class).addClass(NegativadorMovimentoReg.class)
							.addClass(NegativadorMovimentoRegItem.class).addClass(NegativadorMovimentoRegRetMot.class).addClass(NegativadorRegistroTipo.class)
							.addClass(NegativadorRetornoMotivo.class).addClass(NegativCritCobrGrupo.class)
							.addClass(NegativCritElo.class).addClass(NegativCritGerReg.class)
							.addClass(NegativCritUndNeg.class)
							.addClass(ResumoNegativacao.class)
							.addClass(NegativadorResultadoSimulacao.class).addClass(UnidadeOrganizacionalTestemunha.class)
							.addClass(CriterioSituacaoCobranca.class)
							.addClass(CriterioSituacaoLigacaoAgua.class)
							.addClass(CriterioSituacaoLigacaoEsgoto.class)
							.addClass(NegativacaoCriterioLigacaoAgua.class)
							.addClass(NegativacaoCriterioLigacaoEsgoto.class)
							.addClass(EmpresaCobrancaConta.class)
							.addClass(EmpresaCobrancaContaPagamentos.class)
							.addClass(ComandoEmpresaCobrancaConta.class)
							.addClass(ComandoEmpresaCobrancaContaExtensao.class)
							.addClass(CobrancaSituacaoComando.class)
							.addClass(NegativadorMovimentoRegParcelamento.class)
							.addClass(ParcelamentoPagamentoCartaoCredito.class)
							.addClass(PagamentoCartaoCreditoItem.class)
							.addClass(DocumentosReceberFaixaDiasVencidos.class)
							.addClass(NegativCritNegRetMot.class)
							.addClass(ParcDesctoInativVista.class)
							.addClass(CobrancaAcaoOrdemServicoNaoAceitas.class)
							.addClass(UnidadeRepavimentadoraCustoPavimentoRua.class)
							.addClass(UnidadeRepavimentadoraCustoPavimentoCalcada.class)
							.addClass(CobrancaBoletimMedicao.class)
							.addClass(CobrancaBoletimDesconto.class)
							.addClass(CobrancaBoletimExecutado.class)
							.addClass(CobrancaBoletimSucesso.class)
							.addClass(ComandoEmpresaCobrancaContaGerencia.class)
							.addClass(ComandoEmpresaCobrancaContaImovelPerfil.class)
							.addClass(ComandoEmpresaCobrancaContaUnidadeNegocio.class)
							.addClass(CmdEmpresaCobrancaContaLigacaoAguaSituacao.class)
							.addClass(MotivoNaoAceitacaoEncerramentoOS.class)
							.addClass(ComandoOrdemSeletiva.class)
							.addClass(LigacaoSitComandoOSS.class)
							.addClass(AnormalidadeComandoOSS.class)
							.addClass(CapacidHidrComandoOSS.class)
							.addClass(EmpresaCobrancaContaPenalidade.class)
							.addClass(EmpresaContaCobrancaCancelada.class)
							.addClass(EmpresaCobrancaContaBoletimMedicao.class)
							.addClass(CobrancaBoletimContrato.class)
							.addClass(BoletimMedicaoJustificativaPenalidade.class)
							.addClass(ComandoEmpresaCobrancaContaSetorComercial.class)
							.addClass(ImovelRetiradaComando.class)
							.addClass(CertidaoNegativaDebito.class)
							.addClass(ComandoAtividadeImoveis.class)
							.addClass(DividaAtivaCriterio.class)
							.addClass(DividaAtivaCriterioClienteTipo.class)
							.addClass(DividaAtivaCriterioEsferaPoder.class)
							.addClass(DividaAtivaImovel.class)
							.addClass(DividaAtivaDebito.class)
							.addClass(DividaAtivaAmortizacaoTipo.class)
							.addClass(DividaAtivaAmortizacao.class)
							.addClass(DividaAtivaAnalitico.class)							.addClass(CobrancaAcaoGrupoContrato.class)
							.addClass(ColunasTextoSMSEmail.class)
							.addClass(NegativacaoComandoImovel.class)
							// *************************************//
							// CLASSES DO PACOTE gcom.cobranca.contratoparcelamento //
							// *************************************//
							
							.addClass(ContratoParcelamentoRD.class)
							.addClass(QuantidadePrestacoes.class)
							.addClass(TipoRelacao.class)
							.addClass(ContratoParcelamento.class)
							.addClass(ContratoParcelamentoCliente.class)
							.addClass(PrestacaoContratoParcelamento.class)
							.addClass(ContratoParcelamentoItem.class)
							.addClass(PrestacaoItemContratoParcelamento.class)
							.addClass(ParcelamentoQuantidadePrestacaoSituacaoLigacaoAgua.class)
							
							// *************************************//
							// FIM CLASSES DO PACOTE gcom.cobranca.contratoparcelamento //
							// *************************************//

//							.addClass(CobrancaBoletimMedicao.class)
//							.addClass(CobrancaBoletimDesconto.class)
//							.addClass(CobrancaBoletimExecutado.class)
//							.addClass(CobrancaBoletimSucesso.class)


					// *************************************//
					// CLASSES DO PACOTE gcom.faturamento //
					// *************************************//
					.addClass(QualidadeAgua.class).addClass(ImpostoTipo.class)
					.addClass(ImpostoTipoAliquota.class).addClass(
							FaturamentoGrupo.class).addClass(
							FaturamentoSituacaoTipo.class).addClass(
							FaturamentoAtividade.class).addClass(
							FaturamentoAtividadeCronograma.class).addClass(
							FaturamentoGrupoCronogramaMensal.class).addClass(
							FaturamentoImediatoAjuste.class).addClass(
							FaturamentoSituacaoMotivo.class).addClass(
							FaturamentoSituacaoHistorico.class).addClass(
							FaturamentoTipo.class).addClass(
							FaturamentoAtivCronRota.class).addClass(
							FaturamentoDados.class).addClass(
							ResumoFaturamentoSimulacao.class)
							.addClass(ResumoFaturamentoSimulacaoDebito.class)
							.addClass(ResumoFaturamentoSimulacaoCredito.class)
							.addClass(VencimentoAlternativo.class).addClass(
							ResumoFaturamentoSituacaoEspecial.class).addClass(
							ResumoFaturamentoSituacaoEspecialDetalhe.class).addClass(
							FaturamentoContabilParametros.class).addClass(
							GuiaPagamentoGeral.class).addClass(
							DocumentoNaoEntregue.class).addClass(
							HistogramaAguaEconomia.class).addClass(
							HistogramaAguaLigacao.class).addClass(
							HistogramaEsgotoEconomia.class).addClass(
							HistogramaEsgotoLigacao.class).addClass(
							QualidadeAguaPadrao.class)
							.addClass(FaturamentoSituacaoComando.class)
							.addClass(TarifaTipoCalculo.class)
							.addClass(GuiaPagamentoParcelamentoCartao.class)
							.addClass(MotivoInterferenciaTipo.class)
							.addClass(ExtratoQuitacao.class)
							.addClass(ExtratoQuitacaoItem.class)
							.addClass(Prescricao.class)
							.addClass(ConsumoMinimoParametro.class)
							.addClass(FaturamentoGrupoCanceladoHistorico.class)
							.addClass(HistogramaEsgotoEconomiaSemQuadra.class)

					// gcom.faturamento.conta ContaMensagem
					.addClass(ContaCategoriaConsumoFaixa.class)
					.addClass(Conta.class)
					.addClass(ContaCategoria.class)
					.addClass(MotivoNaoEntregaDocumento.class)
					.addClass(Refaturamento.class)
					.addClass(Fatura.class)
					.addClass(FaturaItem.class)
					.addClass(ContaHistorico.class)
					.addClass(ContaImpostosDeduzidos.class)
					.addClass(ContaMotivoCancelamento.class)
					.addClass(ContaMotivoInclusao.class)
					.addClass(ContaMotivoRetificacao.class)
					.addClass(ContaMotivoRevisao.class)
					.addClass(ContaGeral.class)
					.addClass(ContaImpressao.class)
					.addClass(ContaCategoriaConsumoFaixaHistorico.class)
					.addClass(ContaCategoriaHistorico.class)
					.addClass(ContaImpostosDeduzidosHistorico.class)
					.addClass(ContaTipo.class)
					.addClass(ContaMotivoRetificacaoColuna.class)
					.addClass(ContaEmissao2Via.class)
									
					// gcom.faturamento.debito
					.addClass(DebitoCobrado.class).addClass(DebitoTipo.class)
					.addClass(DebitoACobrar.class).addClass(
							DebitoACobrarCategoria.class).addClass(
							DebitoCobradoHistorico.class).addClass(
							DebitoCobradoCategoria.class).addClass(
							DebitoACobrarHistorico.class).addClass(
							DebitoCreditoSituacao.class).addClass(
							ContaMensagem.class).addClass(
							DebitoACobrarGeral.class).addClass(
							DebitoTipoVigencia.class)

					// gcom.faturamento.credito
					.addClass(CreditoRealizado.class).addClass(
							CreditoARealizar.class).addClass(
							CreditoARealizarCategoria.class).addClass(
							CreditoRealizadoHistorico.class).addClass(
							CreditoRealizadoCategoria.class).addClass(
							CreditoTipo.class).addClass(
							CreditoARealizarHistorico.class).addClass(
							CreditoOrigem.class).addClass(
							CreditoARealizarGeral.class)

					// gcom.faturamento.consumotarifa
					.addClass(ConsumoTarifa.class).addClass(
							ConsumoTarifaVigencia.class).addClass(
							ConsumoTarifaCategoria.class).addClass(
							ConsumoTarifaFaixa.class)
							
					// gcom.faturamento.debito
					.addClass(DebitoFaixaValore.class)
					
					// gcom.faturamento.autoinfracao
					.addClass(AutoInfracaoSituacao.class)
					.addClass(AutosInfracao.class)
					.addClass(AutosInfracaoDebitoACobrar.class)
					.addClass(FaturaItemHistorico.class)
					.addClass(HistogramaAguaEconomiaSemQuadra.class)
					.addClass(HistogramaAguaLigacaoSemQuadra.class)
					.addClass(HistogramaEsgotoLigacaoSemQuadra.class)
					.addClass(ContaComunicado.class)
					.addClass(ContaComunicadoQuadra.class)
					.addClass(ContaComunicadoRota.class)
					.addClass(ContaComunicadoSetor.class)
					.addClass(ContaComunicadoFaturamentoGrupo.class)	
					
					// *************************************//
					// CLASSES DO PACOTE gcom.micromedicao //
					// *************************************//
					.addClass(Rota.class).addClass(RateioTipo.class).addClass(
							ImovelTestesMedicaoConsumo.class)
					.addClass(ItemContratoServicoTipo.class)		
					// gcom.micromedicao.hidrometro
					.addClass(HidrometroCapacidade.class).addClass(
							Hidrometro.class).addClass(
							HidrometroMotivoBaixa.class).addClass(
							HidrometroClasseMetrologica.class).addClass(
							HidrometroMarca.class).addClass(
							HidrometroMovimentacao.class).addClass(
							HidrometroMotivoMovimentacao.class).addClass(
							HidrometroLocalArmazenagem.class).addClass(
							HidrometroSituacao.class).addClass(
							HidrometroDiametro.class)
							.addClass(HidrometroRelojoaria.class)
							.addClass(
							HidrometroInstalacaoHistorico.class).addClass(
							HidrometroLocalInstalacao.class).addClass(
							HidrometroTipo.class).addClass(
							HidrometroProtecao.class).addClass(
							HidrometroMovimentado.class).addClass(
							Leiturista.class).addClass(
							ArquivoTextoRoteiroEmpresa.class).addClass(
							RoteiroEmpresa.class).addClass(
							ServicoTipoCelular.class).addClass(
							MovimentoRoteiroEmpresa.class)
							.addClass(ItemServico.class)
							.addClass(ContratoEmpresaServico.class)
							.addClass(ItemServicoContrato.class)
							.addClass(RetornoControleHidrometro.class)
							.addClass(TelemetriaLog.class)
							.addClass(TelemetriaLogErro.class)
							.addClass(TelemetriaMov.class)
							.addClass(TelemetriaMovReg.class)
							.addClass(TelemetriaRetMot.class)
							.addClass(ContratoEmpresaAditivo.class)
							.addClass(HidrometroFatorCorrecao.class)
							.addClass(HidrometroClassePressao.class)
							.addClass(MovimentoRoteiroEmpresaFoto.class)
							.addClass(HidrometroFaixaIdade.class)

					// gcom.micromedicao.leitura
					.addClass(LeituraTipo.class)
					.addClass(LeituraSituacao.class).addClass(
							LeituraFaixaFalsa.class).addClass(
							LeituraAnormalidadeLeitura.class).addClass(
							LeituraAnormalidade.class).addClass(
							LeituraFiscalizacao.class).addClass(
							LeituraAnormalidadeConsumo.class)
					// gcom.micromedicao.medicao //
					.addClass(MedicaoHistorico.class).addClass(
							MedicaoTipo.class)
					// gcom.micromedicao.consumo //
					.addClass(ConsumoHistorico.class).addClass(
							ConsumoTipo.class).addClass(
							ConsumoAnormalidade.class).addClass(
							LigacaoTipo.class).addClass(
							ResumoAnormalidadeConsumo.class).addClass(
							ResumoAnormalidadeLeitura.class).addClass(
							ConsumoHistoricoAnterior.class).addClass(
							MedicaoHistoricoAnterior.class).addClass(
							SituacaoTransmissaoLeitura.class).addClass(
							ConsumoMinimoArea.class).addClass(
							ConsumoAnormalidadeAcao.class).addClass(
							RotaAtualizacaoSeq.class )                                    
							.addClass( ReleituraMobile.class )


					// ************************************//
					// CLASSES DO PACOTE gcom.financeiro //
					// ************************************//
					.addClass(LancamentoContabil.class).addClass(
							LancamentoResumo.class).addClass(
							LancamentoResumoValorTipo.class).addClass(
							LancamentoResumoConta.class).addClass(
							LancamentoResumoContaHistorico.class).addClass(
							FinanciamentoTipo.class).addClass(
							LancamentoContabilItem.class).addClass(
							ContaContabil.class).addClass(
							LancamentoOrigem.class).addClass(
							ResumoFaturamento.class).addClass(
							LancamentoItem.class).addClass(
							LancamentoItemContabil.class).addClass(
							LancamentoTipoItem.class).addClass(
							LancamentoTipo.class).addClass(
							DevedoresDuvidososContabilParametro.class).addClass(
							ContaAReceberContabil.class).addClass(
							ValorVolumesConsumidosNaoFaturado.class).addClass(
							DocumentosAReceberResumo.class).addClass(
							ResumoReceita.class).addClass(
							FaixaDocumentosAReceber.class).addClass(
							DocumentosAReceberFaixaResumo.class).addClass(
							PerdasTipo.class).addClass(
							ParametrosPerdasOrgaoPublico.class).addClass(
							ParametrosPerdasSocietarias.class).addClass(
							ValorConsumidoNaoFaturadoParametro.class)

					// ************************************//
					// CLASSES DO PACOTE gcom.arrecadacao //
					// ************************************//
					// gcom.arrecadacao.banco

					.addClass(ResumoArrecadacao.class).addClass(Banco.class)
					.addClass(Agencia.class)
					// gcom.arrecadacao.pagamento
					.addClass(Pagamento.class)
					.addClass(PagamentoSituacao.class).addClass(
							GuiaPagamento.class).addClass(
							GuiaPagamentoHistorico.class).addClass(
							GuiaPagamentoCategoriaHistorico.class)
					.addClass(PagamentoCartaoDebito.class)
					.addClass(PagamentoCartaoDebitoItem.class)
					.addClass(SequenciaCartao.class)
					.addClass(GuiaPagamentoItem.class)
					.addClass(GuiaPagamentoItemHistorico.class)
					.addClass(GuiaPagamentoItemCategoria.class)
					.addClass(GuiaPagamentoItemCategoriaHistorico.class)
					// gcom.arrecadacao.debito
					.addClass(DebitoAutomatico.class).addClass(
							DebitoAutomaticoRetornoCodigo.class).addClass(
							DebitoAutomaticoMovimento.class).addClass(
							GuiaPagamentoCategoria.class).addClass(
							MetasArrecadacao.class)
					.addClass(DebitoAutomaticoParcelamentoCliente.class)
                    .addClass(DebitoAutomaticoMovimentoParcelamentoCliente.class)
					.addClass(DevolucaoHistorico.class)
					.addClass(DevolucaoDadosDiarios.class)
					.addClass(DebitoCarteiraMovimento.class)
					.addClass(BandeiraCartao.class)
					// *************************************//
					// CLASSES DO PACOTE gcom.operacional //
					// *************************************//
					.addClass(Bacia.class).addClass(DistritoOperacional.class)
					.addClass(DivisaoEsgoto.class).addClass(
							SistemaAbastecimento.class).addClass(
							SistemaEsgoto.class).addClass(
							SistemaEsgotoTratamentoTipo.class).addClass(
							AbastecimentoProgramacao.class).addClass(
							ManutencaoProgramacao.class).addClass(
							SetorAbastecimento.class).addClass(
							ZonaAbastecimento.class)
					.addClass(ZonaPressao.class).addClass(ProducaoAgua.class)
					// ************************************//
					// CLASSES DO PACOTE gcom.seguranca //
					// ************************************//
					// gcom.seguranca.acesso
					.addClass(AlteracaoTipo.class).addClass(UsuarioTipo.class)
					.addClass(TabelaLinhaAlteracao.class).addClass(
							TabelaLinhaColunaAlteracao.class).addClass(
							TabelaColuna.class).addClass(Tabela.class)
					.addClass(UsuarioAcao.class)
					.addClass(UsuarioFavorito.class)
					.addClass(GrupoAcesso.class)
					.addClass(UsuarioSenhaHistorico.class)
					//gcom.seguranca.parametrosistema
					.addClass(ParametroSistema.class)
					.addClass(ParametroTipo.class)
					// gcom.seguranca.transacao
					.addClass(SgbdTabela.class)
					.addClass(SgbdTabelaColuna.class).addClass(
							UsuarioSituacao.class).addClass(
							UsuarioPermissaoEspecial.class).addClass(
							UsuarioAlteracao.class).addClass(
							UsuarioGrupoRestricao.class).addClass(
							UsuarioGrupo.class).addClass(
							UsuarioAbrangencia.class).addClass(Usuario.class)
					.addClass(UsuarioBanco.class)
					.addClass(ResolucaoDiretoria.class).addClass(
							CreditoRealizadoCategoriaHistorico.class).addClass(
							CreditoARealizarCategoriaHistorico.class).addClass(
							DebitoCobradoCategoriaHistorico.class).addClass(
							DebitoACobrarCategoriaHistorico.class).addClass(
							PermissaoEspecial.class).addClass(
							AvisoDeducoes.class).addClass(AvisoBancario.class)
					.addClass(AvisoAcerto.class).addClass(
							ArrecadadorMovimentoItem.class).addClass(
							ArrecadadorMovimento.class).addClass(
							ArrecadadorContratoTarifa.class).addClass(
							ParcelamentoTipo.class).addClass(
							ParcelamentoSituacao.class).addClass(
							ParcelamentoQuantidadeReparcelamento.class)
					.addClass(ParcelamentoQuantidadePrestacao.class).addClass(
							ParcelamentoPerfil.class).addClass(
							ParcelamentoItem.class).addClass(
							ParcelamentoDescontoInatividade.class).addClass(
							ParcelamentoDescontoAntiguidade.class).addClass(
							Parcelamento.class).addClass(DocumentoTipo.class)
					.addClass(DocumentoEmissaoForma.class).addClass(
							DevolucaoSituacao.class).addClass(Devolucao.class)
					.addClass(DeducaoTipo.class).addClass(GuiaDevolucao.class)
					.addClass(GrupoFuncionalidadeOperacao.class).addClass(
							Grupo.class).addClass(
							FuncionalidadeDependencia.class).addClass(
							Funcionalidade.class).addClass(
							ParcelamentoMotivoDesfazer.class).addClass(
							PagamentoHistorico.class).addClass(
							OperacaoEfetuada.class).addClass(Operacao.class)
					.addClass(OperacaoTipo.class)
					.addClass(OperacaoTabela.class).addClass(
							RegistroCodigo.class).addClass(
							ArrecadadorContrato.class).addClass(
							Arrecadador.class).addClass(ArrecadacaoForma.class)
					.addClass(CobrancaAcao.class).addClass(
							RotaAcaoCriterio.class).addClass(
							CobrancaAcaoAtividadeComando.class).addClass(
							CobrancaCriterioLinha.class).addClass(
							CobrancaCriterio.class).addClass(
							CobrancaAtividadeComandoRota.class).addClass(
							CobrancaAtividade.class).addClass(
							CobrancaAcaoCronograma.class).addClass(
							CobrancaAcaoAtividadeCronograma.class).addClass(
							Modulo.class).addClass(ContratoDemanda.class)
					.addClass(ContratoMotivoCancelamento.class).addClass(
							CobrancaGrupoCronogramaMes.class).addClass(
							CobrancaDocumentoItem.class).addClass(
							CobrancaDocumento.class).addClass(
							ImovelSituacaoTipo.class).addClass(
							ImovelSituacao.class).addClass(ContaBancaria.class)
					.addClass(ArrecadacaoDadosDiarios.class).addClass(
							ResumoPendencia.class).addClass(
							RecebimentoTipo.class).addClass(
							ArrecadacaoContabilParametros.class).addClass(
							MotivoCorte.class).addClass(
							UnidadeProcessamento.class).addClass(
							ProcessoIniciado.class).addClass(
							ProcessoSituacao.class).addClass(
							ProcessoFuncionalidade.class).addClass(
							FuncionalidadeIniciada.class).addClass(
							FuncionalidadeSituacao.class).addClass(
							Processo.class).addClass(ProcessoTipo.class)
					.addClass(UnidadeIniciada.class).addClass(
							RelatorioGerado.class).addClass(Relatorio.class)
					.addClass(UnidadeSituacao.class).addClass(
							RamalLocalInstalacao.class).addClass(
							ParametrosDevedoresDuvidosos.class).addClass(
							ParametrosDevedoresDuvidososItem.class).addClass(
							ResumoDevedoresDuvidosos.class).addClass(
							DbVersaoBase.class).addClass(
							EnvioEmail.class).addClass(
							ResumoCobrancaAcaoEventual.class).addClass(
							ConsumoFaixaLigacao.class).addClass(
							ConsumoFaixaCategoria.class).addClass(
							ContaRevisaoFaixaValor.class).addClass(
                            OperacaoOrdemExibicao.class).addClass(
                            LigacaoEsgotoDestinoDejetos.class).addClass(
                            LigacaoEsgotoCaixaInspecao.class).addClass(
                            LigacaoEsgotoDestinoAguasPluviais.class).addClass(
                            LigacaoEsgotoEsgotamento.class).
							addClass(LigacaoAguaSituacaoConsumoTipo.class).
							addClass(LigacaoEsgotoSituacaoConsumoTipo.class).
							addClass(FonteCaptacao.class).
 							addClass(SetorFonteCaptacao.class).
 							addClass(FuncionalidadeCategoria.class).
 							addClass(TabelaAtualizacaoCadastral.class).
 							addClass(TabelaAtualizacaoCadastralSituacao.class).
 							addClass(TabelaColunaAtualizacaoCadastral.class).
							addClass(CicloMeta.class).
							addClass(Atributo.class).
							addClass(AtributoGrupo.class).
							addClass(FuncionalidadeAtributo.class).
							addClass(CicloMetaGrupo.class).
							addClass(VwImovelPrincipalCategoria.class).
							addClass(MovimentoContaImpostoDeduzido.class).
							addClass(MovimentoContaCategoriaConsumoFaixa.class).
							addClass(MovimentoContaPrefaturadaCategoria.class).
							addClass(MovimentoContaPrefaturada.class).
							addClass(MotivoNaoGeracaoDocCobranca.class).
							addClass(ImovelNaoGerado.class).
							addClass(TipoCaptacao.class).
							addClass(CobrancaDocumentoImpressao.class).
							addClass(CobrancaDocumentoControleGeracao.class).
							addClass(GrauDificuldadeExecucao.class).
							addClass(GrauRiscoSegurancaFisica.class).
							addClass(NivelPressao.class).
							addClass(GrauIntermitencia.class).
							addClass(CondicaoAbastecimentoAgua.class).
							addClass(ArquivoTextoRoteiroEmpresaDivisao.class).
							addClass(MovimentoCartaoRejeita.class).
							addClass(EmailClienteAlterado.class).
							addClass(CobrancaAcaoAtividadeComandoFiscalizacaoSituacao.class).
							addClass(CobrancaDocumentoFisc.class).
							addClass(ControleLiberacaoPermissaoEspecial.class).
							addClass(SolicitacaoAcessoSituacao.class).
							addClass(SolicitacaoAcessoGrupo.class).
							addClass(SolicitacaoAcesso.class).
							addClass(NegativacaoCriterioSituacaoEspecialCobranca.class).
							addClass(NegativacaoCriterioSituacaoCobranca.class)
										.addClass(TarifaSocialCarta.class)
					.addClass(TarifaSocialCartaDebito.class)
					.addClass(TarifaSocialComandoCarta.class)
					.addClass(TarifaSocialMotivoCarta.class)
					.addClass(GrupoPermissaoEspecial.class)
					
					.addClass(ConsultarReceitaFederal.class)
					.addClass(ParcelamentoPerfilDebitos.class)
					
					// ************************************//
					// CLASSES DO PACOTE gcom.atendimentopublico.portal //
					// ************************************//
					
					.addClass(QuestionarioSatisfacaoCliente.class)
					.addClass(AcessoLojaVirtual.class)
					
					
					// ************************************//
					// FIM DAS CLASSES DO PACOTE gcom.atendimentopublico.portal //
					// ************************************//
					
					.addClass(ServicoTerceiroAcompanhamentoServico.class)
					
					
					// ***************************************************//
					// CLASSES DO PACOTE gcom.faturamento.contratodemanda //
					// ***************************************************//
					.addClass(ContratoDemandaImovel.class)
					.addClass(ContratoDemandaMotivoEncerramento.class)
					.addClass(ContratoDemandaSituacao.class)
					.addClass(ContratoDemandaFaixaConsumo.class)
					
					// ***************************************************//
					// CLASSES DO PACOTE gcom.mobile.execucaoordemservico //
					// ***************************************************//
					.addClass(ArquivoTextoOSCobranca.class)
					.addClass(ArquivoTextoOSCobrancaCliente.class)
					.addClass(ArquivoTextoOSCobrancaItem.class)
					.addClass(ExecucaoOSCliente.class)
					.addClass(ExecucaoOSCorte.class)
					.addClass(ExecucaoOSFiscalizacao.class)
					.addClass(ExecucaoOSFoto.class)
					.addClass(ExecucaoOSOrdemServico.class)
					.addClass(ExecucaoOSSituacoesEncontradas.class)
					.addClass(ExecucaoOSVisita.class)
					.addClass(ParametrosArquivoTextoOSCobranca.class)
					.addClass(ParametrosArquivoTextoOSLocalidade.class)
					;
							
							
			configuration.setInterceptor(Interceptador.getInstancia());
			sessionFactory = configuration.buildSessionFactory();

			inicializarSessionFactoryPentaho();
		} catch (HibernateException ex) {
			ex.printStackTrace();
			throw new SistemaException(""Hibernate - Erro ao criar a SessionFactory"");
		} catch (ServiceLocatorException ex) {
			ex.printStackTrace();
			throw new SistemaException(""Hibernate - Erro ao criar a SessionFactory"");
		} finally {
			try {
				if (getDialect().toUpperCase().contains(""ORACLE"")) {
					HibernateUtil.inicializarSessionFactoryIFS();
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	/**
	 * Retorna o valor de session
	 * 
	 * @return O valor de session
	 */
	public static Session getSession() {
		Session retorno = null;

		try {
			retorno = sessionFactory.openSession();
			//System.out.println(""inicio:""+retorno.hashCode());
			tempoSession.put(retorno.hashCode(), System.currentTimeMillis());
		} catch (HibernateException ex) {
			ex.printStackTrace();
			throw new SistemaException(""Hibernate - Erro ao criar a Session"");
		}

		return retorno;
	}

	/**
	 * Retorna o valor de session
	 * 
	 * @return O valor de session
	 */
	public static StatelessSession getStatelessSession() {
		StatelessSession retorno = null;

		try {
			retorno = sessionFactory.openStatelessSession();
		} catch (HibernateException ex) {
			ex.printStackTrace();
			throw new SistemaException(""Hibernate - Erro ao criar a Session"");
		}

		return retorno;
	}

	/**
	 * Retorna o valor de session
	 * 
	 * @return O valor de session
	 */
	public static StatelessSession getStatelessSessionGerencial() {
		StatelessSession retorno = null;

		try {
			retorno = sessionFactoryGerencial.openStatelessSession();
		} catch (HibernateException ex) {
			ex.printStackTrace();
			throw new SistemaException(""Hibernate - Erro ao criar a Session"");
		}

		return retorno;
	}

	/**
	 * Retorna o valor de session
	 * 
	 * @return O valor de session
	 */
	public static Session getSessionGerencial() {
		Session retorno = null;

		try {
			retorno = sessionFactoryGerencial.openSession();
		} catch (HibernateException ex) {
			ex.printStackTrace();
			throw new SistemaException(
					""Hibernate - Erro ao criar a Session Gerencial"");
		}

		return retorno;
	}

	/**
	 * Retorna a sess�o do Pentaho
	 * 
	 * @return sess�o
	 */
	public static Session getSessionPentaho() {
		try {
			if(sessionFactoryPentaho == null) {
				throw new SistemaException(""Hibernate - Erro ao obter a Session Pentaho"");
			}

			return sessionFactoryPentaho.openSession();
		} catch (HibernateException ex) {
			ex.printStackTrace();
			throw new SistemaException(""Hibernate - Erro ao obter a Session Pentaho"");
		}
	}

	/**
	 * Fecha a session
	 * 
	 * @param session
	 *            Descri��o do par�metro
	 */
	public static void closeSession(Session session) {

		if (session != null) {
			try {

				//session.clear();

				
				Throwable t = new Throwable();
				StackTraceElement[] elements = t.getStackTrace();

				
					Long tempoInicialSession = tempoSession.get(session.hashCode());
					
					if (tempoInicialSession != null ) {
					
						
						Long tempoTotalSession = System.currentTimeMillis() - tempoInicialSession;
						
						String mensagem = loggerEntidadesPorConsulta(session, elements, tempoTotalSession);
						if (mensagem != null && !mensagem.trim().equals("""")) {
							log.debug(mensagem);
						}
						
				
				
					}
				session.close();
				//session = null;
			} catch (HibernateException ex) {
				throw new SistemaException(
						""Hibernate - Erro ao fechar a Session"");
			} catch (NullPointerException ex) {
				ex.printStackTrace();
				System.out.println(""Nullpointer aqui"");
				
			}

		}
	}


	private static String loggerEntidadesPorConsulta(Session session, StackTraceElement[] elements, long tempoTotalSession) {
		
		//String calleeMethod = elements[0].getMethodName();
		String callerMethodName = elements[1].getMethodName();
		String callerClassName = elements[1].getClassName();
		String callerMethodName2Level = elements[2].getMethodName();
		String callerClassName2Level = elements[2].getClassName();
		

	
		String log = """";
		Map<String, Integer> entidades = new HashMap<String, Integer>();

		for (Object a : session.getStatistics().getEntityKeys()) {

			entidades.put(((EntityKey) a).getEntityName(), session
					.getStatistics().getEntityCount());

		}

		Iterator iterator = entidades.keySet().iterator();
		while (iterator.hasNext()) {

			
			
			String nomeEntidade = (String) iterator.next();

			 
			if (log.trim().equals("""")) {
				log += "";""+callerClassName2Level + "";"" + callerMethodName2Level + "";"";
				log += callerClassName + "";"" + callerMethodName + "";"";
				log += nomeEntidade + "";"";
				log += entidades.get(nomeEntidade) + "";"" + tempoTotalSession+""; "";
			} else {
				log += "" ""+nomeEntidade + "" "";
				log += entidades.get(nomeEntidade); 
				
			}
			
			
			

		}
		
		tempoSession.remove(session.hashCode());
		
		return log;
	}

	/**
	 * Fecha a session
	 * 
	 * @param session
	 *            Descri��o do par�metro
	 */
	public static void closeSession(StatelessSession session) {

		if (session != null) {
			try {
				session.close();
			} catch (HibernateException ex) {
				throw new SistemaException(
						""Hibernate - Erro ao fechar a Session"");
			}

		}
	}

	/**
	 * M�todo que obt�m o tamanho da propriedade da classe
	 * 
	 * @param mappedClass
	 *            Nome da classe
	 * @param propertyName
	 *            Nome da propriedade da classe
	 * @return O valor de columnSize
	 */
	public static int getColumnSize(Class mappedClass, String propertyName) {
		Configuration cfg = HibernateUtil.getConfig();
		PersistentClass pClass = cfg.getClassMapping(mappedClass.getName());
		Column col = null;
		Property hibProp = null;

		try {
			hibProp = pClass.getProperty(propertyName);

			Iterator it = hibProp.getColumnIterator();

			while (it.hasNext()) {
				col = (Column) hibProp.getColumnIterator().next();
				break;
			}

		} catch (MappingException ex) {
			throw new SistemaException(""Hibernate - Erro no mapeamento"");
		}

		return col.getLength();
	}

	/**
	 * M�todo que obt�m o nome da coluna no banco da propriedade passada Caso
	 * nao tenha, retorna null
	 * 
	 * @param mappedClass
	 *            Nome da classe
	 * @param propertyName
	 *            Nome da propriedade da classe
	 * @return nome da coluna
	 */
	public static String getNameColumn(Class mappedClass, String propertyName) {
		String retorno = null;
		Configuration cfg = HibernateUtil.getConfig();
		PersistentClass pClass = cfg.getClassMapping(mappedClass.getName());
		Column col = null;
		Property hibProp = null;

		try {
			hibProp = pClass.getProperty(propertyName);

			Iterator it = hibProp.getColumnIterator();

			while (it.hasNext()) {
				col = (Column) hibProp.getColumnIterator().next();
				break;
			}

			// retorno = col.getComment();
			// if (retorno == null || """".equals(retorno)) {
			if (col == null) {
				retorno = ConstantesDescricaoBanco.get(pClass.getTable()
						.getName()
						+ ""."" + propertyName);
			} else {
				retorno = ConstantesDescricaoBanco.get(pClass.getTable()
						.getName()
						+ ""."" + col.getName());
			}
			if (retorno == null && col != null) {

				retorno = col.getName();
			}

			if (col == null) {
				retorno = null;
			}
			// }

		} catch (MappingException ex) {
			try {

				hibProp = pClass.getIdentifierProperty();
				if (hibProp.getName().equalsIgnoreCase(propertyName)) {

					Iterator it = hibProp.getColumnIterator();

					while (it.hasNext()) {
						col = (Column) hibProp.getColumnIterator().next();
						break;
					}

					// retorno = col.getComment();
					// if (retorno == null || """".equals(retorno)) {
					// retorno = col.getName();
					// }

					retorno = ConstantesDescricaoBanco.get(pClass.getTable()
							.getName()
							+ ""."" + col.getName());
					if (retorno == null) {
						retorno = col.getName();
					}
				}

			} catch (MappingException eex) {
				eex.printStackTrace();
			}
		}

		return retorno;
	}

	/**
	 * M�todo que obt�m o nome da tabela da classe passada
	 * 
	 * @param mappedClass
	 *            Nome da classe
	 * @return O String nome da tablea
	 */
	public static String getNameTable(Class mappedClass) {
		Configuration cfg = HibernateUtil.getConfig();
		PersistentClass pClass = cfg.getClassMapping(mappedClass.getName());

		String retorno = pClass.getTable().getComment();
		if (retorno == null || """".equals(retorno)) {
			retorno = ConstantesDescricaoBanco.get(pClass.getTable().getName());
			if (retorno == null) {
				retorno = pClass.getTable().getName();
			}

		}

		return retorno;
	}
	
	/**
	 * Retorna a que classe est� mapeada a tabela passada 
	 * @param tableName caminho da tabela 
	 * @return caminho da classe 
	 */
	public static String getClassName(String tableName){
		Configuration cfg = HibernateUtil.getConfig();		
		if (cfg != null){
			Iterator iter = cfg.getClassMappings();
			while ( iter.hasNext() ) {
				PersistentClass classe = (PersistentClass) iter.next();
				if (classe.getTable().getName().equals(tableName)) {
					return classe.getClassName();
				}
			}			
		}
		return null;
	}

	/**
	 * Retorna o valor de config
	 * 
	 * @return O valor de config
	 */
	public static Configuration getConfig() {

		return configuration;
	}

	/**
	 * The main program for the HibernateUtil class
	 * 
	 * @param args
	 *            The command line arguments
	 */
	public static void main(String[] args) {

		getSession();

	}


	/**
	 * Retorna o valor de session
	 * 
	 * @return O valor de session
	 */
	public static StatelessSession getStatelessSessionIntegracaoSAM() {
		StatelessSession retorno = null;

		
			try {
				retorno = sessionFactoryIntegracaoSAM == null ? null : sessionFactoryIntegracaoSAM.openStatelessSession();
			} catch (HibernateException ex) {
				ex.printStackTrace();
				throw new SistemaException(""Hibernate - Erro ao criar a Session IntegracaoSAM"");
			}
		

		return retorno;
	}
	
	
	public static StatelessSession getStatelessSessionIntegracaoIFS() {
		StatelessSession retorno = null;

		
			try {
				retorno = sessionFactoryIntegracaoIFS == null ? null : sessionFactoryIntegracaoIFS.openStatelessSession();
			} catch (HibernateException ex) {
				ex.printStackTrace();
				throw new SistemaException(""Hibernate - Erro ao criar a Session Integracao IFS"");
			}
		

		return retorno;
	}
	
	/**
	 * Retorna o valor de session
	 * 
	 * @return O valor de session
	 */
	public static Session getSessionIntegracaoIFS() {
		Session retorno = null;

		
			try {
				retorno = sessionFactoryIntegracaoIFS == null ? null : sessionFactoryIntegracaoIFS.openSession();
			} catch (HibernateException ex) {
				ex.printStackTrace();
				throw new SistemaException(
						""Hibernate - Erro ao criar a Session Integracao IFS"");
			}
		
		return retorno;
	}

	/**
	 * Retorna o valor de session
	 * 
	 * @return O valor de session
	 */
	public static Session getSessionIntegracaoSAM() {
		Session retorno = null;

		
			try {
				retorno = sessionFactoryIntegracaoSAM == null ? null : sessionFactoryIntegracaoSAM.openSession();
			} catch (HibernateException ex) {
				ex.printStackTrace();
				throw new SistemaException(
						""Hibernate - Erro ao criar a Session IntegracaoSAM"");
			}
		
		return retorno;
	}
	
	public static String getDialect(){
		String retorno = """";
		retorno = configuration.getProperty(""hibernate.dialect"");		
		return retorno;
	}
	
	/**
	 * Seta as propriedades do configurationGerencial e do configuration de acordo com o arquivo xml de propriedades HibernateBaseProperties 
	 * 
	 * @author Paulo Diniz
	 * @date 27/11/2011
	 * 
	 * @return
	 */
	private static void verificaBaseDadosTipo() {
		try {
			File fXmlFile = new File(""HibernateBaseProperties.xml"");
			DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
			Document doc = dBuilder.parse(fXmlFile);
			doc.getDocumentElement().normalize();
			
			NodeList nodeList = (NodeList) doc.getElementsByTagName(""properties"");
			Node properties = nodeList.item(0);
			String base = """";
		    if (properties.getNodeType() == Node.ELEMENT_NODE) {
		    	
		    	base = Util.getTagValue(""base"", (Element) properties);
			   
		    }
			
			if (base != null && !base.equals("""") && (base.equals(""Oracle"") || base.equals(""Postgres""))) {
				
				String datasource = Util.getTagValue(""connection-datasource"", (Element) properties);
				String dialect = Util.getTagValue(""dialect"", (Element) properties);
				String release_mode = Util.getTagValue(""connection-release-mode"", (Element) properties);
		
				if( base.equals(""Postgres"")){
					configurationGerencial.setProperty(""hibernate.connection.datasource"", ""java:/PostgresGerencialDS"");

				} else {
					configurationGerencial.setProperty(""hibernate.connection.datasource"", datasource);
					
				}
				configurationGerencial.setProperty(""hibernate.connection.release_mode"", release_mode);
				configurationGerencial.setProperty(""hibernate.dialect"",dialect);
				
				configuration.setProperty(""hibernate.connection.datasource"", datasource);
				configuration.setProperty(""hibernate.connection.release_mode"", release_mode);
				configuration.setProperty(""hibernate.dialect"",dialect);
				
			}else{
				//� setado Postgres como Default
				configurationGerencial.setProperty(""hibernate.connection.datasource"",""java:/PostgresGerencialDS"");
				configurationGerencial.setProperty(""hibernate.connection.release_mode"", ""after_transaction"");
				configurationGerencial.setProperty(""hibernate.dialect"",""org.hibernate.dialect.PostgreSQLDialect"");
				
				configuration.setProperty(""hibernate.connection.datasource"",""java:/PostgresDS"");
				configuration.setProperty(""hibernate.connection.release_mode"", ""after_transaction"");
				configuration.setProperty(""hibernate.dialect"",""org.hibernate.dialect.PostgreSQLDialect"");
				
			}
		} catch (Exception e) {

			e.printStackTrace();
			
			//� setado Postgres como Default
			configurationGerencial.setProperty(""hibernate.connection.datasource"",""java:/PostgresGerencialDS"");
			configurationGerencial.setProperty(""hibernate.connection.release_mode"", ""after_transaction"");
			configurationGerencial.setProperty(""hibernate.dialect"",""org.hibernate.dialect.PostgreSQLDialect"");
			
			configuration.setProperty(""hibernate.connection.datasource"",""java:/PostgresDS"");
			configuration.setProperty(""hibernate.connection.release_mode"", ""after_transaction"");
			configuration.setProperty(""hibernate.dialect"",""org.hibernate.dialect.PostgreSQLDialect"");
		}
	}
	
	/**
	 * [RM6365] - 21/11/2011 - Bruno Barros - Grava��o das altera��es no banco de dados por usu�rio
	 * [UC1252] - Alterar Usu�rio Logado no Banco de Dados
	 * 
	 * [FS-0002] - Trocar o usu�rio da base
	 * 
	 * @author Th�lio Ara�jo
	 * @since 22/11/2011
	 * 
	 * @param idUsuario
	 * @param loginUsuario
	 * @return UsuarioBanco
	 * @throws ErroRepositorioException
	 */
	public static int alterarSessaoDaFabrica(String user, String password, String empresa) {
		int mensagemRetorno = 0;
		try {
			configurationUser = new Configuration();
			if(empresa.equals(SistemaParametro.EMPRESA_COMPESA)){
				configurationUser.setProperty(""hibernate.connection.datasource"",""java:/OracleDS"");
				configurationUser.setProperty(""hibernate.connection.release_mode"", ""after_transaction"");
				configurationUser.setProperty(""hibernate.dialect"",""org.hibernate.dialect.Oracle9Dialect"");
			}else{
				configurationUser.setProperty(""hibernate.connection.datasource"",""java:/PostgresDS"");
				configurationUser.setProperty(""hibernate.connection.release_mode"", ""after_transaction"");
				configurationUser.setProperty(""hibernate.dialect"",""org.hibernate.dialect.PostgreSQLDialect"");
			}
			configurationUser.setInterceptor(Interceptador.getInstancia());
			Iterator<?> classMappingsConfigurationIterator = configuration
					.getClassMappings();
			while (classMappingsConfigurationIterator.hasNext()) {
				RootClass classe = (RootClass) classMappingsConfigurationIterator
						.next();
				configurationUser.addClass(classe.getMappedClass());
			}
			configurationUser
					.setProperty(""hibernate.connection.username"", user);
			configurationUser.setProperty(""hibernate.connection.password"",
					password);
			
			
			sessionFactory = configurationUser.buildSessionFactory();
			mensagemRetorno = UsuarioBanco.MENSAGEM_SUCESSO;
		} catch (Exception ex) {
			ex.printStackTrace();
			mensagemRetorno = UsuarioBanco.MENSAGEM_ERRO;
			sessionFactory = configuration.buildSessionFactory();
		}
		return mensagemRetorno;
	}
	
	/**
	 * [RM6365] - 21/11/2011 - Bruno Barros - Grava��o das altera��es no banco de dados por usu�rio
	 * [UC1252] - Alterar Usu�rio Logado no Banco de Dados
	 * 
	 * [FS-0002] - Trocar o usu�rio da base
	 * 
	 * @author Th�lio Ara�jo
	 * @since 22/11/2011
	 * 
	 * @param idUsuario
	 * @param loginUsuario
	 * @return UsuarioBanco
	 * @throws ErroRepositorioException
	 */
	public static void alterarSessaoDaFabricaParaPadrao() {
		try {
			sessionFactory = configuration.buildSessionFactory();
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}
	
	/**
	 * [RM 4201] Bloquear vers�o batch para IP pr� cadastrado
	 * 
	 * M�todo que verifica se o ip do servidor possui
	 * autoriza��o para rodar batch
	 * 
	 * @author Raimundo Martins
	 * @date 31/07/2012 
	 * */
	
	/*public static boolean autorizadoBatch(){
		boolean retorno = false;	
		try{
			SistemaParametro sisp = (SistemaParametro) getSession().createCriteria(SistemaParametro.class).uniqueResult();
			InetAddress ip = InetAddress.getLocalHost();			
			if(ip.getHostAddress()!=null && sisp.getIpAutorizadoBatch() !=null &&
			  !ip.getHostAddress().trim().equals("""") && !sisp.getIpAutorizadoBatch().trim().equals("""") &&
			   ip.getHostAddress().equals(sisp.getIpAutorizadoBatch()))
				retorno = true;
		}catch(Exception ex){
			ex.printStackTrace();
		}		
		return retorno;
	}*/
	
}
",java
/home/runner/.cache/pip/pool/15/59/91/e229622a3722873302c25a11d45d896304992bd3f87ff86f2112c74834,c
"//
// Created by luozhen on 2018/2/28.
//

#ifndef CODEFORCES_MEDIAN_OF_TWO_SORTED_ARRAYS_H
#define CODEFORCES_MEDIAN_OF_TWO_SORTED_ARRAYS_H

#endif //CODEFORCES_MEDIAN_OF_TWO_SORTED_ARRAYS_H

//There are two sorted arrays nums1 and nums2 of size m and n respectively.
//
//Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).
//
//Example 1:
//nums1 = [1, 3]
//nums2 = [2]
//
//The median is 2.0
//Example 2:
//nums1 = [1, 2]
//nums2 = [3, 4]
//
//The median is (2 + 3)/2 = 2.5


",c
"#ifndef WIYATA_CODEFORCES_REORDER_H
#define WIYATA_CODEFORCES_REORDER_H

char const* reorder(unsigned n, unsigned a[n], unsigned m);

#endif /* WIYATA_CODEFORCES_REORDER_H */
",c
"//
// Created by luozhen on 2017/12/22.
//

#ifndef CODEFORCES_A131_H
#define CODEFORCES_A131_H

#endif //CODEFORCES_A131_H

//A. cAPS lOCK
//time limit per test0.5 second
//memory limit per test256 megabytes
//inputstandard input
//outputstandard output
//wHAT DO WE NEED cAPS LOCK FOR?
//
//Caps lock is a computer keyboard key. Pressing it sets an input mode in which typed letters are capital by default. If it is pressed by accident, it leads to accidents like the one we had in the first passage.
//
//Let's consider that a word has been typed with the Caps lock key accidentally switched on, if:
//
//either it only contains uppercase letters;
//or all letters except for the first one are uppercase.
//In this case we should automatically change the case of all letters. For example, the case of the letters that form words ""hELLO"", ""HTTP"", ""z"" should be changed.
//
//Write a program that applies the rule mentioned above. If the rule cannot be applied, the program should leave the word unchanged.
//
//Input
//The first line of the input data contains a word consisting of uppercase and lowercase Latin letters. The word's length is from 1 to 100 characters, inclusive.
//
//Output
//Print the result of the given word's processing.
//
//Examples
//input
//cAPS
//output
//Caps
//input
//Lock
//output
//Lock
//
",c
"struct Circle : Point {
    double r;
    Circle(double x = 0, double y = 0, double r = 0) : Point(x, y), r(r) {}
    Circle(Point p, double r) : Point(p), r(r) {}
    
    bool contains(Point p) { return (*this - p).len() <= r + EPS; }
};

// Find common tangents to 2 circles
// Tested:
// - http://codeforces.com/gym/100803/ - H
// Helper method
void tangents(Point c, double r1, double r2, vector<Line> & ans) {
    double r = r2 - r1;
    double z = sqr(c.x) + sqr(c.y);
    double d = z - sqr(r);
    if (d < -EPS)  return;
    d = sqrt(fabs(d));
    Line l((c.x * r + c.y * d) / z,
            (c.y * r - c.x * d) / z,
            r1);
    ans.push_back(l);
}
// Actual method: returns vector containing all common tangents
vector<Line> tangents(Circle a, Circle b) {
    vector<Line> ans; ans.clear();
    for (int i=-1; i<=1; i+=2)
        for (int j=-1; j<=1; j+=2)
            tangents(b-a, a.r*i, b.r*j, ans);
    for(int i = 0; i < ans.size(); ++i)
        ans[i].c -= ans[i].a * a.x + ans[i].b * a.y;

    vector<Line> ret;
    for(int i = 0; i < (int) ans.size(); ++i) {
        bool ok = true;
        for(int j = 0; j < i; ++j)
            if (areSame(ret[j], ans[i])) {
                ok = false;
                break;
            }
        if (ok) ret.push_back(ans[i]);
    }
    return ret;
}

// Circle & line intersection
// Tested:
// - http://codeforces.com/gym/100803/ - H
vector<Point> intersection(Line l, Circle cir) {
    double r = cir.r, a = l.a, b = l.b, c = l.c + l.a*cir.x + l.b*cir.y;
    vector<Point> res;

    double x0 = -a*c/(a*a+b*b),  y0 = -b*c/(a*a+b*b);
    if (c*c > r*r*(a*a+b*b)+EPS) return res;
    else if (fabs(c*c - r*r*(a*a+b*b)) < EPS) {
        res.push_back(Point(x0, y0) + Point(cir.x, cir.y));
        return res;
    }
    else {
        double d = r*r - c*c/(a*a+b*b);
        double mult = sqrt (d / (a*a+b*b));
        double ax,ay,bx,by;
        ax = x0 + b * mult;
        bx = x0 - b * mult;
        ay = y0 - a * mult;
        by = y0 + a * mult;

        res.push_back(Point(ax, ay) + Point(cir.x, cir.y));
        res.push_back(Point(bx, by) + Point(cir.x, cir.y));
        return res;
    }
}

// helper functions for commonCircleArea
double cir_area_solve(double a, double b, double c) {
    return acos((a*a + b*b - c*c) / 2 / a / b);
}
double cir_area_cut(double a, double r) {
    double s1 = a * r * r / 2;
    double s2 = sin(a) * r * r / 2;
    return s1 - s2;
}
// Tested: http://codeforces.com/contest/600/problem/D
double commonCircleArea(Circle c1, Circle c2) { //return the common area of two circle
    if (c1.r < c2.r) swap(c1, c2);
    double d = (c1 - c2).len();
    if (d + c2.r <= c1.r + EPS) return c2.r*c2.r*M_PI;
    if (d >= c1.r + c2.r - EPS) return 0.0;
    double a1 = cir_area_solve(d, c1.r, c2.r);
    double a2 = cir_area_solve(d, c2.r, c1.r);
    return cir_area_cut(a1*2, c1.r) + cir_area_cut(a2*2, c2.r);
}

// Check if 2 circle intersects. Return true if 2 circles touch
bool areIntersect(Circle u, Circle v) {
    if (cmp((u - v).len(), u.r + v.r) > 0) return false;
    if (cmp((u - v).len() + v.r, u.r) < 0) return false;
    if (cmp((u - v).len() + u.r, v.r) < 0) return false;
    return true;
}

// If 2 circle touches, will return 2 (same) points
// If 2 circle are same --> be careful
// Tested:
// - http://codeforces.com/gym/100803/ - H
// - http://codeforces.com/gym/100820/ - I
vector<Point> circleIntersect(Circle u, Circle v) {
    vector<Point> res;
    if (!areIntersect(u, v)) return res;
    double d = (u - v).len();
    double alpha = acos((u.r * u.r + d*d - v.r * v.r) / 2.0 / u.r / d);

    Point p1 = (v - u).rotate(alpha);
    Point p2 = (v - u).rotate(-alpha);
    res.push_back(p1 / p1.len() * u.r + u);
    res.push_back(p2 / p2.len() * u.r + u);
    return res;
}
",c
"//
// Created by luozhen on 2017/7/25.
//

#ifndef CODEFORCES_VASYA_AND_SHIFTS_H
#define CODEFORCES_VASYA_AND_SHIFTS_H

#endif //CODEFORCES_VASYA_AND_SHIFTS_H

//Vasya has a set of 4n strings of equal length, consisting of lowercase English letters ""a"", ""b"", ""c"", ""d"" and ""e"".
// Moreover, the set is split into n groups of 4 equal strings each. Vasya also has one special string a of the same length,
// consisting of letters ""a"" only.
//
//Vasya wants to obtain from string a some fixed string b, in order to do this, he can use the strings from his set
// in any order. When he uses some string x, each of the letters in string a replaces with the next letter in alphabet
// as many times as the alphabet position, counting from zero, of the corresponding letter in string x. Within this
// process the next letter in alphabet after ""e"" is ""a"".
//
// For example, if some letter in a equals ""b"", and the letter on the same position in x equals ""c"", then the letter
// in a becomes equal ""d"", because ""c"" is the second alphabet letter, counting from zero. If some letter in a equals ""e"",
// and on the same position in x is ""d"", then the letter in a becomes ""c"". For example, if the string a equals ""abcde"",
// and string x equals ""baddc"", then a becomes ""bbabb"".
//
//A used string disappears, but Vasya can use equal strings several times.
//
//Vasya wants to know for q given strings b, how many ways there are to obtain from the string a string b using the
// given set of 4n strings? Two ways are different if the number of strings used from some group of 4 strings is different.
// Help Vasya compute the answers for these questions modulo 109 + 7.
//
//Input
//The first line contains two integers n and m (1 ≤ n, m ≤ 500) — the number of groups of four strings in the set, and
// the length of all strings.
//
//Each of the next n lines contains a string s of length m, consisting of lowercase English letters ""a"", ""b"", ""c"", ""d""
// and ""e"". This means that there is a group of four strings equal to s.
//
//The next line contains single integer q (1 ≤ q ≤ 300) — the number of strings b Vasya is interested in.
//
//Each of the next q strings contains a string b of length m, consisting of lowercase English letters ""a"", ""b"", ""c"", ""

int vas_solution(){

}",c
/home/runner/.cache/pip/pool/fc/d7/db/b5f480926fc0ebbba68d1d6811bf7246704be449d303be9fbd022e3559,c
/home/runner/.cache/pip/pool/08/30/ed/c1a576d43da762dca99cc433c6fbe9669713bc8b3c399e8a0dad60e2dd,c
"/*
 * Cryptographic API.
 *
 * RIPEMD-320 - RACE Integrity Primitives Evaluation Message Digest.
 *
 * Based on the reference implementation by Antoon Bosselaers, ESAT-COSIC
 *
 * Copyright (c) 2008 Adrian-Ken Rueegsegger <ken@codelabs.ch>
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 */
#include <crypto/internal/hash.h>
#include <linux/init.h>
#include <linux/module.h>
#include <linux/mm.h>
#include <linux/types.h>
#include <asm/byteorder.h>

#include ""ripemd.h""

struct rmd320_ctx {
	u64 byte_count;
	u32 state[10];
	__le32 buffer[16];
};

#define K1  RMD_K1
#define K2  RMD_K2
#define K3  RMD_K3
#define K4  RMD_K4
#define K5  RMD_K5
#define KK1 RMD_K6
#define KK2 RMD_K7
#define KK3 RMD_K8
#define KK4 RMD_K9
#define KK5 RMD_K1

#define F1(x, y, z) (x ^ y ^ z)		/* XOR */
#define F2(x, y, z) (z ^ (x & (y ^ z)))	/* x ? y : z */
#define F3(x, y, z) ((x | ~y) ^ z)
#define F4(x, y, z) (y ^ (z & (x ^ y)))	/* z ? x : y */
#define F5(x, y, z) (x ^ (y | ~z))

#define ROUND(a, b, c, d, e, f, k, x, s)  { \
	(a) += f((b), (c), (d)) + le32_to_cpup(&(x)) + (k); \
	(a) = rol32((a), (s)) + (e); \
	(c) = rol32((c), 10); \
}

static void rmd320_transform(u32 *state, const __le32 *in)
{
	u32 aa, bb, cc, dd, ee, aaa, bbb, ccc, ddd, eee, tmp;

	/* Initialize left lane */
	aa = state[0];
	bb = state[1];
	cc = state[2];
	dd = state[3];
	ee = state[4];

	/* Initialize right lane */
	aaa = state[5];
	bbb = state[6];
	ccc = state[7];
	ddd = state[8];
	eee = state[9];

	/* round 1: left lane */
	ROUND(aa, bb, cc, dd, ee, F1, K1, in[0],  11);
	ROUND(ee, aa, bb, cc, dd, F1, K1, in[1],  14);
	ROUND(dd, ee, aa, bb, cc, F1, K1, in[2],  15);
	ROUND(cc, dd, ee, aa, bb, F1, K1, in[3],  12);
	ROUND(bb, cc, dd, ee, aa, F1, K1, in[4],   5);
	ROUND(aa, bb, cc, dd, ee, F1, K1, in[5],   8);
	ROUND(ee, aa, bb, cc, dd, F1, K1, in[6],   7);
	ROUND(dd, ee, aa, bb, cc, F1, K1, in[7],   9);
	ROUND(cc, dd, ee, aa, bb, F1, K1, in[8],  11);
	ROUND(bb, cc, dd, ee, aa, F1, K1, in[9],  13);
	ROUND(aa, bb, cc, dd, ee, F1, K1, in[10], 14);
	ROUND(ee, aa, bb, cc, dd, F1, K1, in[11], 15);
	ROUND(dd, ee, aa, bb, cc, F1, K1, in[12],  6);
	ROUND(cc, dd, ee, aa, bb, F1, K1, in[13],  7);
	ROUND(bb, cc, dd, ee, aa, F1, K1, in[14],  9);
	ROUND(aa, bb, cc, dd, ee, F1, K1, in[15],  8);

	/* round 1: right lane */
	ROUND(aaa, bbb, ccc, ddd, eee, F5, KK1, in[5],   8);
	ROUND(eee, aaa, bbb, ccc, ddd, F5, KK1, in[14],  9);
	ROUND(ddd, eee, aaa, bbb, ccc, F5, KK1, in[7],   9);
	ROUND(ccc, ddd, eee, aaa, bbb, F5, KK1, in[0],  11);
	ROUND(bbb, ccc, ddd, eee, aaa, F5, KK1, in[9],  13);
	ROUND(aaa, bbb, ccc, ddd, eee, F5, KK1, in[2],  15);
	ROUND(eee, aaa, bbb, ccc, ddd, F5, KK1, in[11], 15);
	ROUND(ddd, eee, aaa, bbb, ccc, F5, KK1, in[4],   5);
	ROUND(ccc, ddd, eee, aaa, bbb, F5, KK1, in[13],  7);
	ROUND(bbb, ccc, ddd, eee, aaa, F5, KK1, in[6],   7);
	ROUND(aaa, bbb, ccc, ddd, eee, F5, KK1, in[15],  8);
	ROUND(eee, aaa, bbb, ccc, ddd, F5, KK1, in[8],  11);
	ROUND(ddd, eee, aaa, bbb, ccc, F5, KK1, in[1],  14);
	ROUND(ccc, ddd, eee, aaa, bbb, F5, KK1, in[10], 14);
	ROUND(bbb, ccc, ddd, eee, aaa, F5, KK1, in[3],  12);
	ROUND(aaa, bbb, ccc, ddd, eee, F5, KK1, in[12],  6);

	/* Swap contents of ""a"" registers */
	tmp = aa; aa = aaa; aaa = tmp;

	/* round 2: left lane"" */
	ROUND(ee, aa, bb, cc, dd, F2, K2, in[7],   7);
	ROUND(dd, ee, aa, bb, cc, F2, K2, in[4],   6);
	ROUND(cc, dd, ee, aa, bb, F2, K2, in[13],  8);
	ROUND(bb, cc, dd, ee, aa, F2, K2, in[1],  13);
	ROUND(aa, bb, cc, dd, ee, F2, K2, in[10], 11);
	ROUND(ee, aa, bb, cc, dd, F2, K2, in[6],   9);
	ROUND(dd, ee, aa, bb, cc, F2, K2, in[15],  7);
	ROUND(cc, dd, ee, aa, bb, F2, K2, in[3],  15);
	ROUND(bb, cc, dd, ee, aa, F2, K2, in[12],  7);
	ROUND(aa, bb, cc, dd, ee, F2, K2, in[0],  12);
	ROUND(ee, aa, bb, cc, dd, F2, K2, in[9],  15);
	ROUND(dd, ee, aa, bb, cc, F2, K2, in[5],   9);
	ROUND(cc, dd, ee, aa, bb, F2, K2, in[2],  11);
	ROUND(bb, cc, dd, ee, aa, F2, K2, in[14],  7);
	ROUND(aa, bb, cc, dd, ee, F2, K2, in[11], 13);
	ROUND(ee, aa, bb, cc, dd, F2, K2, in[8],  12);

	/* round 2: right lane */
	ROUND(eee, aaa, bbb, ccc, ddd, F4, KK2, in[6],   9);
	ROUND(ddd, eee, aaa, bbb, ccc, F4, KK2, in[11], 13);
	ROUND(ccc, ddd, eee, aaa, bbb, F4, KK2, in[3],  15);
	ROUND(bbb, ccc, ddd, eee, aaa, F4, KK2, in[7],   7);
	ROUND(aaa, bbb, ccc, ddd, eee, F4, KK2, in[0],  12);
	ROUND(eee, aaa, bbb, ccc, ddd, F4, KK2, in[13],  8);
	ROUND(ddd, eee, aaa, bbb, ccc, F4, KK2, in[5],   9);
	ROUND(ccc, ddd, eee, aaa, bbb, F4, KK2, in[10], 11);
	ROUND(bbb, ccc, ddd, eee, aaa, F4, KK2, in[14],  7);
	ROUND(aaa, bbb, ccc, ddd, eee, F4, KK2, in[15],  7);
	ROUND(eee, aaa, bbb, ccc, ddd, F4, KK2, in[8],  12);
	ROUND(ddd, eee, aaa, bbb, ccc, F4, KK2, in[12],  7);
	ROUND(ccc, ddd, eee, aaa, bbb, F4, KK2, in[4],   6);
	ROUND(bbb, ccc, ddd, eee, aaa, F4, KK2, in[9],  15);
	ROUND(aaa, bbb, ccc, ddd, eee, F4, KK2, in[1],  13);
	ROUND(eee, aaa, bbb, ccc, ddd, F4, KK2, in[2],  11);

	/* Swap contents of ""b"" registers */
	tmp = bb; bb = bbb; bbb = tmp;

	/* round 3: left lane"" */
	ROUND(dd, ee, aa, bb, cc, F3, K3, in[3],  11);
	ROUND(cc, dd, ee, aa, bb, F3, K3, in[10], 13);
	ROUND(bb, cc, dd, ee, aa, F3, K3, in[14],  6);
	ROUND(aa, bb, cc, dd, ee, F3, K3, in[4],   7);
	ROUND(ee, aa, bb, cc, dd, F3, K3, in[9],  14);
	ROUND(dd, ee, aa, bb, cc, F3, K3, in[15],  9);
	ROUND(cc, dd, ee, aa, bb, F3, K3, in[8],  13);
	ROUND(bb, cc, dd, ee, aa, F3, K3, in[1],  15);
	ROUND(aa, bb, cc, dd, ee, F3, K3, in[2],  14);
	ROUND(ee, aa, bb, cc, dd, F3, K3, in[7],   8);
	ROUND(dd, ee, aa, bb, cc, F3, K3, in[0],  13);
	ROUND(cc, dd, ee, aa, bb, F3, K3, in[6],   6);
	ROUND(bb, cc, dd, ee, aa, F3, K3, in[13],  5);
	ROUND(aa, bb, cc, dd, ee, F3, K3, in[11], 12);
	ROUND(ee, aa, bb, cc, dd, F3, K3, in[5],   7);
	ROUND(dd, ee, aa, bb, cc, F3, K3, in[12],  5);

	/* round 3: right lane */
	ROUND(ddd, eee, aaa, bbb, ccc, F3, KK3, in[15],  9);
	ROUND(ccc, ddd, eee, aaa, bbb, F3, KK3, in[5],   7);
	ROUND(bbb, ccc, ddd, eee, aaa, F3, KK3, in[1],  15);
	ROUND(aaa, bbb, ccc, ddd, eee, F3, KK3, in[3],  11);
	ROUND(eee, aaa, bbb, ccc, ddd, F3, KK3, in[7],   8);
	ROUND(ddd, eee, aaa, bbb, ccc, F3, KK3, in[14],  6);
	ROUND(ccc, ddd, eee, aaa, bbb, F3, KK3, in[6],   6);
	ROUND(bbb, ccc, ddd, eee, aaa, F3, KK3, in[9],  14);
	ROUND(aaa, bbb, ccc, ddd, eee, F3, KK3, in[11], 12);
	ROUND(eee, aaa, bbb, ccc, ddd, F3, KK3, in[8],  13);
	ROUND(ddd, eee, aaa, bbb, ccc, F3, KK3, in[12],  5);
	ROUND(ccc, ddd, eee, aaa, bbb, F3, KK3, in[2],  14);
	ROUND(bbb, ccc, ddd, eee, aaa, F3, KK3, in[10], 13);
	ROUND(aaa, bbb, ccc, ddd, eee, F3, KK3, in[0],  13);
	ROUND(eee, aaa, bbb, ccc, ddd, F3, KK3, in[4],   7);
	ROUND(ddd, eee, aaa, bbb, ccc, F3, KK3, in[13],  5);

	/* Swap contents of ""c"" registers */
	tmp = cc; cc = ccc; ccc = tmp;

	/* round 4: left lane"" */
	ROUND(cc, dd, ee, aa, bb, F4, K4, in[1],  11);
	ROUND(bb, cc, dd, ee, aa, F4, K4, in[9],  12);
	ROUND(aa, bb, cc, dd, ee, F4, K4, in[11], 14);
	ROUND(ee, aa, bb, cc, dd, F4, K4, in[10], 15);
	ROUND(dd, ee, aa, bb, cc, F4, K4, in[0],  14);
	ROUND(cc, dd, ee, aa, bb, F4, K4, in[8],  15);
	ROUND(bb, cc, dd, ee, aa, F4, K4, in[12],  9);
	ROUND(aa, bb, cc, dd, ee, F4, K4, in[4],   8);
	ROUND(ee, aa, bb, cc, dd, F4, K4, in[13],  9);
	ROUND(dd, ee, aa, bb, cc, F4, K4, in[3],  14);
	ROUND(cc, dd, ee, aa, bb, F4, K4, in[7],   5);
	ROUND(bb, cc, dd, ee, aa, F4, K4, in[15],  6);
	ROUND(aa, bb, cc, dd, ee, F4, K4, in[14],  8);
	ROUND(ee, aa, bb, cc, dd, F4, K4, in[5],   6);
	ROUND(dd, ee, aa, bb, cc, F4, K4, in[6],   5);
	ROUND(cc, dd, ee, aa, bb, F4, K4, in[2],  12);

	/* round 4: right lane */
	ROUND(ccc, ddd, eee, aaa, bbb, F2, KK4, in[8],  15);
	ROUND(bbb, ccc, ddd, eee, aaa, F2, KK4, in[6],   5);
	ROUND(aaa, bbb, ccc, ddd, eee, F2, KK4, in[4],   8);
	ROUND(eee, aaa, bbb, ccc, ddd, F2, KK4, in[1],  11);
	ROUND(ddd, eee, aaa, bbb, ccc, F2, KK4, in[3],  14);
	ROUND(ccc, ddd, eee, aaa, bbb, F2, KK4, in[11], 14);
	ROUND(bbb, ccc, ddd, eee, aaa, F2, KK4, in[15],  6);
	ROUND(aaa, bbb, ccc, ddd, eee, F2, KK4, in[0],  14);
	ROUND(eee, aaa, bbb, ccc, ddd, F2, KK4, in[5],   6);
	ROUND(ddd, eee, aaa, bbb, ccc, F2, KK4, in[12],  9);
	ROUND(ccc, ddd, eee, aaa, bbb, F2, KK4, in[2],  12);
	ROUND(bbb, ccc, ddd, eee, aaa, F2, KK4, in[13],  9);
	ROUND(aaa, bbb, ccc, ddd, eee, F2, KK4, in[9],  12);
	ROUND(eee, aaa, bbb, ccc, ddd, F2, KK4, in[7],   5);
	ROUND(ddd, eee, aaa, bbb, ccc, F2, KK4, in[10], 15);
	ROUND(ccc, ddd, eee, aaa, bbb, F2, KK4, in[14],  8);

	/* Swap contents of ""d"" registers */
	tmp = dd; dd = ddd; ddd = tmp;

	/* round 5: left lane"" */
	ROUND(bb, cc, dd, ee, aa, F5, K5, in[4],   9);
	ROUND(aa, bb, cc, dd, ee, F5, K5, in[0],  15);
	ROUND(ee, aa, bb, cc, dd, F5, K5, in[5],   5);
	ROUND(dd, ee, aa, bb, cc, F5, K5, in[9],  11);
	ROUND(cc, dd, ee, aa, bb, F5, K5, in[7],   6);
	ROUND(bb, cc, dd, ee, aa, F5, K5, in[12],  8);
	ROUND(aa, bb, cc, dd, ee, F5, K5, in[2],  13);
	ROUND(ee, aa, bb, cc, dd, F5, K5, in[10], 12);
	ROUND(dd, ee, aa, bb, cc, F5, K5, in[14],  5);
	ROUND(cc, dd, ee, aa, bb, F5, K5, in[1],  12);
	ROUND(bb, cc, dd, ee, aa, F5, K5, in[3],  13);
	ROUND(aa, bb, cc, dd, ee, F5, K5, in[8],  14);
	ROUND(ee, aa, bb, cc, dd, F5, K5, in[11], 11);
	ROUND(dd, ee, aa, bb, cc, F5, K5, in[6],   8);
	ROUND(cc, dd, ee, aa, bb, F5, K5, in[15],  5);
	ROUND(bb, cc, dd, ee, aa, F5, K5, in[13],  6);

	/* round 5: right lane */
	ROUND(bbb, ccc, ddd, eee, aaa, F1, KK5, in[12],  8);
	ROUND(aaa, bbb, ccc, ddd, eee, F1, KK5, in[15],  5);
	ROUND(eee, aaa, bbb, ccc, ddd, F1, KK5, in[10], 12);
	ROUND(ddd, eee, aaa, bbb, ccc, F1, KK5, in[4],   9);
	ROUND(ccc, ddd, eee, aaa, bbb, F1, KK5, in[1],  12);
	ROUND(bbb, ccc, ddd, eee, aaa, F1, KK5, in[5],   5);
	ROUND(aaa, bbb, ccc, ddd, eee, F1, KK5, in[8],  14);
	ROUND(eee, aaa, bbb, ccc, ddd, F1, KK5, in[7],   6);
	ROUND(ddd, eee, aaa, bbb, ccc, F1, KK5, in[6],   8);
	ROUND(ccc, ddd, eee, aaa, bbb, F1, KK5, in[2],  13);
	ROUND(bbb, ccc, ddd, eee, aaa, F1, KK5, in[13],  6);
	ROUND(aaa, bbb, ccc, ddd, eee, F1, KK5, in[14],  5);
	ROUND(eee, aaa, bbb, ccc, ddd, F1, KK5, in[0],  15);
	ROUND(ddd, eee, aaa, bbb, ccc, F1, KK5, in[3],  13);
	ROUND(ccc, ddd, eee, aaa, bbb, F1, KK5, in[9],  11);
	ROUND(bbb, ccc, ddd, eee, aaa, F1, KK5, in[11], 11);

	/* Swap contents of ""e"" registers */
	tmp = ee; ee = eee; eee = tmp;

	/* combine results */
	state[0] += aa;
	state[1] += bb;
	state[2] += cc;
	state[3] += dd;
	state[4] += ee;
	state[5] += aaa;
	state[6] += bbb;
	state[7] += ccc;
	state[8] += ddd;
	state[9] += eee;

	return;
}

static int rmd320_init(struct shash_desc *desc)
{
	struct rmd320_ctx *rctx = shash_desc_ctx(desc);

	rctx->byte_count = 0;

	rctx->state[0] = RMD_H0;
	rctx->state[1] = RMD_H1;
	rctx->state[2] = RMD_H2;
	rctx->state[3] = RMD_H3;
	rctx->state[4] = RMD_H4;
	rctx->state[5] = RMD_H5;
	rctx->state[6] = RMD_H6;
	rctx->state[7] = RMD_H7;
	rctx->state[8] = RMD_H8;
	rctx->state[9] = RMD_H9;

	memset(rctx->buffer, 0, sizeof(rctx->buffer));

	return 0;
}

static int rmd320_update(struct shash_desc *desc, const u8 *data,
			 unsigned int len)
{
	struct rmd320_ctx *rctx = shash_desc_ctx(desc);
	const u32 avail = sizeof(rctx->buffer) - (rctx->byte_count & 0x3f);

	rctx->byte_count += len;

	/* Enough space in buffer? If so copy and we're done */
	if (avail > len) {
		memcpy((char *)rctx->buffer + (sizeof(rctx->buffer) - avail),
		       data, len);
		goto out;
	}

	memcpy((char *)rctx->buffer + (sizeof(rctx->buffer) - avail),
	       data, avail);

	rmd320_transform(rctx->state, rctx->buffer);
	data += avail;
	len -= avail;

	while (len >= sizeof(rctx->buffer)) {
		memcpy(rctx->buffer, data, sizeof(rctx->buffer));
		rmd320_transform(rctx->state, rctx->buffer);
		data += sizeof(rctx->buffer);
		len -= sizeof(rctx->buffer);
	}

	memcpy(rctx->buffer, data, len);

out:
	return 0;
}

/* Add padding and return the message digest. */
static int rmd320_final(struct shash_desc *desc, u8 *out)
{
	struct rmd320_ctx *rctx = shash_desc_ctx(desc);
	u32 i, index, padlen;
	__le64 bits;
	__le32 *dst = (__le32 *)out;
	static const u8 padding[64] = { 0x80, };

	bits = cpu_to_le64(rctx->byte_count << 3);

	/* Pad out to 56 mod 64 */
	index = rctx->byte_count & 0x3f;
	padlen = (index < 56) ? (56 - index) : ((64+56) - index);
	rmd320_update(desc, padding, padlen);

	/* Append length */
	rmd320_update(desc, (const u8 *)&bits, sizeof(bits));

	/* Store state in digest */
	for (i = 0; i < 10; i++)
		dst[i] = cpu_to_le32p(&rctx->state[i]);

	/* Wipe context */
	memset(rctx, 0, sizeof(*rctx));

	return 0;
}

static struct shash_alg alg = {
	.digestsize	=	RMD320_DIGEST_SIZE,
	.init		=	rmd320_init,
	.update		=	rmd320_update,
	.final		=	rmd320_final,
	.descsize	=	sizeof(struct rmd320_ctx),
	.base		=	{
		.cra_name	 =	""rmd320"",
		.cra_flags	 =	CRYPTO_ALG_TYPE_SHASH,
		.cra_blocksize	 =	RMD320_BLOCK_SIZE,
		.cra_module	 =	THIS_MODULE,
	}
};

static int __init rmd320_mod_init(void)
{
	return crypto_register_shash(&alg);
}

static void __exit rmd320_mod_fini(void)
{
	crypto_unregister_shash(&alg);
}

module_init(rmd320_mod_init);
module_exit(rmd320_mod_fini);

MODULE_LICENSE(""GPL"");
MODULE_AUTHOR(""Adrian-Ken Rueegsegger <ken@codelabs.ch>"");
MODULE_DESCRIPTION(""RIPEMD-320 Message Digest"");
MODULE_ALIAS_CRYPTO(""rmd320"");
",c
"#include <stdio.h>
#include <stdlib.h>
#include ""ml.h""

int  iunique(int y[], int n, int **values)
     /*
       extract unique values from a vector y of n integers.
       
       Return value: the number of unique values on success, 0 otherwise.
     */
{
  int nvalues=1;
  int i,j;
  int addclass;
  int *indx;

  if(!(*values=ivector(1))){
    fprintf(stderr,""iunique: out of memory\n"");
    return 0;
  }
    
  (*values)[0]=y[0];
  for(i=1;i<n;i++){
    addclass=1;
    for(j=0;j<nvalues;j++)
      if((*values)[j]==y[i])
        addclass=0;
    if(addclass){
      if(!(*values=(int*)realloc(*values,(nvalues+1)*sizeof(int)))){
	fprintf(stderr,""iunique: out of memory\n"");
	return 0;
      }
      (*values)[nvalues++]=y[i];
    }
  }

  if(!(indx=ivector(nvalues))){
    fprintf(stderr,""iunique: out of memory\n"");
    return 0;
  }

  isort(*values,indx,nvalues,SORT_ASCENDING);

  if(free_ivector(indx)!=0){
    fprintf(stderr,""iunique: free_ivector error\n"");
    return 0;
  }

  return nvalues;
}


int  dunique(double y[], int n, double **values)
     /*
       extract unique values from a vector y of n doubles.
       
       Return value: the number of unique values on success, 0 otherwise.
     */
{
  int nvalues=1;
  int i,j;
  int addclass;
  int *indx;

  if(!(*values=dvector(1))){
    fprintf(stderr,""dunique: out of memory\n"");
    return 0;
  }
    
  (*values)[0]=y[0];
  for(i=1;i<n;i++){
    addclass=1;
    for(j=0;j<nvalues;j++)
      if((*values)[j]==y[i])
        addclass=0;
    if(addclass){
      if(!(*values=(double*)realloc(*values,(nvalues+1)*sizeof(double)))){
	fprintf(stderr,""dunique: out of memory\n"");
	return 0;
      }
      (*values)[nvalues++]=y[i];
    }
  }

  if(!(indx=ivector(nvalues))){
    fprintf(stderr,""iunique: out of memory\n"");
    return 0;
  }

  dsort(*values,indx,nvalues,SORT_ASCENDING);

  if(free_ivector(indx)!=0){
    fprintf(stderr,""iunique: free_ivector error\n"");
    return 0;
  }

  return nvalues;
}
",c
/home/runner/.cache/pip/pool/9f/36/73/a5473c01f4edc3e20d47728ec5c8f1f69cb355433c3a1b2b747d9d3bfc,c
"// Max External: startup.c
// T.Place - 9/4/2001, 1/8/2002
// A simple Max object to put all tap.tools' objects into the new object list & post some info

#include ""ext.h""				// Required for all Max external objects

void *this_class;			// Required. Global pointing to this class 

typedef struct startup		// Data structure for this object 
{
	Object	p_ob;		// Must always be the first field; used by Max 
} Startup;

		
// Prototypes for methods: need a method for each incoming message
void	*startup_new(long value);			// object creation method  
void	startup_free(Startup *startup);	// free method

/*********************************************************/
//Main() Function

void main(void)			//main receives a copy of the Max function macros table 
{	
	// set up our class: create a class definition 
	setup((t_messlist **)&this_class, (method)startup_new, (method)startup_free, (short)sizeof(Startup), 0L, A_DEFLONG, 0);

	addmess((method)inspector_open, ""info"", A_CANT, 0);		// bind method for opening the license window

	finder_addclass(""SuperCollider Lib"", ""sc.CombN"");
	finder_addclass(""SuperCollider Lib"", ""sc.LFPulse"");
	finder_addclass(""SuperCollider Lib"", ""sc.LFSaw"");
	finder_addclass(""SuperCollider Lib"", ""sc.midicps"");
	finder_addclass(""SuperCollider Lib"", ""sc.SinOsc"");
	finder_addclass(""SuperCollider Lib"", ""sc.WhiteNoise"");
	finder_addclass(""SuperCollider Lib"", ""sc.Xline"");
	
//	finder_addclass(""Tap.Tools"", ""tap.metro"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.prime"");
	finder_addclass(""Tap.Tools"", ""tap.random"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.sieve"");					// add object to new-object list

	finder_addclass(""Tap.Tools"", ""tap.1pole-lp~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.allpole~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.anticlick~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.auto_thru~"");			// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.avg~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.bink~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.crossfade~"");			// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.decibels~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.diff~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.elixir~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.fft-list~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.fft-normalize~"");			// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.lp-comb~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.lpc~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.noise~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.pan~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.polar~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.quantize~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.radians~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.rms~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.scale~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.sift~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.split~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.typecheck~"");			// add object to new-object list

	finder_addclass(""Tap.Tools"", ""tap.5comb~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.adapt~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.decay_calc"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.deviate~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.fft~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.filterbank~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.gate~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.ifft~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.Lchange"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.limiter~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.loadbang"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.normalizer~"");			// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.nr~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.shift~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.sustain~"");				// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.thru~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.verb~"");					// add object to new-object list
	finder_addclass(""Tap.Tools"", ""tap.vocoder~"");				// add object to new-object list	
	finder_addclass(""Tap.Tools"", ""tap.vocoderlite~"");			// add object to new-object list	
	
	post(""Tap.Tools MSP"");						// Print to the Max Window...
	post(""    Objects for Max/MSP by Tim Place"");
	post(""    Version 0.95"");
	post(""    Copyright � 1999-2002 by Silicon Prairie Intermedia"");
	post(""    http://www.sp-intermedia.com"");
	post(""    Use \""Get Info\"" on any object to view its license"");
}


/*********************************************************/
//Object Creation Function

void *startup_new(long value)
{
	Startup *startup;
	startup = (Startup *)newobject(this_class);	// create the new instance and return a pointer to it 
	return(startup);						// must return a pointer to the new instance 
}


/*********************************************************/
//Bound to input Functions

// free method
void startup_free(Startup *startup)
{
	notify_free((t_object *)startup);
}",c
"#include <stdlib.h>
#include <stdio.h>
#include <string.h>

int main(int argc, char *argv[])
{
	char banner[100] = """";
			
	scanf(""%s"", banner);
	
	char codeforces[] = ""CODEFORCES"";
	int len = strlen(codeforces); // Although we know it's 10
	
	int i;
	int index = 0;
	int achieved = 0;
	int status = 0;
	
	for (i = 0; i < strlen(banner); i++)
	{
		if (index == len && achieved != 0) // CODEFORCES already completed but still iterating; reset index with achieved data
			index = achieved; // index resetted, but must continue checking current letter
		
		if (banner[i] == codeforces[index])
		{
			if (status == 1)
			{
				status = 2;
			}				
			index++;
		}	
		else //if (banner[i] != codeforces[index])
		{
			if (status == 0) // 1st error. save accumulated data
			{
				achieved = index;
				status = 1;
			}
			else if (status == 2) // Another error, reset index by loading achieved data
			{
				index = achieved;
				status = 1;
			}
		}
	}

	if (status == 0 && index == len) // Ideal case, received word is CODEFORCES
		printf(""YES\n"");	
	else if (status == 1 && achieved == len) // Completed CODEFORCES but got a substring after
		printf(""YES\n"");
	else if (status == 2 && index == len) // Got a substring but ended completing CODEFORCES
		printf(""YES\n"");
	else
		printf(""NO\n"");

	return 0;
}
",c
/home/runner/.cache/pip/pool/7f/f7/36/674c7000a4c978add160c229d5d817615f10c9e3b15202a4321b78aa4a,c
"//
// Created by luozhen on 2017/8/25.
//

#ifndef CODEFORCES_BLOCK_ALI_H
#define CODEFORCES_BLOCK_ALI_H

#endif //CODEFORCES_BLOCK_ALI_H
#include <stdio.h>
#include <math.h>
#include <stdlib.h>

int Get(int n){
    int x;
    // do something
    int sq = sqrt(n * 2.0) - 1;
//    if(n == sq)
//        return n;
    while(sq * (sq + 1) / 2 < n){
        sq += 1;
    }
    printf(""sq:%d"", sq);
    x = n - sq * (sq - 1) / 2;
    return x % 10;
}

int block_main()
{
    int n;
    scanf(""%d"",&n);
    n += 1;
    int x;
    // do something
    int sq = sqrt(n * 2.0) - 1;
    while(sq * (sq + 1) / 2 < n){
        sq += 1;
    }
    x = n - sq * (sq - 1) / 2;
    printf(""%d"",x%10);
}",c
"/**
 * Author: Simon Lindholm
 * License: CC0
 * Source: Codeforces
 * Description: Given $a[i] = \min_{lo(i) \le k < hi(i)}(f(i, k))$ where the (minimal) optimal $k$ increases with $i$, computes $a[i]$ for $i = L..R-1$.
 * Status: tested on http://codeforces.com/contest/321/problem/E
 * Time: O((N + (hi-lo)) \log N)
 */
#pragma once

struct DP { // Modify at will:
	int lo(int ind) { return 0; }
	int hi(int ind) { return ind; }
	ll f(int ind, int k) { return dp[ind][k]; }
	void store(int ind, int k, ll v) { res[ind] = pii(k, v); }

	void rec(int L, int R, int LO, int HI) {
		if (L >= R) return;
		int mid = (L + R) >> 1;
		pair<ll, int> best(LLONG_MAX, LO);
		rep(k, max(LO,lo(mid)), min(HI,hi(mid)))
			best = min(best, make_pair(f(mid, k), k));
		store(mid, best.second, best.first);
		rec(L, mid, LO, best.second+1);
		rec(mid+1, R, best.second, HI);
	}
	void solve(int L, int R) { rec(L, R, INT_MIN, INT_MAX); }
};
",c
"//
// Created by luozhen on 2018/7/9.
//

#ifndef CODEFORCES_VECTOR_H
#define CODEFORCES_VECTOR_H

#endif //CODEFORCES_VECTOR_H
",c
"//
// Created by luozhen on 2018/5/4.
//

#ifndef CODEFORCES_LIB_H
#define CODEFORCES_LIB_H

#endif //CODEFORCES_LIB_H

struct ListNode {
    int val;
    ListNode *next;
    ListNode(int x) : val(x), next(NULL) {}
};


ListNode* createList(int* a, int n){
    ListNode* list = new ListNode(0), *res = list;
    for(int i=0; i<n; i++){
        res->next = new ListNode(0);
        res->next->val = a[i];
        //cout << res->next->val << "" "";
        res = res->next;
    }
    return list->next;
}

void showList(ListNode* ls){
    cout << ""show list:"" << endl;
    ListNode* p = ls;
    while(p){
        cout << p->val << "" "";
        p = p->next;
    }
    cout << endl;
}

",c
/home/runner/.cache/pip/pool/71/bb/0d/dcb93d1e4c33afd73ec8e3f6c44060d7f9a5d57ee7c003035b11a3cdcf,c
"#include <stdlib.h>
#include <stdio.h>
#include <string.h>

int main(int argc, char *argv[])
{
	char banner[100] = """";
			
	scanf(""%s"", banner);
	
	char codeforces[] = ""CODEFORCES"";
	int len = strlen(codeforces); // Although we know it's 10
	
	int i;
	int index = 0;
	int achieved = 0;
	int status = 0;
	
	for (i = 0; i < strlen(banner); i++)
	{
		if (index == len && achieved != 0) // CODEFORCES already completed but still iterating; reset index with achieved data
			index = achieved; // index resetted, but must continue checking current letter
		
		if (banner[i] == codeforces[index])
		{
			if (status == 1)
			{
				status = 2;
			}				
			index++;
		}	
		else //if (banner[i] != codeforces[index])
		{
			if (status == 0) // 1st error. save accumulated data
			{
				achieved = index;
				status = 1;
			}
			else if (status == 2) // Another error, reset index by loading achieved data
			{
				index = achieved;
				status = 1;
			}
		}
	}

	if (status == 0 && index == len) // Ideal case, received word is CODEFORCES
		printf(""YES\n"");	
	else if (status == 1 && achieved == len) // Completed CODEFORCES but got a substring after
		printf(""YES\n"");
	else if (status == 2 && index == len) // Got a substring but ended completing CODEFORCES
		printf(""YES\n"");
	else
		printf(""NO\n"");

	return 0;
}
",c
"#include<Windows.h>
#include""APITransfer.h""
#include""CommandManager.h""
#include""InlineCommand.h""


int RegisterInlineCommand()
{
	pBOIT_COMMAND Command_qwq = RegisterCommand(L""qwq"", CmdMsg_qwq_Proc, L""����"", BOIT_MATCH_FULL);
	AddCommandAlias(Command_qwq, L""pwp"");
	AddCommandAlias(Command_qwq, L""qaq"");
	RegisterCommand(L""èè"", CmdMsg_cat_Proc, L""����èè��"", BOIT_MATCH_FULL);
	RegisterCommand(L""����"", CmdMsg_meow_Proc, L""����èè��"", BOIT_MATCH_FULL);
	
	RegisterCommand(L""boast"", CmdMsg_boast_Proc, L""��ţ��(�����еĹ���)"", BOIT_MATCH_FULL);
	RegisterCommandEx(L""run"", CmdMsg_run_Proc, CmdEvent_run_Proc, L""���д���"", BOIT_MATCH_PARAM);
	RegisterCommand(L""savecode"", CmdMsg_savecode_Proc, L""�������"", BOIT_MATCH_PARAM);
	RegisterCommand(L""runcode"", CmdMsg_runcode_Proc, L""���б���Ĵ���"", BOIT_MATCH_PARAM);
	RegisterCommand(L""showcode"", CmdMsg_showcode_Proc, L""��ʾ����"", BOIT_MATCH_PARAM);
	RegisterCommandEx(L""oier"", CmdMsg_oier_Proc,CmdEvent_oier_Proc, L""��ѯ OIer ��Ϣ"", BOIT_MATCH_PARAM);
	pBOIT_COMMAND Command_cf = RegisterCommandEx(L""cf"", CmdMsg_codeforces_Proc, CmdEvent_codeforces_Proc, L""��ѯ CF ��Ϣ"", BOIT_MATCH_PARAM);
	AddCommandAlias(Command_cf, L""codeforce"");
	AddCommandAlias(Command_cf, L""codeforces"");

	RegisterCommandEx(L""luogu"", CmdMsg_luogu_Proc, CmdEvent_luogu_Proc, L""��ѯ�����Ϣ"", BOIT_MATCH_PARAM);

	RegisterCommand(L""help"", CmdMsg_help_Proc, L""������Ϣ"", BOIT_MATCH_PARAM);
	RegisterCommand(L""q&amp;a"", CmdMsg_q_and_a_Proc, L""�����ʴ�"", BOIT_MATCH_FULL);
	RegisterCommand(L""admin"", CmdMsg_admin_Proc, L""����Ⱥ����bot����"", BOIT_MATCH_PARAM);
	RegisterCommand(L""about"", CmdMsg_about_Proc, L""����"", BOIT_MATCH_FULL);
	RegisterCommand(L""��Ǯ"", CmdMsg_donate_Proc, L""???"", BOIT_MATCH_FULL);
	RegisterCommand(L""version"", CmdMsg_version_Proc, L""�鿴boit�汾"", BOIT_MATCH_FULL);
	RegisterCommand(L""stop"", CmdMsg_stop_Proc, L""�ر�BOIT"", BOIT_MATCH_FULL);

	return 0;
}",c
/home/runner/.cache/pip/pool/5b/29/74/8a9caccc72a8b5e2d7d2ea33d3e7c8e178dfef43bf9a8910099024a39e,c
"/**
 * Author: User adamant on CodeForces
 * Source: http://codeforces.com/blog/entry/12143
 * Description: For each position in a string, computes p[0][i] = half length of
 *  longest even palindrome around pos i, p[1][i] = longest odd (half rounded down).
 * Time: O(N)
 * Status: Fuzz-tested
 */
#pragma once

void manacher(const string& s) {
	int n = sz(s);
	vi p[2] = {vi(n+1), vi(n)};
	rep(z,0,2) for (int i=0,l=0,r=0; i < n; i++) {
		int t = r-i+!z;
		if (i<r) p[z][i] = min(t, p[z][l+t]);
		int L = i-p[z][i], R = i+p[z][i]-!z;
		while (L>=1 && R+1<n && s[L-1] == s[R+1])
			p[z][i]++, L--, R++;
		if (R>r) l=L, r=R;
}}
",c
/home/runner/.cache/pip/pool/31/aa/28/6720c63b52d353b450486ff4870a8bf8dc5b4cdc0cd314917156ae8628,c
"#ifndef _CODEFORCES_H

int Codeforces_1157C1();
void Codeforces_1157A();
int Codeforces_1157E();
int Codeforces_1169B();
int Codeforces_2A();
int Codeforces_4B();
int Codeforces_4C();
int Codeforces_1B();

#endif // !_CODEFORCES_H



",c
"//
// Created by luozhen on 2017/12/21.
//

#ifndef CODEFORCES_A281_H
#define CODEFORCES_A281_H

#endif //CODEFORCES_A281_H

//A. Word Capitalization
//time limit per test2 seconds
//memory limit per test256 megabytes
//inputstandard input
//outputstandard output
//Capitalization is writing a word with its first letter as a capital letter. Your task is to capitalize the given word.
//
//Note, that during capitalization all the letters except the first one remains unchanged.
//
//Input
//A single line contains a non-empty word. This word consists of lowercase and uppercase English letters. The length of the word will not exceed 103.
//
//Output
//Output the given word after capitalization.
//
//Examples
//input
//ApPLe
//output
//ApPLe
//input
//konjac
//output
//Konjac



",c
/home/runner/.cache/pip/pool/9c/c7/c8/bdea484861437b13eb3189792d6b5d9ade94cbd4ca3f31780556b2c362,c
/home/runner/.cache/pip/pool/3f/e6/07/8e3d971384a2b610643f00e04a13b11969d548d51783bda1f0ede4a5bb,c
/home/runner/.cache/pip/pool/b1/f1/24/af2dfcb60045573c8d5ce046fc5f178745f3a09d3ec9c46395165d5bc0,c
/home/runner/.cache/pip/pool/38/73/b9/76ff73884011b57db0d953c3a011f352b37b0e83c5125b5ed3d47d2bd7,c
